import * as symbols from './symbols.js';
import ReactiveElement from './ReactiveElement.js'; // eslint-disable-line no-unused-vars


const absorbDecelerationKey = Symbol('absorbDeceleration');
const lastDeltaXKey = Symbol('lastDeltaX');
const lastWheelTimeoutKey = Symbol('lastWheelTimeout');
const postNavigateDelayCompleteKey = Symbol('postNavigateDelayComplete');
const wheelDistanceKey = Symbol('wheelDistance');
const wheelSequenceAxisKey = Symbol('wheelSequenceAxis');


/**
 * Map trackpad events to swipe gestures.
 * 
 * @module TrackpadSwipeMixin
 * @param {Constructor<ReactiveElement>} Base
 */
export default function TrackpadSwipeMixin(Base) {

  // The class prototype added by the mixin.
  return class TrackpadSwipe extends Base {

    constructor() {
      // @ts-ignore
      super();
      this.addEventListener('wheel', async (event) => {
        this[symbols.raiseChangeEvents] = true;
        const handled = handleWheel(this, event);
        if (handled) {
          event.preventDefault();
        }
        await Promise.resolve();
        this[symbols.raiseChangeEvents] = false;
      });
      resetWheelTracking(this);
    }

    get defaultState() {
      const result = Object.assign(super.defaultState, {
        swipeAxis: 'horizontal',
        swipeFraction: null,
        swipeLeftWillCommit: false,
        swipeRightWillCommit: false,
        swipeStartX: null,
        swipeStartY: null
      });

      // If the swipeFraction crosses the -0.5 or 0.5 mark, update our notion of
      // whether we'll commit an operation if the swipe were to finish at that
      // point. This definition is compatible with one defined by
      // TouchSwipeMixin.
      result.onChange('swipeFraction', state => {
        const { swipeFraction } = state;
        if (swipeFraction !== null) {
          return {
            swipeLeftWillCommit: swipeFraction <= -0.5,
            swipeRightWillCommit: swipeFraction >= 0.5
          };
        }
        return null;
      });

      return result;
    }

    /**
     * See [symbols.swipeTarget](symbols#swipeTarget).
     * 
     * @property symbols.swipeTarget
     * @memberof TrackpadSwipeMixin
     * @type {HTMLElement}
     */
    get [symbols.swipeTarget]() {
      const base = super[symbols.swipeTarget];
      return base || this;
    }
  }
}


// Time we wait following a navigation before paying attention to wheel
// events again.
const POST_NAVIGATE_TIME = 250;

// Time we wait after the last wheel event before we reset things.
const WHEEL_TIME = 100;


/**
 * A wheel event has been generated. This could be a real wheel event, or it
 * could be fake (see notes in the header).
 *
 * This handler uses several strategies to try to approximate native trackpad
 * swipe navigation.
 *
 * If the user has dragged enough to cause a navigation, then for a short
 * delay following that navigation, subsequent wheel events will be ignored.
 *
 * Furthermore, follwowing a navigation, we ignore all wheel events until we
 * receive at least one event where the event's deltaX (distance traveled) is
 * *greater* than the previous event's deltaX. This helps us filter out the
 * fake wheel events generated by the browser to simulate deceleration.
 *
 * @private
 * @param {ReactiveElement} element
 * @param {WheelEvent} event
 */
function handleWheel(element, event) {

  if (element.state.swipeAxis === 'vertical') {
    // This mixin currently only supports horizontal swiping.
    return false;
  }

  /** @type {any} */ const cast = element;

  // Since we have a new wheel event, reset our timer waiting for the last
  // wheel event to pass.
  if (cast[lastWheelTimeoutKey]) {
    clearTimeout(cast[lastWheelTimeoutKey]);
  }
  cast[lastWheelTimeoutKey] = setTimeout(async () => {
    element[symbols.raiseChangeEvents] = true;
    wheelTimedOut(element);
    await Promise.resolve();
    cast[symbols.raiseChangeEvents] = false;
  }, WHEEL_TIME);

  const deltaX = event.deltaX;
  const deltaY = event.deltaY;

  // See if component event represents acceleration or deceleration.
  const acceleration = Math.sign(deltaX) * (deltaX - cast[lastDeltaXKey]);
  cast[lastDeltaXKey] = deltaX;

  // Is this the first wheel event in a swipe sequence?
  const eventBeginsSwipe = cast[wheelSequenceAxisKey] === null;

  // Was this specific event more vertical or more horizontal?
  const eventAxis = Math.abs(deltaY) > Math.abs(deltaX) ?
    'vertical' :
    'horziontal';
  if (eventBeginsSwipe) {
    // This first event's axis will determine which axis we'll respect for the
    // rest of the sequence.
    cast[wheelSequenceAxisKey] = eventAxis;
  } else if (eventAxis !== cast[wheelSequenceAxisKey]) {
    // This event continues a sequence. If the event's axis is perpendicular to
    // the sequence's axis, we'll absorb this event. E.g., if the user started a
    // vertical swipe (to scroll, say), then we absorb all subsequent horizontal
    // wheel events in the sequence.
    return true;
  }

  if (eventAxis === 'vertical') {
    // We leave vertical events unhandled so the browser can process them.
    return false;
  }

  if (cast[postNavigateDelayCompleteKey]) {
    // It's too soon after a navigation; absorb the event.
    return true;
  }

  if (acceleration > 0) {
    // The events are not (or are no longer) decelerating, so we can start
    // paying attention to them again.
    cast[absorbDecelerationKey] = false;
  } else if (cast[absorbDecelerationKey]) {
    // The wheel event was likely faked to simulate deceleration; absorb it.
    return true;
  }

  // Record the start position of the swipe.
  if (eventBeginsSwipe) {
    element.setState({
      swipeStartX: event.clientX,
      swipeStartY: event.clientY
    });
  }

  cast[wheelDistanceKey] -= deltaX;

  // Update the travel fraction of the component being navigated.
  const width = cast[symbols.swipeTarget].offsetWidth;
  let swipeFraction = width > 0 ?
    cast[wheelDistanceKey] / width :
    0;
  swipeFraction = Math.sign(swipeFraction) * Math.min(Math.abs(swipeFraction), 1);

  // If the user has dragged enough to reach the previous/next item, then
  // complete a navigation to that item.
  let gesture;
  if (swipeFraction === -1) {
    gesture = symbols.swipeLeft;
  } else if (swipeFraction === 1) {
    gesture = symbols.swipeRight;
  }
  if (gesture) {
    if (element[gesture]) {
      element[gesture]();
    }
    postNavigate(element);
  } else {
    element.setState({ swipeFraction });
  }

  return true;
}

/**
 * Following a navigation, partially reset our wheel tracking.
 * 
 * @private
 * @param {ReactiveElement} element
 */
function postNavigate(element) {
  /** @type {any} */ const cast = element;
  cast[absorbDecelerationKey] = true;
  cast[postNavigateDelayCompleteKey] = true;
  cast[wheelDistanceKey] = 0;
  setTimeout(() => {
    cast[postNavigateDelayCompleteKey] = false;
  }, POST_NAVIGATE_TIME);
  element.setState({
    swipeFraction: null,
    swipeStartX: null,
    swipeStartY: null
  });
}

/**
 * Reset all state related to the tracking of the wheel.
 * 
 * @private
 * @param {ReactiveElement} element
 */
function resetWheelTracking(element) {
  /** @type {any} */ const cast = element;
  cast[absorbDecelerationKey] = false;
  cast[wheelSequenceAxisKey] = null;
  cast[lastDeltaXKey] = 0;
  cast[postNavigateDelayCompleteKey] = false;
  cast[wheelDistanceKey] = 0;
  if (cast[lastWheelTimeoutKey]) {
    clearTimeout(cast[lastWheelTimeoutKey]);
    cast[lastWheelTimeoutKey] = null;
  }
}

/**
 * A sufficiently long period of time has passed since the last wheel event.
 * We snap the selection to the closest item, then reset our state.
 * 
 * @private
 * @param {ReactiveElement} element
 */
async function wheelTimedOut(element) {

  // If the user swiped far enough to commit a gesture, handle it now.
  let gesture;
  if (element.state.swipeLeftWillCommit) {
    gesture = symbols.swipeLeft;
  } else if (element.state.swipeRightWillCommit) {
    gesture = symbols.swipeRight;
  }

  // TODO: Listen for the transition to complete, and then restore
  // dragging to false (or the previous value).
  resetWheelTracking(element);
  element.setState({
    swipeFraction: null,
    swipeStartX: null,
    swipeStartY: null
  });

  if (gesture && element[gesture]) {
    await element[gesture]();
  }
}
