{"version":3,"sources":["webpack:///demos.min.js","webpack:///webpack/bootstrap d7f9c65a89ab5f9c486a","webpack:///./elements/demos/src/ListBox.js","webpack:///./elements/elix-mixins/src/DefaultSlotContentMixin.js","webpack:///./elements/elix-mixins/src/content.js","webpack:///./elements/elix-mixins/src/Symbol.js","webpack:///./elements/elix-mixins/src/symbols.js","webpack:///./elements/elix-mixins/src/ClickSelectionMixin.js","webpack:///./elements/elix-mixins/src/ContentItemsMixin.js","webpack:///./elements/elix-mixins/src/DirectionSelectionMixin.js","webpack:///./elements/elix-mixins/src/KeyboardDirectionMixin.js","webpack:///./elements/elix-mixins/src/KeyboardMixin.js","webpack:///./elements/elix-mixins/src/KeyboardPagedSelectionMixin.js","webpack:///./elements/elix-mixins/src/defaultScrollTarget.js","webpack:///./elements/elix-mixins/src/KeyboardPrefixSelectionMixin.js","webpack:///./elements/elix-mixins/src/constants.js","webpack:///./elements/elix-mixins/src/SelectionAriaMixin.js","webpack:///./elements/elix-mixins/src/SelectionInViewMixin.js","webpack:///./elements/elix-mixins/src/ShadowTemplateMixin.js","webpack:///./elements/elix-mixins/src/SingleSelectionMixin.js","webpack:///./elements/demos/src/SingleSelectionDemo.js"],"names":["modules","__webpack_require__","moduleId","installedModules","exports","module","id","loaded","call","m","c","p","_interopRequireDefault","obj","__esModule","default","_classCallCheck","instance","Constructor","TypeError","_possibleConstructorReturn","self","ReferenceError","_inherits","subClass","superClass","prototype","Object","create","constructor","value","enumerable","writable","configurable","setPrototypeOf","__proto__","defineProperty","_createClass","defineProperties","target","props","i","length","descriptor","key","protoProps","staticProps","_set","set","object","property","receiver","desc","getOwnPropertyDescriptor","undefined","parent","getPrototypeOf","setter","_get","get","Function","getter","_DefaultSlotContentMixin","_DefaultSlotContentMixin2","_ClickSelectionMixin","_ClickSelectionMixin2","_ContentItemsMixin","_ContentItemsMixin2","_DirectionSelectionMixin","_DirectionSelectionMixin2","_KeyboardDirectionMixin","_KeyboardDirectionMixin2","_KeyboardMixin","_KeyboardMixin2","_KeyboardPagedSelectionMixin","_KeyboardPagedSelectionMixin2","_KeyboardPrefixSelectionMixin","_KeyboardPrefixSelectionMixin2","_SelectionAriaMixin","_SelectionAriaMixin2","_SelectionInViewMixin","_SelectionInViewMixin2","_ShadowTemplateMixin","_ShadowTemplateMixin2","_SingleSelectionMixin","_SingleSelectionMixin2","_symbols","_symbols2","mixins","base","reduce","cls","mixin","HTMLElement","ListBox","_base","this","apply","arguments","attributeName","oldValue","newValue","mapAttributeToProperty","selected-index","propertyName","itemSelected","item","selected","classList","toggle","defaults","orientation","changed","getAttribute","setAttribute","raiseChangeEvents","event","CustomEvent","dispatchEvent","template","customElements","define","DefaultSlotContentMixin","DefaultSlotContent","_this2","setTimeout","slotchangeFiredSymbol","contentChanged","shadowCreated","_this3","slot","defaultSlot","addEventListener","content","assignedNodes","flatten","element","shadowRoot","querySelector","console","warn","_Symbol2","_Symbol3","substantiveElements","nodes","auxiliaryElementTags","filter","node","Element","localName","indexOf","uniqueString","description","count","symbolFunction","window","Symbol","symbols","getItemText","goDown","goEnd","goLeft","goRight","goStart","goUp","itemAdded","itemsChanged","keydown","ClickSelectionMixin","ClickSelection","_this","button","path","itemForTarget","selectionRequired","selectedItem","stopPropagation","listElement","items","itemCount","contains","_interopRequireWildcard","newObj","hasOwnProperty","ContentItemsMixin","ContentItems","itemsSymbol","Array","forEach","itemInitializedSymbol","_content","DirectionSelectionMixin","DirectionSelection","selectNext","selectLast","selectPrevious","selectFirst","KeyboardDirectionMixin","KeyboardDirection","handled","horizontal","vertical","keyCode","metaKey","altKey","KeyboardMixin","Keyboard","preventDefault","tabindex","KeyboardPagedSelectionMixin","KeyboardPagedSelection","pageUp","pageDown","scrollOnePage","scrollTarget","_defaultScrollTarget2","getIndexOfItemAtY","y","downward","start","end","step","topOfClientArea","offsetTop","clientTop","itemIndex","itemTop","found","itemBottom","offsetHeight","itemStyle","getComputedStyle","itemPaddingTop","parseFloat","paddingTop","itemPaddingBottom","paddingBottom","contentTop","contentBottom","clientHeight","edge","scrollTop","indexOfItemAtEdge","selectedIndex","newIndex","delta","_defaultScrollTarget","defaultScrollTarget","root","scrollingParent","getScrollingParent","parentNode","ShadowRoot","style","overflowX","overflowY","KeyboardPrefixSelectionMixin","KeyboardPrefixSelection","textContent","itemTextContentsSymbol","resetTypedPrefix","resetPrefix","handleBackspace","ctrlKey","which","handlePlainCharacter","String","fromCharCode","prefix","index","getIndexOfItemWithTextPrefix","settingSelectionSymbol","itemTextContents","getItemTextContents","prefixLength","itemTextContent","substr","map","text","toLowerCase","typedPrefixSymbol","selectItemWithTextPrefix","setPrefixTimeout","char","resetPrefixTimeout","prefixTimeoutSymbol","clearTimeout","_constants2","TYPING_TIMEOUT_DURATION","_constants","constants","SelectionAria","role","itemRole","baseId","idCount","itemId","removeAttribute","SelectionInView","scrollItemIntoView","scrollTargetRect","getBoundingClientRect","itemRect","bottomDelta","bottom","topDelta","top","leftDelta","left","rightDelta","right","Math","ceil","scrollLeft","ShadowTemplateMixin","ShadowTemplate","tag","mapTagToTemplate","templateText","document","createElement","innerHTML","ShadyCSS","prepareTemplate","attachShadow","mode","clone","importNode","appendChild","applyStyle","SingleSelectionMixin","SingleSelection","selectionWraps","trackSelectedItem","updatePossibleNavigations","selectIndex","canSelectNextSymbol","canSelectNext","canSelectPreviousSymbol","canSelectPrevious","externalSelectedIndexSymbol","internalSelectedIndexSymbol","parsedIndex","parseInt","hasItems","externalSelectedItemSymbol","detail","internalSelectedItemSymbol","previousSelectedItem","selectionRequiredSymbol","parsed","selectionWrapsSymbol","boundedIndex","max","min","previousIndex","indexInCurrentItems","previousSelectedIndex","newSelectedIndex","_SingleSelectionMixin3","SingleSelectionDemo","children"],"mappings":"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","file":"demos.min.js","sourcesContent":["/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t__webpack_require__(1);\n\tmodule.exports = __webpack_require__(19);\n\n\n/***/ },\n/* 1 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _set = function set(object, property, value, receiver) { var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent !== null) { set(parent, property, value, receiver); } } else if (\"value\" in desc && desc.writable) { desc.value = value; } else { var setter = desc.set; if (setter !== undefined) { setter.call(receiver, value); } } return value; };\n\t\n\tvar _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if (\"value\" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };\n\t\n\tvar _DefaultSlotContentMixin = __webpack_require__(2);\n\t\n\tvar _DefaultSlotContentMixin2 = _interopRequireDefault(_DefaultSlotContentMixin);\n\t\n\tvar _ClickSelectionMixin = __webpack_require__(6);\n\t\n\tvar _ClickSelectionMixin2 = _interopRequireDefault(_ClickSelectionMixin);\n\t\n\tvar _ContentItemsMixin = __webpack_require__(7);\n\t\n\tvar _ContentItemsMixin2 = _interopRequireDefault(_ContentItemsMixin);\n\t\n\tvar _DirectionSelectionMixin = __webpack_require__(8);\n\t\n\tvar _DirectionSelectionMixin2 = _interopRequireDefault(_DirectionSelectionMixin);\n\t\n\tvar _KeyboardDirectionMixin = __webpack_require__(9);\n\t\n\tvar _KeyboardDirectionMixin2 = _interopRequireDefault(_KeyboardDirectionMixin);\n\t\n\tvar _KeyboardMixin = __webpack_require__(10);\n\t\n\tvar _KeyboardMixin2 = _interopRequireDefault(_KeyboardMixin);\n\t\n\tvar _KeyboardPagedSelectionMixin = __webpack_require__(11);\n\t\n\tvar _KeyboardPagedSelectionMixin2 = _interopRequireDefault(_KeyboardPagedSelectionMixin);\n\t\n\tvar _KeyboardPrefixSelectionMixin = __webpack_require__(13);\n\t\n\tvar _KeyboardPrefixSelectionMixin2 = _interopRequireDefault(_KeyboardPrefixSelectionMixin);\n\t\n\tvar _SelectionAriaMixin = __webpack_require__(15);\n\t\n\tvar _SelectionAriaMixin2 = _interopRequireDefault(_SelectionAriaMixin);\n\t\n\tvar _SelectionInViewMixin = __webpack_require__(16);\n\t\n\tvar _SelectionInViewMixin2 = _interopRequireDefault(_SelectionInViewMixin);\n\t\n\tvar _ShadowTemplateMixin = __webpack_require__(17);\n\t\n\tvar _ShadowTemplateMixin2 = _interopRequireDefault(_ShadowTemplateMixin);\n\t\n\tvar _SingleSelectionMixin = __webpack_require__(18);\n\t\n\tvar _SingleSelectionMixin2 = _interopRequireDefault(_SingleSelectionMixin);\n\t\n\tvar _symbols = __webpack_require__(5);\n\t\n\tvar _symbols2 = _interopRequireDefault(_symbols);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /*\n\t                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * This is currently a demo of how multiple mixins cooperate to perform useful\n\t                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * functions.\n\t                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *\n\the component uses ShadowTemplateMixin to populate its shadow root.\n\tuser can click on a child item, and ClickSelectionMixin will set the\n\tselected item.\n\the SingleSelectionMixin will track the selected item, and map that to\n\tchanges in the selection state of the selected/deselected items.\n\the SelectionAriaMixin will reflect an item's selection state using ARIA\n\tattributes to support assistive devices like screen readers.\n\t                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *\n\t                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * This demo will eventually evolve into a complete list box component, but\n\t                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * at the moment omits many features, including support for Page Up/Page Down\n\t                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * keys, keeping the selected item in view, the ability to select an item\n\t                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * by typing its initial characters, and support for slot elements as children.\n\t                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */\n\t\n\t// We want to apply a number of mixin functions to HTMLElement.\n\tvar mixins = [_DefaultSlotContentMixin2.default, _ClickSelectionMixin2.default, _ContentItemsMixin2.default, _DirectionSelectionMixin2.default, _KeyboardDirectionMixin2.default, _KeyboardMixin2.default, _KeyboardPagedSelectionMixin2.default, _KeyboardPrefixSelectionMixin2.default, _SelectionAriaMixin2.default, _SelectionInViewMixin2.default, _ShadowTemplateMixin2.default, _SingleSelectionMixin2.default];\n\t\n\t// The mixins are functions, so an efficient way to apply them all is with\n\t// reduce. This is just function composition. We end up with a base class we\n\t// can extend below.\n\tvar base = mixins.reduce(function (cls, mixin) {\n\t  return mixin(cls);\n\t}, HTMLElement);\n\t\n\t/**\n\t * A simple single-selection list box.\n\t *\n\t * This uses the base class we just created above, and adds in the behavior\n\t * unique to this list box element. As it turns out, much of this behavior is\n\t * also interesting to other components, and will eventually get factored into\n\t * other mixins.\n\t *\n\t * @extends HTMLElement\n\t * @mixes DefaultSlotContentMixin\n\t * @mixes ClickSelectionMixin\n\t * @mixes ContentItemsMixin\n\t * @mixes DirectionSelectionMixin\n\t * @mixes KeyboardDirectionMixin\n\t * @mixes KeyboardMixin\n\t * @mixes KeyboardPagedSelectionMixin\n\t * @mixes KeyboardPrefixSelectionMixin\n\t * @mixes SelectionAriaMixin\n\t * @mixes SelectionInViewMixin\n\t * @mixes ShadowTemplateMixin\n\t * @mixes SingleSelectionMixin\n\t */\n\t\n\tvar ListBox = function (_base) {\n\t  _inherits(ListBox, _base);\n\t\n\t  function ListBox() {\n\t    _classCallCheck(this, ListBox);\n\t\n\t    return _possibleConstructorReturn(this, (ListBox.__proto__ || Object.getPrototypeOf(ListBox)).apply(this, arguments));\n\t  }\n\t\n\t  _createClass(ListBox, [{\n\t    key: 'attributeChangedCallback',\n\t\n\t\n\t    // Map attribute changes to the corresponding property.\n\t    value: function attributeChangedCallback(attributeName, oldValue, newValue) {\n\t      if (_get(ListBox.prototype.__proto__ || Object.getPrototypeOf(ListBox.prototype), 'attributeChangedCallback', this)) {\n\t        _get(ListBox.prototype.__proto__ || Object.getPrototypeOf(ListBox.prototype), 'attributeChangedCallback', this).call(this, attributeName, oldValue, newValue);\n\t      }\n\t      var mapAttributeToProperty = {\n\t        'selected-index': 'selectedIndex'\n\t      };\n\t      var propertyName = mapAttributeToProperty[attributeName] || attributeName;\n\t      this[propertyName] = newValue;\n\t    }\n\t\n\t    // We define a collection of default property values which can be set in\n\t    // the constructor or connectedCallback. Defining the actual default values\n\t    // in those calls would complicate things if a subclass someday wants to\n\t    // define its own default value.\n\t\n\t  }, {\n\t    key: _symbols2.default.itemSelected,\n\t\n\t\n\t    // Map item selection to a `selected` CSS class.\n\t    value: function value(item, selected) {\n\t      if (_get(ListBox.prototype.__proto__ || Object.getPrototypeOf(ListBox.prototype), _symbols2.default.itemSelected, this)) {\n\t        _get(ListBox.prototype.__proto__ || Object.getPrototypeOf(ListBox.prototype), _symbols2.default.itemSelected, this).call(this, item, selected);\n\t      }\n\t      item.classList.toggle('selected', selected);\n\t    }\n\t\n\t    // Tell the browser which attributes we want to handle.\n\t\n\t  }, {\n\t    key: _symbols2.default.defaults,\n\t    get: function get() {\n\t      var defaults = _get(ListBox.prototype.__proto__ || Object.getPrototypeOf(ListBox.prototype), _symbols2.default.defaults, this) || {};\n\t      // By default, we assume the list presents list items vertically.\n\t      defaults.orientation = 'vertical';\n\t      return defaults;\n\t    }\n\t  }, {\n\t    key: 'orientation',\n\t\n\t\n\t    /**\n\t     * The vertical (default) or horizontal orientation of the list.\n\t     *\n\t     * Supported values are \"horizontal\" or \"vertical\".\n\t     *\n\t     * @type {string}\n\t     */\n\t    get: function get() {\n\t      return this[_symbols2.default.orientation] || this[_symbols2.default.defaults].orientation;\n\t    },\n\t    set: function set(value) {\n\t      var changed = value !== this[_symbols2.default.orientation];\n\t      this[_symbols2.default.orientation] = value;\n\t      if ('orientation' in base) {\n\t        _set(ListBox.prototype.__proto__ || Object.getPrototypeOf(ListBox.prototype), 'orientation', value, this);\n\t      }\n\t      // Reflect attribute for styling\n\t      if (this.getAttribute('orientation') !== value) {\n\t        this.setAttribute('orientation', value);\n\t      }\n\t      if (changed && this[_symbols2.default.raiseChangeEvents]) {\n\t        var event = new CustomEvent('orientation-changed');\n\t        this.dispatchEvent(event);\n\t      }\n\t    }\n\t\n\t    // Define a template that will be stamped into the Shadow DOM by the\n\t    // ShadowTemplateMixin.\n\t\n\t  }, {\n\t    key: _symbols2.default.template,\n\t    get: function get() {\n\t      return '\\n      <style>\\n      :host {\\n        border: 1px solid gray;\\n        box-sizing: border-box;\\n        cursor: default;\\n        display: flex;\\n        -webkit-tap-highlight-color: rgba(0, 0, 0, 0);\\n      }\\n\\n      #itemsContainer {\\n        flex: 1;\\n        -webkit-overflow-scrolling: touch; /* for momentum scrolling */\\n        overflow-x: hidden;\\n        overflow-y: scroll;\\n      }\\n      :host([orientation=\"horizontal\"]) #itemsContainer {\\n        display: flex;\\n        overflow-x: scroll;\\n        overflow-y: hidden;\\n      }\\n\\n      #itemsContainer ::slotted(*) {\\n        cursor: default;\\n        padding: 0.25em;\\n        -webkit-user-select: none;\\n        -moz-user-select: none;\\n        -ms-user-select: none;\\n        user-select: none;\\n      }\\n\\n      #itemsContainer ::slotted(.selected) {\\n        background: var(--elix-selected-background, highlight);\\n        color: var(--elix-selected-color, highlighttext);\\n      }\\n      </style>\\n\\n      <div id=\"itemsContainer\" role=\"none\">\\n        <slot></slot>\\n      </div>\\n    ';\n\t    }\n\t\n\t    /**\n\t     * Fires when the orientation property changes in response to internal\n\t     * component activity.\n\t     *\n\t     * @memberof ListBox\n\t     * @event orientation-changed\n\t     */\n\t\n\t  }], [{\n\t    key: 'observedAttributes',\n\t    get: function get() {\n\t      return ['orientation', 'selected-index'];\n\t    }\n\t  }]);\n\t\n\t  return ListBox;\n\t}(base);\n\t\n\tcustomElements.define('sample-list-box', ListBox);\n\texports.default = ListBox;\n\n/***/ },\n/* 2 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if (\"value\" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };\n\t\n\texports.default = DefaultSlotContentMixin;\n\t\n\tvar _content = __webpack_require__(3);\n\t\n\tvar _Symbol2 = __webpack_require__(4);\n\t\n\tvar _Symbol3 = _interopRequireDefault(_Symbol2);\n\t\n\tvar _symbols = __webpack_require__(5);\n\t\n\tvar _symbols2 = _interopRequireDefault(_symbols);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\t// Symbols for private data members on an element.\n\tvar slotchangeFiredSymbol = (0, _Symbol3.default)('slotchangeFired');\n\t\n\t/**\n\t * Mixin which defines a component's `symbols.content` property as the flattened\n\t * set of nodes assigned to its default slot.\n\t *\n\t * This also provides notification of changes to a component's content. It\n\t * will invoke a `symbols.contentChanged` method when the component is first\n\t * instantiated, and whenever its distributed children change. This is intended\n\t * to satisfy the Gold Standard checklist item for monitoring\n\t * [Content Changes](https://github.com/webcomponents/gold-standard/wiki/Content-Changes).\n\t *\n\t * Example:\n\t *\n\t * ```\n\t * let base = DefaultSlotContentMixin(HTMLElement);\n\t * class CountingElement extends base {\n\t *\n\t *   constructor() {\n\t *     super();\n\t *     let root = this.attachShadow({ mode: 'open' });\n\t *     root.innerHTML = `<slot></slot>`;\n\t *     this[symbols.shadowCreated]();\n\t *   }\n\t *\n\t *   [symbols.contentChanged]() {\n\t *     if (super[symbols.contentChanged]) { super[symbols.contentChanged](); }\n\t *     // Count the component's children, both initially and when changed.\n\t *     this.count = this.distributedChildren.length;\n\t *   }\n\t *\n\t * }\n\t * ```\n\t *\n\t * To use this mixin, the component should define a default (unnamed) `slot`\n\t * element in its shadow subtree.\n\t *\n\t * To receive `contentChanged` notification, this mixin expects a component to\n\t * invoke a method called `symbols.shadowCreated` after the component's shadow\n\t * root has been created and populated.\n\t *\n\t * @module DefaultSlotContentMixin\n\t * @param base {Class} the base class to extend\n\t * @returns {Class} the extended class\n\t */\n\tfunction DefaultSlotContentMixin(base) {\n\t\n\t  /**\n\t   * The class prototype added by the mixin.\n\t   */\n\t  var DefaultSlotContent = function (_base) {\n\t    _inherits(DefaultSlotContent, _base);\n\t\n\t    function DefaultSlotContent() {\n\t      _classCallCheck(this, DefaultSlotContent);\n\t\n\t      return _possibleConstructorReturn(this, (DefaultSlotContent.__proto__ || Object.getPrototypeOf(DefaultSlotContent)).apply(this, arguments));\n\t    }\n\t\n\t    _createClass(DefaultSlotContent, [{\n\t      key: 'connectedCallback',\n\t      value: function connectedCallback() {\n\t        var _this2 = this;\n\t\n\t        if (_get(DefaultSlotContent.prototype.__proto__ || Object.getPrototypeOf(DefaultSlotContent.prototype), 'connectedCallback', this)) {\n\t          _get(DefaultSlotContent.prototype.__proto__ || Object.getPrototypeOf(DefaultSlotContent.prototype), 'connectedCallback', this).call(this);\n\t        }\n\t        // HACK for Blink, which doesn't correctly fire initial slotchange.\n\t        // See https://bugs.chromium.org/p/chromium/issues/detail?id=696659\n\t        setTimeout(function () {\n\t          // By this point, the slotchange event should have fired.\n\t          if (!_this2[slotchangeFiredSymbol]) {\n\t            // slotchange event didn't fire; we're in Blink. Force the invocation\n\t            // of contentChanged that would have happened on slotchange.\n\t            if (_this2[_symbols2.default.contentChanged]) {\n\t              _this2[_symbols2.default.contentChanged]();\n\t            }\n\t          }\n\t        });\n\t      }\n\t\n\t      /**\n\t       * The content of this component, defined to be the flattened set of\n\t       * nodes assigned to its default unnamed slot.\n\t       *\n\t       * @type {HTMLElement[]}\n\t       */\n\t\n\t    }, {\n\t      key: _symbols2.default.shadowCreated,\n\t      value: function value() {\n\t        var _this3 = this;\n\t\n\t        if (_get(DefaultSlotContent.prototype.__proto__ || Object.getPrototypeOf(DefaultSlotContent.prototype), _symbols2.default.shadowCreated, this)) {\n\t          _get(DefaultSlotContent.prototype.__proto__ || Object.getPrototypeOf(DefaultSlotContent.prototype), _symbols2.default.shadowCreated, this).call(this);\n\t        }\n\t        // Listen to changes on the default slot.\n\t        var slot = defaultSlot(this);\n\t        slot.addEventListener('slotchange', function (event) {\n\t          _this3[slotchangeFiredSymbol] = true;\n\t          if (_this3[_symbols2.default.contentChanged]) {\n\t            _this3[_symbols2.default.contentChanged]();\n\t          }\n\t        });\n\t      }\n\t    }, {\n\t      key: _symbols2.default.content,\n\t      get: function get() {\n\t        var slot = defaultSlot(this);\n\t        return slot ? slot.assignedNodes({ flatten: true }) : [];\n\t      }\n\t    }]);\n\t\n\t    return DefaultSlotContent;\n\t  }(base);\n\t\n\t  return DefaultSlotContent;\n\t}\n\t\n\tfunction defaultSlot(element) {\n\t  var defaultSlot = element.shadowRoot && element.shadowRoot.querySelector('slot:not([name])');\n\t  if (element.shadowRoot && !defaultSlot) {\n\t    console.warn('DefaultSlotContentMixin expects a component to define a shadow tree that includes a default (unnamed) slot.');\n\t  }\n\t  return defaultSlot;\n\t}\n\n/***/ },\n/* 3 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\texports.substantiveElements = substantiveElements;\n\t/**\n\t * Helpers for accessing a component's content.\n\t *\n\t * @module content\n\t */\n\t\n\t/**\n\t * Return a set of Elements which are likely to be useful as component content.\n\t *\n\t * Given a `NodeList` or array of objects, this will return only those array\n\t * members that are: a) instances of `Element` (`HTMLElement` or `SVGElement`),\n\t * and b) not on a blacklist of normally invisible elements (such as `style` or\n\t * `script`). Among other things, this filters out Text nodes.\n\t *\n\t * @param {NodeList|Node[]} nodes - the list of nodes to filter\n\t * @returns {Element[]} - the filtered elements\n\t */\n\tfunction substantiveElements(nodes) {\n\t\n\t  // These are tags for elements that can appear in the document body, but do\n\t  // not seem to have any user-visible manifestation.\n\t  // See https://developer.mozilla.org/en-US/docs/Web/HTML/Element\n\t  var auxiliaryElementTags = ['applet', // deprecated\n\t  'basefont', // deprecated\n\t  'embed', 'font', // deprecated\n\t  'frame', // deprecated\n\t  'frameset', // deprecated\n\t  'isindex', // deprecated\n\t  'keygen', // deprecated\n\t  'link', 'multicol', // deprecated\n\t  'nextid', // deprecated\n\t  'noscript', 'object', 'param', 'script', 'style', 'template', 'noembed' // deprecated\n\t  ];\n\t\n\t  return [].filter.call(nodes, function (node) {\n\t    return node instanceof Element && (!node.localName || auxiliaryElementTags.indexOf(node.localName) < 0);\n\t  });\n\t}\n\n/***/ },\n/* 4 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t/* The number of fake symbols we've served up */\n\tvar count = 0;\n\t\n\tfunction uniqueString(description) {\n\t  return '_' + description + count++;\n\t}\n\t\n\tvar symbolFunction = typeof window.Symbol === 'function' ? window.Symbol : uniqueString;\n\t\n\t/**\n\t * Polyfill for ES6 symbol class.\n\t *\n\t * Mixins and component classes often want to associate private data with an\n\t * element instance, but JavaScript does not have direct support for true\n\t * private properties. One approach is to use the\n\t * [Symbol](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol)\n\t * data type to set and retrieve data on an element.\n\t *\n\t * Unfortunately, the Symbol type is not available in Internet Explorer 11. In\n\t * lieu of returning a true Symbol, this polyfill returns a different string\n\t * each time it is called.\n\t *\n\t * Usage:\n\t *\n\t *     const fooSymbol = Symbol('foo');\n\t *\n\t *     class MyElement extends HTMLElement {\n\t *       get foo() {\n\t *         return this[fooSymbol];\n\t *       }\n\t *       set foo(value) {\n\t *         this[fooSymbol] = value;\n\t *       }\n\t *     }\n\t *\n\t * In IE 11, this sample will \"hide\" data behind an instance property that looks\n\t * like this._foo0. The underscore is meant to reduce (not eliminate) potential\n\t * accidental access, and the unique number at the end is mean to avoid (not\n\t * eliminate) naming conflicts.\n\t *\n\t * @function Symbol\n\t * @param {string} description - A string to identify the symbol when debugging\n\t * @returns {Symbol|string} — A Symbol (in ES6 browsers) or unique string ID (in\n\t * ES5).\n\t */\n\texports.default = symbolFunction;\n\n/***/ },\n/* 5 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _Symbol2 = __webpack_require__(4);\n\t\n\tvar _Symbol3 = _interopRequireDefault(_Symbol2);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\t/**\n\t * A collection of (potentially polyfilled) Symbol objects for standard\n\t * component properties and methods.\n\t *\n\t * These Symbol objects are used to allow mixins and a component to internally\n\t * communicate, without exposing these properties and methods in the component's\n\t * public API.\n\t *\n\t * To use these Symbol objects in your own component, include this module and\n\t * then create a property or method whose key is the desired Symbol.\n\t *\n\t *     import 'SingleSelectionMixin' from 'elix-mixins/src/SingleSelectionMixin';\n\t *     import 'symbols' from 'elix-mixins/src/symbols';\n\t *\n\t *     class MyElement extends SingleSelectionMixin(HTMLElement) {\n\t *       [symbols.itemSelected](item, selected) {\n\t *         // This will be invoked whenever an item is selected/deselected.\n\t *       }\n\t *     }\n\t *\n\t * @module symbols\n\t */\n\tvar symbols = {\n\t\n\t  /**\n\t   * Symbols for the `content` property.\n\t   *\n\t   * This property returns the component's content -- however the component\n\t   * wants to define that. This could, for example, return the component's\n\t   * distributed children.\n\t   *\n\t   * @type {HTMLElement[]}\n\t   */\n\t  content: (0, _Symbol3.default)('content'),\n\t\n\t  /**\n\t   * Symbol for the `contentChanged` method.\n\t   *\n\t   * For components that define a `content` property, this method should be\n\t   * invoked when that property changes.\n\t   *\n\t   * @function contentChanged\n\t   */\n\t  contentChanged: (0, _Symbol3.default)('contentChanged'),\n\t\n\t  /**\n\t   * Symbol for the `defaults` property.\n\t   *\n\t   * This property can be used to set or override defaults that will be applied\n\t   * to a new component instance. When implementing this property, take care to\n\t   * first acquire any defaults defined by the superclass. The standard idiom is\n\t   * as follows:\n\t   *\n\t   *     get [symbols.defaults]() {\n\t   *       const defaults = super[symbols.defaults] || {};\n\t   *       // Set or override default values here\n\t   *       defaults.customProperty = false;\n\t   *       return defaults;\n\t   *     }\n\t   *\n\t   * @var {object} defaults\n\t   */\n\t  defaults: (0, _Symbol3.default)('defaults'),\n\t\n\t  /**\n\t   * Symbol for the `getItemText` method.\n\t   *\n\t   * This method can be applied to an item to return its text.\n\t   *\n\t   * @function getText\n\t   * @param {HTMLElement} item - the item to extract text from\n\t   * @returns {string} - the text of the item\n\t   */\n\t  getItemText: (0, _Symbol3.default)('getText'),\n\t\n\t  /**\n\t   * Symbol for the `goDown` method.\n\t   *\n\t   * This method is invoked when the user wants to go/navigate down.\n\t   *\n\t   * @function goDown\n\t   */\n\t  goDown: (0, _Symbol3.default)('goDown'),\n\t\n\t  /**\n\t   * Symbol for the `goEnd` method.\n\t   *\n\t   * This method is invoked when the user wants to go/navigate to the end (e.g.,\n\t   * of a list).\n\t   *\n\t   * @function goEnd\n\t   */\n\t  goEnd: (0, _Symbol3.default)('goEnd'),\n\t\n\t  /**\n\t   * Symbol for the `goLeft` method.\n\t   *\n\t   * This method is invoked when the user wants to go/navigate left.\n\t   *\n\t   * @function goLeft\n\t   */\n\t  goLeft: (0, _Symbol3.default)('goLeft'),\n\t\n\t  /**\n\t   * Symbol for the `goRight` method.\n\t   *\n\t   * This method is invoked when the user wants to go/navigate right.\n\t   *\n\t   * @function goRight\n\t   */\n\t  goRight: (0, _Symbol3.default)('goRight'),\n\t\n\t  /**\n\t   * Symbol for the `goStart` method.\n\t   *\n\t   * This method is invoked when the user wants to go/navigate to the start\n\t   * (e.g., of a list).\n\t   *\n\t   * @function goStart\n\t   */\n\t  goStart: (0, _Symbol3.default)('goStart'),\n\t\n\t  /**\n\t   * Symbol for the `goUp` method.\n\t   *\n\t   * This method is invoked when the user wants to go/navigate up.\n\t   *\n\t   * @function goUp\n\t   */\n\t  goUp: (0, _Symbol3.default)('goUp'),\n\t\n\t  /**\n\t   * Symbol for the `itemAdded` method.\n\t   *\n\t   * This method is invoked when a new item is added to a list.\n\t   *\n\t   * @function itemAdded\n\t   * @param {HTMLElement} item - the item being selected/deselected\n\t   */\n\t  itemAdded: (0, _Symbol3.default)('itemAdded'),\n\t\n\t  /**\n\t   * Symbol for the `itemsChanged` method.\n\t   *\n\t   * This method is invoked when the underlying contents change. It is also\n\t   * invoked on component initialization – since the items have \"changed\" from\n\t   * being nothing.\n\t   *\n\t   * @function itemsChanged\n\t   */\n\t  itemsChanged: (0, _Symbol3.default)('itemsChanged'),\n\t\n\t  /**\n\t   * Symbol for the `itemSelected` method.\n\t   *\n\t   * This method is invoked when an item becomes selected or deselected.\n\t   *\n\t   * @function itemSelected\n\t   * @param {HTMLElement} item - the item being selected/deselected\n\t   * @param {boolean} selected - true if the item is selected, false if not\n\t   */\n\t  itemSelected: (0, _Symbol3.default)('itemSelected'),\n\t\n\t  /**\n\t   * Symbol for the `keydown` method.\n\t   *\n\t   * This method is invoked when an element receives a `keydown` event.\n\t   *\n\t   * @function keydown\n\t   * @param {KeyboardEvent} event - the event being processed\n\t   */\n\t  keydown: (0, _Symbol3.default)('keydown'),\n\t\n\t  /**\n\t   * Indicates the general horizontal and/or vertical orientation of the\n\t   * component. This may affect both presentation and behavior (e.g., of\n\t   * keyboard navigation).\n\t   *\n\t   * Accepted values are \"horizontal\", \"vertical\", or \"both\" (the default).\n\t   *\n\t   * @type {string}\n\t   */\n\t  orientation: (0, _Symbol3.default)('orientation'),\n\t\n\t  /**\n\t   * Symbol for the `raiseChangeEvents` property.\n\t   *\n\t   * This property is used by mixins to determine whether they should raise\n\t   * property change events. The standard HTML pattern is to only raise such\n\t   * events in response to direct user interactions. For a detailed discussion\n\t   * of this point, see the Gold Standard checklist item for\n\t   * [Propery Change Events](https://github.com/webcomponents/gold-standard/wiki/Property%20Change%20Events).\n\t   *\n\t   * The above article describes a pattern for using a flag to track whether\n\t   * work is being performed in response to internal component activity, and\n\t   * whether the component should therefore raise property change events.\n\t   * This `raiseChangeEvents` symbol is a shared flag used for that purpose by\n\t   * all Elix mixins and components. Sharing this flag ensures that internal\n\t   * activity (e.g., a UI event listener) in one mixin can signal other mixins\n\t   * handling affected properties to raise change events.\n\t   *\n\t   * All UI event listeners (and other forms of internal handlers, such as\n\t   * timeouts and async network handlers) should set `raiseChangeEvents` to\n\t   * `true` at the start of the event handler, then `false` at the end:\n\t   *\n\t   *     this.addEventListener('click', event => {\n\t   *       this[symbols.raiseChangeEvents] = true;\n\t   *       // Do work here, possibly setting properties, like:\n\t   *       this.foo = 'Hello';\n\t   *       this[symbols.raiseChangeEvents] = false;\n\t   *     });\n\t   *\n\t   * Elsewhere, property setters that raise change events should only do so it\n\t   * this property is `true`:\n\t   *\n\t   *     set foo(value) {\n\t   *       // Save foo value here, do any other work.\n\t   *       if (this[symbols.raiseChangeEvents]) {\n\t   *         const event = new CustomEvent('foo-changed');\n\t   *         this.dispatchEvent(event);\n\t   *       }\n\t   *     }\n\t   *\n\t   * In this way, programmatic attempts to set the `foo` property will not\n\t   * trigger the `foo-changed` event, but UI interactions that update that\n\t   * property will cause those events to be raised.\n\t   *\n\t   * @var {boolean} raiseChangeEvents\n\t   */\n\t  raiseChangeEvents: (0, _Symbol3.default)('raiseChangeEvents'),\n\t\n\t  /**\n\t   * Symbol for the `shadowCreated` method.\n\t   *\n\t   * This method is invoked when the component's shadow root has been attached\n\t   * and populated. Other code can handle this method to perform initialization\n\t   * that depends upon the existence of a populated shadow subtree.\n\t   *\n\t   * @function shadowCreated\n\t   */\n\t  shadowCreated: (0, _Symbol3.default)('shadowCreated'),\n\t\n\t  /**\n\t   * Symbol for the `template` property.\n\t   *\n\t   * This property returns a component's template.\n\t   *\n\t   * @type {string|HTMLTemplateElement}\n\t   */\n\t  template: (0, _Symbol3.default)('template')\n\t};\n\t\n\texports.default = symbols;\n\n/***/ },\n/* 6 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\texports.default = ClickSelectionMixin;\n\t\n\tvar _symbols = __webpack_require__(5);\n\t\n\tvar _symbols2 = _interopRequireDefault(_symbols);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\t/**\n\t * Mixin which maps a click (actually, a mousedown) to a selection.\n\t *\n\t * This simple mixin is useful in list box-like elements, where a click on a\n\t * list item implicitly selects it.\n\t *\n\t * The standard use for this mixin is in list-like elements. Native list\n\t * boxes don't appear to be consistent with regard to whether they select\n\t * on mousedown or click/mouseup. This mixin assumes the use of mousedown.\n\t * On touch devices, that event appears to trigger when the touch is *released*.\n\t *\n\t * This mixin only listens to mousedown events for the primary mouse button\n\t * (typically the left button). Right-clicks are ignored so that the browser\n\t * may display a context menu.\n\t *\n\t * Much has been written about how to ensure \"fast tap\" behavior on mobile\n\t * devices. This mixin makes a very straightforward use of a standard event, and\n\t * this appears to perform well on mobile devices when, e.g., the viewport is\n\t * configured with `width=device-width`.\n\t *\n\t * This mixin expects the component to provide an `items` property. It also\n\t * expects the component to define a `selectedItem` property; you can provide\n\t * that yourself, or use [SingleSelectionMixin](SingleSelectionMixin.md).\n\t *\n\t * If the component receives a clicks that doesn't correspond to an item (e.g.,\n\t * the user clicks on the element background visible between items), the\n\t * selection will be removed. However, if the component defines a\n\t * `selectionRequired` and this is true, a background click will *not* remove\n\t * the selection.\n\t *\n\t * @module ClickSelectionMixin\n\t * @param base {Class} the base class to extend\n\t * @returns {Class} the extended class\n\t */\n\tfunction ClickSelectionMixin(base) {\n\t\n\t  /**\n\t   * The class prototype added by the mixin.\n\t   */\n\t  var ClickSelection = function (_base) {\n\t    _inherits(ClickSelection, _base);\n\t\n\t    function ClickSelection() {\n\t      _classCallCheck(this, ClickSelection);\n\t\n\t      var _this = _possibleConstructorReturn(this, (ClickSelection.__proto__ || Object.getPrototypeOf(ClickSelection)).call(this));\n\t\n\t      _this.addEventListener('mousedown', function (event) {\n\t\n\t        // Only process events for the main (usually left) button.\n\t        if (event.button !== 0) {\n\t          return;\n\t        }\n\t\n\t        _this[_symbols2.default.raiseChangeEvents] = true;\n\t\n\t        // If the item clicked on is a button, the event seems to be raised in\n\t        // phase 2 (AT_TARGET) — but the event target will be the component, not\n\t        // the item that was clicked on.\n\t        var target = event.target === _this ? event.path[0] : // Event target isn't the item, so get it from path.\n\t        event.target;\n\t\n\t        // Find which item was clicked on and, if found, select it. For elements\n\t        // which don't require a selection, a background click will determine\n\t        // the item was null, in which we case we'll remove the selection.\n\t        var item = itemForTarget(_this, target);\n\t        if (item || !_this.selectionRequired) {\n\t\n\t          if (!('selectedItem' in _this)) {\n\t            console.warn('ClickSelectionMixin expects a component to define a \"selectedItem\" property.');\n\t          } else {\n\t            _this.selectedItem = item;\n\t          }\n\t\n\t          // We don't call preventDefault here. The default behavior for\n\t          // mousedown includes setting keyboard focus if the element doesn't\n\t          // already have the focus, and we want to preserve that behavior.\n\t          event.stopPropagation();\n\t        }\n\t\n\t        _this[_symbols2.default.raiseChangeEvents] = false;\n\t      });\n\t      return _this;\n\t    }\n\t\n\t    return ClickSelection;\n\t  }(base);\n\t\n\t  return ClickSelection;\n\t}\n\t\n\t/*\n\t * Return the list item that is, or contains, the indicated target element.\n\t * Return null if not found.\n\t */\n\tfunction itemForTarget(listElement, target) {\n\t  var items = listElement.items;\n\t  var itemCount = items ? items.length : 0;\n\t  for (var i = 0; i < itemCount; i++) {\n\t    var item = items[i];\n\t    if (item === target || item.contains(target)) {\n\t      return item;\n\t    }\n\t  }\n\t  return null;\n\t}\n\n/***/ },\n/* 7 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if (\"value\" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };\n\t\n\texports.default = ContentItemsMixin;\n\t\n\tvar _content = __webpack_require__(3);\n\t\n\tvar content = _interopRequireWildcard(_content);\n\t\n\tvar _Symbol2 = __webpack_require__(4);\n\t\n\tvar _Symbol3 = _interopRequireDefault(_Symbol2);\n\t\n\tvar _symbols = __webpack_require__(5);\n\t\n\tvar _symbols2 = _interopRequireDefault(_symbols);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\t// Symbols for private data members on an element.\n\tvar itemsSymbol = (0, _Symbol3.default)('items');\n\tvar itemInitializedSymbol = (0, _Symbol3.default)('itemInitialized');\n\t\n\t/**\n\t * Mixin which maps content semantics (nodes) to list item semantics.\n\t *\n\t * Items differ from nodes contents in several ways:\n\t *\n\t * * They are often referenced via index.\n\t * * They may have a selection state.\n\t * * It's common to do work to initialize the appearance or state of a new\n\t *   item.\n\t * * Text nodes are filtered out.\n\t * * Auxiliary invisible child elements are filtered out and not counted as\n\t *   items. Auxiliary elements include link, script, style, and template\n\t *   elements. This filtering ensures that those auxiliary elements can be\n\t *   used in markup inside of a list without being treated as list items.\n\t *\n\t * This mixin expects a component to provide a `content` property returning a\n\t * raw set of elements. You can provide that yourself, or use\n\t * [DefaultSlotContentMixin](DefaultSlotContentMixin.md).\n\t *\n\t * The most commonly referenced property defined by this mixin is the `items`\n\t * property. To avoid having to do work each time that property is requested,\n\t * this mixin supports an optimized mode. If you invoke the `contentChanged`\n\t * method when the set of items changes, the mixin concludes that you'll take\n\t * care of notifying it of future changes, and turns on the optimization. With\n\t * that on, the mixin saves a reference to the computed set of items, and will\n\t * return that immediately on subsequent calls to the `items` property. If you\n\t * use this mixin in conjunction with `DefaultSlotContentMixin`, the\n\t * `contentChanged` method will be invoked for you when the element's children\n\t * change, turning on the optimization automatically.\n\t *\n\t * @module ContentItemsMixin\n\t * @param base {Class} the base class to extend\n\t * @returns {Class} the extended class\n\t */\n\tfunction ContentItemsMixin(base) {\n\t\n\t  /**\n\t   * The class prototype added by the mixin.\n\t   */\n\t  var ContentItems = function (_base) {\n\t    _inherits(ContentItems, _base);\n\t\n\t    function ContentItems() {\n\t      _classCallCheck(this, ContentItems);\n\t\n\t      return _possibleConstructorReturn(this, (ContentItems.__proto__ || Object.getPrototypeOf(ContentItems)).apply(this, arguments));\n\t    }\n\t\n\t    _createClass(ContentItems, [{\n\t      key: _symbols2.default.contentChanged,\n\t      value: function value() {\n\t        if (_get(ContentItems.prototype.__proto__ || Object.getPrototypeOf(ContentItems.prototype), _symbols2.default.contentChanged, this)) {\n\t          _get(ContentItems.prototype.__proto__ || Object.getPrototypeOf(ContentItems.prototype), _symbols2.default.contentChanged, this).call(this);\n\t        }\n\t\n\t        // Since we got the contentChanged call, we'll assume we'll be notified if\n\t        // the set of items changes later. We turn on memoization of the items\n\t        // property by setting our internal property to null (instead of\n\t        // undefined).\n\t        this[itemsSymbol] = null;\n\t\n\t        this[_symbols2.default.itemsChanged]();\n\t      }\n\t\n\t      /**\n\t       * The current set of items in the list. See the top-level documentation for\n\t       * mixin for a description of how items differ from plain content.\n\t       *\n\t       * @type {HTMLElement[]}\n\t       */\n\t\n\t    }, {\n\t      key: _symbols2.default.itemsChanged,\n\t\n\t\n\t      /**\n\t       * This method is invoked when the underlying contents change. It is also\n\t       * invoked on component initialization – since the items have \"changed\" from\n\t       * being nothing.\n\t       */\n\t      value: function value() {\n\t        var _this2 = this;\n\t\n\t        if (_get(ContentItems.prototype.__proto__ || Object.getPrototypeOf(ContentItems.prototype), _symbols2.default.itemsChanged, this)) {\n\t          _get(ContentItems.prototype.__proto__ || Object.getPrototypeOf(ContentItems.prototype), _symbols2.default.itemsChanged, this).call(this);\n\t        }\n\t\n\t        // Perform per-item initialization if `itemAdded` is defined.\n\t        if (this[_symbols2.default.itemAdded]) {\n\t          Array.prototype.forEach.call(this.items, function (item) {\n\t            if (!item[itemInitializedSymbol]) {\n\t              _this2[_symbols2.default.itemAdded](item);\n\t              item[itemInitializedSymbol] = true;\n\t            }\n\t          });\n\t        }\n\t\n\t        if (this[_symbols2.default.raiseChangeEvents]) {\n\t          this.dispatchEvent(new CustomEvent('items-changed'));\n\t        }\n\t      }\n\t\n\t      /**\n\t       * Fires when the items in the list change.\n\t       *\n\t       * @memberof ContentItems\n\t       * @event items-changed\n\t       */\n\t\n\t    }, {\n\t      key: 'items',\n\t      get: function get() {\n\t        var items = void 0;\n\t        if (this[itemsSymbol] == null) {\n\t          items = content.substantiveElements(this[_symbols2.default.content]);\n\t          // Note: test for *equality* with null, since we use `undefined` to\n\t          // indicate that we're not yet caching items.\n\t          if (this[itemsSymbol] === null) {\n\t            // Memoize the set of items.\n\t            this[itemsSymbol] = items;\n\t          }\n\t        } else {\n\t          // Return the memoized items.\n\t          items = this[itemsSymbol];\n\t        }\n\t        return items;\n\t      }\n\t    }]);\n\t\n\t    return ContentItems;\n\t  }(base);\n\t\n\t  return ContentItems;\n\t}\n\n/***/ },\n/* 8 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if (\"value\" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };\n\t\n\texports.default = DirectionSelectionMixin;\n\t\n\tvar _symbols = __webpack_require__(5);\n\t\n\tvar _symbols2 = _interopRequireDefault(_symbols);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\t/**\n\t * Mixin which maps direction semantics (goLeft, goRight, etc.) to selection\n\t * semantics (selectPrevious, selectNext, etc.).\n\t *\n\t * This mixin can be used in conjunction with\n\t * [KeyboardDirectionMixin](KeyboardDirectionMixin.md) (which maps keyboard\n\t * events to directions) and a mixin that handles selection like\n\t * [SingleSelectionMixin](SingleSelectionMixin.md).\n\t *\n\t * @module DirectionSelectionMixin\n\t * @param base {Class} the base class to extend\n\t * @returns {Class} the extended class\n\t */\n\tfunction DirectionSelectionMixin(base) {\n\t\n\t  /**\n\t   * The class prototype added by the mixin.\n\t   */\n\t  var DirectionSelection = function (_base) {\n\t    _inherits(DirectionSelection, _base);\n\t\n\t    function DirectionSelection() {\n\t      _classCallCheck(this, DirectionSelection);\n\t\n\t      return _possibleConstructorReturn(this, (DirectionSelection.__proto__ || Object.getPrototypeOf(DirectionSelection)).apply(this, arguments));\n\t    }\n\t\n\t    _createClass(DirectionSelection, [{\n\t      key: _symbols2.default.goDown,\n\t      value: function value() {\n\t        if (_get(DirectionSelection.prototype.__proto__ || Object.getPrototypeOf(DirectionSelection.prototype), _symbols2.default.goDown, this)) {\n\t          _get(DirectionSelection.prototype.__proto__ || Object.getPrototypeOf(DirectionSelection.prototype), _symbols2.default.goDown, this).call(this);\n\t        }\n\t        if (!this.selectNext) {\n\t          console.warn('DirectionSelectionMixin expects a component to define a \"selectNext\" method.');\n\t        } else {\n\t          return this.selectNext();\n\t        }\n\t      }\n\t    }, {\n\t      key: _symbols2.default.goEnd,\n\t      value: function value() {\n\t        if (_get(DirectionSelection.prototype.__proto__ || Object.getPrototypeOf(DirectionSelection.prototype), _symbols2.default.goEnd, this)) {\n\t          _get(DirectionSelection.prototype.__proto__ || Object.getPrototypeOf(DirectionSelection.prototype), _symbols2.default.goEnd, this).call(this);\n\t        }\n\t        if (!this.selectLast) {\n\t          console.warn('DirectionSelectionMixin expects a component to define a \"selectLast\" method.');\n\t        } else {\n\t          return this.selectLast();\n\t        }\n\t      }\n\t    }, {\n\t      key: _symbols2.default.goLeft,\n\t      value: function value() {\n\t        if (_get(DirectionSelection.prototype.__proto__ || Object.getPrototypeOf(DirectionSelection.prototype), _symbols2.default.goLeft, this)) {\n\t          _get(DirectionSelection.prototype.__proto__ || Object.getPrototypeOf(DirectionSelection.prototype), _symbols2.default.goLeft, this).call(this);\n\t        }\n\t        if (!this.selectPrevious) {\n\t          console.warn('DirectionSelectionMixin expects a component to define a \"selectPrevious\" method.');\n\t        } else {\n\t          return this.selectPrevious();\n\t        }\n\t      }\n\t    }, {\n\t      key: _symbols2.default.goRight,\n\t      value: function value() {\n\t        if (_get(DirectionSelection.prototype.__proto__ || Object.getPrototypeOf(DirectionSelection.prototype), _symbols2.default.goRight, this)) {\n\t          _get(DirectionSelection.prototype.__proto__ || Object.getPrototypeOf(DirectionSelection.prototype), _symbols2.default.goRight, this).call(this);\n\t        }\n\t        if (!this.selectNext) {\n\t          console.warn('DirectionSelectionMixin expects a component to define a \"selectNext\" method.');\n\t        } else {\n\t          return this.selectNext();\n\t        }\n\t      }\n\t    }, {\n\t      key: _symbols2.default.goStart,\n\t      value: function value() {\n\t        if (_get(DirectionSelection.prototype.__proto__ || Object.getPrototypeOf(DirectionSelection.prototype), _symbols2.default.goStart, this)) {\n\t          _get(DirectionSelection.prototype.__proto__ || Object.getPrototypeOf(DirectionSelection.prototype), _symbols2.default.goStart, this).call(this);\n\t        }\n\t        if (!this.selectFirst) {\n\t          console.warn('DirectionSelectionMixin expects a component to define a \"selectFirst\" method.');\n\t        } else {\n\t          return this.selectFirst();\n\t        }\n\t      }\n\t    }, {\n\t      key: _symbols2.default.goUp,\n\t      value: function value() {\n\t        if (_get(DirectionSelection.prototype.__proto__ || Object.getPrototypeOf(DirectionSelection.prototype), _symbols2.default.goUp, this)) {\n\t          _get(DirectionSelection.prototype.__proto__ || Object.getPrototypeOf(DirectionSelection.prototype), _symbols2.default.goUp, this).call(this);\n\t        }\n\t        if (!this.selectPrevious) {\n\t          console.warn('DirectionSelectionMixin expects a component to define a \"selectPrevious\" method.');\n\t        } else {\n\t          return this.selectPrevious();\n\t        }\n\t      }\n\t    }]);\n\t\n\t    return DirectionSelection;\n\t  }(base);\n\t\n\t  return DirectionSelection;\n\t}\n\n/***/ },\n/* 9 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if (\"value\" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };\n\t\n\texports.default = KeyboardDirectionMixin;\n\t\n\tvar _symbols = __webpack_require__(5);\n\t\n\tvar _symbols2 = _interopRequireDefault(_symbols);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\t/**\n\t * Mixin which maps direction keys (Left, Right, etc.) to direction semantics\n\t * (go left, go right, etc.).\n\t *\n\t * This mixin expects the component to invoke a `keydown` method when a key is\n\t * pressed. You can use [KeyboardMixin](KeyboardMixin.md) for that\n\t * purpose, or wire up your own keyboard handling and call `keydown` yourself.\n\t *\n\t * This mixin calls methods such as `goLeft` and `goRight`. You can define\n\t * what that means by implementing those methods yourself. If you want to use\n\t * direction keys to navigate a selection, use this mixin with\n\t * [DirectionSelectionMixin](DirectionSelectionMixin.md).\n\t *\n\t * If the component defines a property called `symbols.orientation`, the value\n\t * of that property will constrain navigation to the horizontal or vertical axis.\n\t *\n\t * @module KeyboardDirectionMixin\n\t * @param base {Class} the base class to extend\n\t * @returns {Class} the extended class\n\t */\n\tfunction KeyboardDirectionMixin(base) {\n\t\n\t  /**\n\t   * The class prototype added by the mixin.\n\t   */\n\t  var KeyboardDirection = function (_base) {\n\t    _inherits(KeyboardDirection, _base);\n\t\n\t    function KeyboardDirection() {\n\t      _classCallCheck(this, KeyboardDirection);\n\t\n\t      return _possibleConstructorReturn(this, (KeyboardDirection.__proto__ || Object.getPrototypeOf(KeyboardDirection)).apply(this, arguments));\n\t    }\n\t\n\t    _createClass(KeyboardDirection, [{\n\t      key: _symbols2.default.goDown,\n\t\n\t\n\t      /**\n\t       * Invoked when the user wants to go/navigate down.\n\t       * The default implementation of this method does nothing.\n\t       */\n\t      value: function value() {\n\t        if (_get(KeyboardDirection.prototype.__proto__ || Object.getPrototypeOf(KeyboardDirection.prototype), _symbols2.default.goDown, this)) {\n\t          return _get(KeyboardDirection.prototype.__proto__ || Object.getPrototypeOf(KeyboardDirection.prototype), _symbols2.default.goDown, this).call(this);\n\t        }\n\t      }\n\t\n\t      /**\n\t       * Invoked when the user wants to go/navigate to the end (e.g., of a list).\n\t       * The default implementation of this method does nothing.\n\t       */\n\t\n\t    }, {\n\t      key: _symbols2.default.goEnd,\n\t      value: function value() {\n\t        if (_get(KeyboardDirection.prototype.__proto__ || Object.getPrototypeOf(KeyboardDirection.prototype), _symbols2.default.goEnd, this)) {\n\t          return _get(KeyboardDirection.prototype.__proto__ || Object.getPrototypeOf(KeyboardDirection.prototype), _symbols2.default.goEnd, this).call(this);\n\t        }\n\t      }\n\t\n\t      /**\n\t       * Invoked when the user wants to go/navigate left.\n\t       * The default implementation of this method does nothing.\n\t       */\n\t\n\t    }, {\n\t      key: _symbols2.default.goLeft,\n\t      value: function value() {\n\t        if (_get(KeyboardDirection.prototype.__proto__ || Object.getPrototypeOf(KeyboardDirection.prototype), _symbols2.default.goLeft, this)) {\n\t          return _get(KeyboardDirection.prototype.__proto__ || Object.getPrototypeOf(KeyboardDirection.prototype), _symbols2.default.goLeft, this).call(this);\n\t        }\n\t      }\n\t\n\t      /**\n\t       * Invoked when the user wants to go/navigate right.\n\t       * The default implementation of this method does nothing.\n\t       */\n\t\n\t    }, {\n\t      key: _symbols2.default.goRight,\n\t      value: function value() {\n\t        if (_get(KeyboardDirection.prototype.__proto__ || Object.getPrototypeOf(KeyboardDirection.prototype), _symbols2.default.goRight, this)) {\n\t          return _get(KeyboardDirection.prototype.__proto__ || Object.getPrototypeOf(KeyboardDirection.prototype), _symbols2.default.goRight, this).call(this);\n\t        }\n\t      }\n\t\n\t      /**\n\t       * Invoked when the user wants to go/navigate to the start (e.g., of a\n\t       * list). The default implementation of this method does nothing.\n\t       */\n\t\n\t    }, {\n\t      key: _symbols2.default.goStart,\n\t      value: function value() {\n\t        if (_get(KeyboardDirection.prototype.__proto__ || Object.getPrototypeOf(KeyboardDirection.prototype), _symbols2.default.goStart, this)) {\n\t          return _get(KeyboardDirection.prototype.__proto__ || Object.getPrototypeOf(KeyboardDirection.prototype), _symbols2.default.goStart, this).call(this);\n\t        }\n\t      }\n\t\n\t      /**\n\t       * Invoked when the user wants to go/navigate up.\n\t       * The default implementation of this method does nothing.\n\t       */\n\t\n\t    }, {\n\t      key: _symbols2.default.goUp,\n\t      value: function value() {\n\t        if (_get(KeyboardDirection.prototype.__proto__ || Object.getPrototypeOf(KeyboardDirection.prototype), _symbols2.default.goUp, this)) {\n\t          return _get(KeyboardDirection.prototype.__proto__ || Object.getPrototypeOf(KeyboardDirection.prototype), _symbols2.default.goUp, this).call(this);\n\t        }\n\t      }\n\t    }, {\n\t      key: _symbols2.default.keydown,\n\t      value: function value(event) {\n\t        var handled = false;\n\t\n\t        var orientation = this[_symbols2.default.orientation] || 'both';\n\t        var horizontal = orientation === 'horizontal' || orientation === 'both';\n\t        var vertical = orientation === 'vertical' || orientation === 'both';\n\t\n\t        // Ignore Left/Right keys when metaKey or altKey modifier is also pressed,\n\t        // as the user may be trying to navigate back or forward in the browser.\n\t        switch (event.keyCode) {\n\t          case 35:\n\t            // End\n\t            handled = this[_symbols2.default.goEnd]();\n\t            break;\n\t          case 36:\n\t            // Home\n\t            handled = this[_symbols2.default.goStart]();\n\t            break;\n\t          case 37:\n\t            // Left\n\t            if (horizontal && !event.metaKey && !event.altKey) {\n\t              handled = this[_symbols2.default.goLeft]();\n\t            }\n\t            break;\n\t          case 38:\n\t            // Up\n\t            if (vertical) {\n\t              handled = event.altKey ? this[_symbols2.default.goStart]() : this[_symbols2.default.goUp]();\n\t            }\n\t            break;\n\t          case 39:\n\t            // Right\n\t            if (horizontal && !event.metaKey && !event.altKey) {\n\t              handled = this[_symbols2.default.goRight]();\n\t            }\n\t            break;\n\t          case 40:\n\t            // Down\n\t            if (vertical) {\n\t              handled = event.altKey ? this[_symbols2.default.goEnd]() : this[_symbols2.default.goDown]();\n\t            }\n\t            break;\n\t        }\n\t        // Prefer mixin result if it's defined, otherwise use base result.\n\t        return handled || _get(KeyboardDirection.prototype.__proto__ || Object.getPrototypeOf(KeyboardDirection.prototype), _symbols2.default.keydown, this) && _get(KeyboardDirection.prototype.__proto__ || Object.getPrototypeOf(KeyboardDirection.prototype), _symbols2.default.keydown, this).call(this, event) || false;\n\t      }\n\t    }]);\n\t\n\t    return KeyboardDirection;\n\t  }(base);\n\t\n\t  return KeyboardDirection;\n\t}\n\n/***/ },\n/* 10 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if (\"value\" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };\n\t\n\texports.default = KeyboardMixin;\n\t\n\tvar _symbols = __webpack_require__(5);\n\t\n\tvar _symbols2 = _interopRequireDefault(_symbols);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\t/**\n\t * Mixin which manages the keydown handling for a component.\n\t *\n\t * This mixin handles several keyboard-related features.\n\t *\n\t * First, it wires up a single keydown event handler that can be shared by\n\t * multiple mixins on a component. The event handler will invoke a `keydown`\n\t * method with the event object, and any mixin along the prototype chain that\n\t * wants to handle that method can do so.\n\t *\n\t * If a mixin wants to indicate that keyboard event has been handled, and that\n\t * other mixins should *not* handle it, the mixin's `keydown` handler should\n\t * return a value of true. The convention that seems to work well is that a\n\t * mixin should see if it wants to handle the event and, if not, then ask the\n\t * superclass to see if it wants to handle the event. This has the effect of\n\t * giving the mixin that was applied last the first chance at handling a\n\t * keyboard event.\n\t *\n\t * Example:\n\t *\n\t *     [symbols.keydown](event) {\n\t *       let handled;\n\t *       switch (event.keyCode) {\n\t *         // Handle the keys you want, setting handled = true if appropriate.\n\t *       }\n\t *       // Prefer mixin result if it's defined, otherwise use base result.\n\t *       return handled || (super[symbols.keydown] && super[symbols.keydown](event));\n\t *     }\n\t *\n\t * Until iOS Safari supports the `KeyboardEvent.key` property\n\t * (see http://caniuse.com/#search=keyboardevent.key), mixins should generally\n\t * test keys using the legacy `keyCode` property, not `key`.\n\t *\n\t * A second feature provided by this mixin is that it implicitly makes the\n\t * component a tab stop if it isn't already, by setting `tabIndex` to 0. This\n\t * has the effect of adding the component to the tab order in document order.\n\t *\n\t * @module KeyboardMixin\n\t * @param base {Class} the base class to extend\n\t * @returns {Class} the extended class\n\t */\n\tfunction KeyboardMixin(base) {\n\t\n\t  /**\n\t   * The class prototype added by the mixin.\n\t   */\n\t  var Keyboard = function (_base) {\n\t    _inherits(Keyboard, _base);\n\t\n\t    function Keyboard() {\n\t      _classCallCheck(this, Keyboard);\n\t\n\t      var _this = _possibleConstructorReturn(this, (Keyboard.__proto__ || Object.getPrototypeOf(Keyboard)).call(this));\n\t\n\t      _this.addEventListener('keydown', function (event) {\n\t        _this[_symbols2.default.raiseChangeEvents] = true;\n\t        var handled = _this[_symbols2.default.keydown](event);\n\t        if (handled) {\n\t          event.preventDefault();\n\t          event.stopPropagation();\n\t        }\n\t        _this[_symbols2.default.raiseChangeEvents] = false;\n\t      });\n\t      return _this;\n\t    }\n\t\n\t    _createClass(Keyboard, [{\n\t      key: 'connectedCallback',\n\t      value: function connectedCallback() {\n\t        if (_get(Keyboard.prototype.__proto__ || Object.getPrototypeOf(Keyboard.prototype), 'connectedCallback', this)) {\n\t          _get(Keyboard.prototype.__proto__ || Object.getPrototypeOf(Keyboard.prototype), 'connectedCallback', this).call(this);\n\t        }\n\t        if (this.getAttribute('tabindex') == null && this[_symbols2.default.defaults].tabindex !== null) {\n\t          this.setAttribute('tabindex', this[_symbols2.default.defaults].tabindex);\n\t        }\n\t      }\n\t    }, {\n\t      key: _symbols2.default.keydown,\n\t\n\t\n\t      /**\n\t       * Handle the indicated keyboard event.\n\t       *\n\t       * The default implementation of this method does nothing. This will\n\t       * typically be handled by other mixins.\n\t       *\n\t       * @param {KeyboardEvent} event - the keyboard event\n\t       * @return {boolean} true if the event was handled\n\t       */\n\t      value: function value(event) {\n\t        if (_get(Keyboard.prototype.__proto__ || Object.getPrototypeOf(Keyboard.prototype), _symbols2.default.keydown, this)) {\n\t          return _get(Keyboard.prototype.__proto__ || Object.getPrototypeOf(Keyboard.prototype), _symbols2.default.keydown, this).call(this, event);\n\t        }\n\t      }\n\t    }, {\n\t      key: _symbols2.default.defaults,\n\t      get: function get() {\n\t        var defaults = _get(Keyboard.prototype.__proto__ || Object.getPrototypeOf(Keyboard.prototype), _symbols2.default.defaults, this) || {};\n\t        // The default tab index is 0 (document order).\n\t        defaults.tabindex = 0;\n\t        return defaults;\n\t      }\n\t    }]);\n\t\n\t    return Keyboard;\n\t  }(base);\n\t\n\t  return Keyboard;\n\t}\n\n/***/ },\n/* 11 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if (\"value\" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };\n\t\n\texports.default = KeyboardPagedSelectionMixin;\n\t\n\tvar _defaultScrollTarget = __webpack_require__(12);\n\t\n\tvar _defaultScrollTarget2 = _interopRequireDefault(_defaultScrollTarget);\n\t\n\tvar _symbols = __webpack_require__(5);\n\t\n\tvar _symbols2 = _interopRequireDefault(_symbols);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\t/**\n\t * Mixin which maps page keys (Page Up, Page Down) into operations that move\n\t * the selection by one page.\n\t *\n\t * The keyboard interaction model generally follows that of Microsoft Windows'\n\t * list boxes instead of those in OS X:\n\t *\n\t * * The Page Up/Down and Home/End keys actually change the selection, rather\n\t *   than just scrolling. The former behavior seems more generally useful for\n\t *   keyboard users.\n\t *\n\t * * Pressing Page Up/Down will change the selection to the topmost/bottommost\n\t *   visible item if the selection is not already there. Thereafter, the key\n\t *   will move the selection up/down by a page, and (per the above point) make\n\t *   the selected item visible.\n\t *\n\t * To ensure the selected item is in view following use of Page Up/Down, use\n\t * the related [SelectionInViewMixin](SelectionInViewMixin.md).\n\t *\n\t * This mixin expects the component to provide:\n\t *\n\t * * A `[symbols.keydown]` method invoked when a key is pressed. You can use\n\t *   [KeyboardMixin](KeyboardMixin.md) for that purpose, or wire up your own\n\t *   keyboard handling and call `[symbols.keydown]` yourself.\n\t * * A `selectedIndex` property that indicates the index of the selected item.\n\t *\n\t * @module KeyboardPagedSelectionMixin\n\t * @param base {Class} the base class to extend\n\t * @returns {Class} the extended class\n\t */\n\tfunction KeyboardPagedSelectionMixin(base) {\n\t\n\t  /**\n\t   * The class prototype added by the mixin.\n\t   */\n\t  var KeyboardPagedSelection = function (_base) {\n\t    _inherits(KeyboardPagedSelection, _base);\n\t\n\t    function KeyboardPagedSelection() {\n\t      _classCallCheck(this, KeyboardPagedSelection);\n\t\n\t      return _possibleConstructorReturn(this, (KeyboardPagedSelection.__proto__ || Object.getPrototypeOf(KeyboardPagedSelection)).apply(this, arguments));\n\t    }\n\t\n\t    _createClass(KeyboardPagedSelection, [{\n\t      key: _symbols2.default.keydown,\n\t      value: function value(event) {\n\t        var handled = false;\n\t        var orientation = this[_symbols2.default.orientation];\n\t        if (orientation !== 'horizontal') {\n\t          switch (event.keyCode) {\n\t            case 33:\n\t              // Page Up\n\t              handled = this.pageUp();\n\t              break;\n\t            case 34:\n\t              // Page Down\n\t              handled = this.pageDown();\n\t              break;\n\t          }\n\t        }\n\t        // Prefer mixin result if it's defined, otherwise use base result.\n\t        return handled || _get(KeyboardPagedSelection.prototype.__proto__ || Object.getPrototypeOf(KeyboardPagedSelection.prototype), _symbols2.default.keydown, this) && _get(KeyboardPagedSelection.prototype.__proto__ || Object.getPrototypeOf(KeyboardPagedSelection.prototype), _symbols2.default.keydown, this).call(this, event);\n\t      }\n\t\n\t      /**\n\t       * Scroll down one page.\n\t       */\n\t\n\t    }, {\n\t      key: 'pageDown',\n\t      value: function pageDown() {\n\t        if (_get(KeyboardPagedSelection.prototype.__proto__ || Object.getPrototypeOf(KeyboardPagedSelection.prototype), 'pageDown', this)) {\n\t          _get(KeyboardPagedSelection.prototype.__proto__ || Object.getPrototypeOf(KeyboardPagedSelection.prototype), 'pageDown', this).call(this);\n\t        }\n\t        return scrollOnePage(this, true);\n\t      }\n\t\n\t      /**\n\t       * Scroll up one page.\n\t       */\n\t\n\t    }, {\n\t      key: 'pageUp',\n\t      value: function pageUp() {\n\t        if (_get(KeyboardPagedSelection.prototype.__proto__ || Object.getPrototypeOf(KeyboardPagedSelection.prototype), 'pageUp', this)) {\n\t          _get(KeyboardPagedSelection.prototype.__proto__ || Object.getPrototypeOf(KeyboardPagedSelection.prototype), 'pageUp', this).call(this);\n\t        }\n\t        return scrollOnePage(this, false);\n\t      }\n\t\n\t      /* Provide a default scrollTarget implementation if none exists. */\n\t\n\t    }, {\n\t      key: _symbols2.default.scrollTarget,\n\t      get: function get() {\n\t        return _get(KeyboardPagedSelection.prototype.__proto__ || Object.getPrototypeOf(KeyboardPagedSelection.prototype), _symbols2.default.scrollTarget, this) || (0, _defaultScrollTarget2.default)(this);\n\t      }\n\t    }]);\n\t\n\t    return KeyboardPagedSelection;\n\t  }(base);\n\t\n\t  return KeyboardPagedSelection;\n\t}\n\t\n\t// Return the item whose content spans the given y position (relative to the\n\t// top of the list's scrolling client area), or null if not found.\n\t//\n\t// If downward is true, move down the list of items to find the first item\n\t// found at the given y position; if downward is false, move up the list of\n\t// items to find the last item at that position.\n\tfunction getIndexOfItemAtY(element, scrollTarget, y, downward) {\n\t\n\t  var items = element.items;\n\t  var start = downward ? 0 : items.length - 1;\n\t  var end = downward ? items.length : 0;\n\t  var step = downward ? 1 : -1;\n\t\n\t  var topOfClientArea = scrollTarget.offsetTop + scrollTarget.clientTop;\n\t\n\t  // Find the item spanning the indicated y coordinate.\n\t  var item = void 0;\n\t  var itemIndex = start;\n\t  var itemTop = void 0;\n\t  var found = false;\n\t  while (itemIndex !== end) {\n\t    item = items[itemIndex];\n\t    itemTop = item.offsetTop - topOfClientArea;\n\t    var itemBottom = itemTop + item.offsetHeight;\n\t    if (itemTop <= y && itemBottom >= y) {\n\t      // Item spans the indicated y coordinate.\n\t      found = true;\n\t      break;\n\t    }\n\t    itemIndex += step;\n\t  }\n\t\n\t  if (!found) {\n\t    return null;\n\t  }\n\t\n\t  // We may have found an item whose padding spans the given y coordinate,\n\t  // but whose content is actually above/below that point.\n\t  // TODO: If the item has a border, then padding should be included in\n\t  // considering a hit.\n\t  var itemStyle = getComputedStyle(item);\n\t  var itemPaddingTop = parseFloat(itemStyle.paddingTop);\n\t  var itemPaddingBottom = parseFloat(itemStyle.paddingBottom);\n\t  var contentTop = itemTop + item.clientTop + itemPaddingTop;\n\t  var contentBottom = contentTop + item.clientHeight - itemPaddingTop - itemPaddingBottom;\n\t  if (downward && contentTop <= y || !downward && contentBottom >= y) {\n\t    // The indicated coordinate hits the actual item content.\n\t    return itemIndex;\n\t  } else {\n\t    // The indicated coordinate falls within the item's padding. Back up to\n\t    // the item below/above the item we found and return that.\n\t    return itemIndex - step;\n\t  }\n\t}\n\t\n\t// Move by one page downward (if downward is true), or upward (if false).\n\t// Return true if we ended up changing the selection, false if not.\n\tfunction scrollOnePage(element, downward) {\n\t\n\t  // Determine the item visible just at the edge of direction we're heading.\n\t  // We'll select that item if it's not already selected.\n\t  var scrollTarget = element[_symbols2.default.scrollTarget];\n\t  var edge = scrollTarget.scrollTop + (downward ? scrollTarget.clientHeight : 0);\n\t  var indexOfItemAtEdge = getIndexOfItemAtY(element, scrollTarget, edge, downward);\n\t\n\t  var selectedIndex = element.selectedIndex;\n\t  var newIndex = void 0;\n\t  if (indexOfItemAtEdge && selectedIndex === indexOfItemAtEdge) {\n\t    // The item at the edge was already selected, so scroll in the indicated\n\t    // direction by one page. Leave the new item at that edge selected.\n\t    var delta = (downward ? 1 : -1) * scrollTarget.clientHeight;\n\t    newIndex = getIndexOfItemAtY(element, scrollTarget, edge + delta, downward);\n\t  } else {\n\t    // The item at the edge wasn't selected yet. Instead of scrolling, we'll\n\t    // just select that item. That is, the first attempt to page up/down\n\t    // usually just moves the selection to the edge in that direction.\n\t    newIndex = indexOfItemAtEdge;\n\t  }\n\t\n\t  if (!newIndex) {\n\t    // We can't find an item in the direction we want to travel. Select the\n\t    // last item (if moving downward) or first item (if moving upward).\n\t    newIndex = downward ? element.items.length - 1 : 0;\n\t  }\n\t\n\t  if (newIndex !== selectedIndex) {\n\t    element.selectedIndex = newIndex;\n\t    return true; // We handled the page up/down ourselves.\n\t  } else {\n\t    return false; // We didn't do anything.\n\t  }\n\t}\n\n/***/ },\n/* 12 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\texports.default = defaultScrollTarget;\n\t/**\n\t * Return a guess as to what portion of the given element can be scrolled.\n\t * This can be used to provide a default implementation of\n\t * [symbols.scrollTarget].\n\t *\n\t * If the element has a shadow root containing a default (unnamed) slot, this\n\t * returns the first ancestor of that slot that has either `overflow-x` or\n\t * `overflow-y` styled as `auto` or `scroll`. If the element has no default\n\t * slot, or no scrolling ancestor is found, the element itself is returned.\n\t *\n\t * @type {HTMLElement}\n\t */\n\tfunction defaultScrollTarget(element) {\n\t  var root = element.shadowRoot;\n\t  var slot = root && root.querySelector('slot:not([name])');\n\t  var scrollingParent = slot && getScrollingParent(slot.parentNode);\n\t  return scrollingParent || element;\n\t}\n\t\n\t// Return the parent of the given element that can be scrolled. If no such\n\t// element is found, return null.\n\tfunction getScrollingParent(element) {\n\t  if (element === null || element instanceof ShadowRoot) {\n\t    // Didn't find a scrolling parent.\n\t    return null;\n\t  }\n\t  var style = getComputedStyle(element);\n\t  var overflowX = style.overflowX;\n\t  var overflowY = style.overflowY;\n\t  if (overflowX === 'scroll' || overflowX === 'auto' || overflowY === 'scroll' || overflowY === 'auto') {\n\t    // Found an element we can scroll.\n\t    return element;\n\t  }\n\t  // Keep looking higher in the hierarchy for a scrolling parent.\n\t  return getScrollingParent(element.parentNode);\n\t}\n\n/***/ },\n/* 13 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _set = function set(object, property, value, receiver) { var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent !== null) { set(parent, property, value, receiver); } } else if (\"value\" in desc && desc.writable) { desc.value = value; } else { var setter = desc.set; if (setter !== undefined) { setter.call(receiver, value); } } return value; };\n\t\n\tvar _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if (\"value\" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };\n\t\n\texports.default = KeyboardPrefixSelectionMixin;\n\t\n\tvar _constants = __webpack_require__(14);\n\t\n\tvar _constants2 = _interopRequireDefault(_constants);\n\t\n\tvar _Symbol2 = __webpack_require__(4);\n\t\n\tvar _Symbol3 = _interopRequireDefault(_Symbol2);\n\t\n\tvar _symbols = __webpack_require__(5);\n\t\n\tvar _symbols2 = _interopRequireDefault(_symbols);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\t// Symbols for private data members on an element.\n\tvar itemTextContentsSymbol = (0, _Symbol3.default)('itemTextContents');\n\tvar typedPrefixSymbol = (0, _Symbol3.default)('typedPrefix');\n\tvar prefixTimeoutSymbol = (0, _Symbol3.default)('prefixTimeout');\n\tvar settingSelectionSymbol = (0, _Symbol3.default)('settingSelection');\n\t\n\t/**\n\t * Mixin that handles list box-style prefix typing, in which the user can type\n\t * a string to select the first item that begins with that string.\n\t *\n\t * Example: suppose a component using this mixin has the following items:\n\t *\n\t *     <sample-list-component>\n\t *       <div>Apple</div>\n\t *       <div>Apricot</div>\n\t *       <div>Banana</div>\n\t *       <div>Blackberry</div>\n\t *       <div>Blueberry</div>\n\t *       <div>Cantaloupe</div>\n\t *       <div>Cherry</div>\n\t *       <div>Lemon</div>\n\t *       <div>Lime</div>\n\t *     </sample-list-component>\n\t *\n\t * If this component receives the focus, and the user presses the \"b\" or \"B\"\n\t * key, the \"Banana\" item will be selected, because it's the first item that\n\t * matches the prefix \"b\". (Matching is case-insensitive.) If the user now\n\t * presses the \"l\" or \"L\" key quickly, the prefix to match becomes \"bl\", so\n\t * \"Blackberry\" will be selected.\n\t *\n\t * The prefix typing feature has a one second timeout — the prefix to match\n\t * will be reset after a second has passed since the user last typed a key.\n\t * If, in the above example, the user waits a second between typing \"b\" and\n\t * \"l\", the prefix will become \"l\", so \"Lemon\" would be selected.\n\t *\n\t * This mixin expects the component to invoke a `keydown` method when a key is\n\t * pressed. You can use [KeyboardMixin](KeyboardMixin.md) for that\n\t * purpose, or wire up your own keyboard handling and call `keydown` yourself.\n\t *\n\t * This mixin also expects the component to provide an `items` property. The\n\t * `textContent` of those items will be used for purposes of prefix matching.\n\t *\n\t * @module KeyboardPrefixSelectionMixin\n\t * @param base {Class} the base class to extend\n\t * @returns {Class} the extended class\n\t */\n\tfunction KeyboardPrefixSelectionMixin(base) {\n\t\n\t  /**\n\t   * The class prototype added by the mixin.\n\t   */\n\t  var KeyboardPrefixSelection = function (_base) {\n\t    _inherits(KeyboardPrefixSelection, _base);\n\t\n\t    function KeyboardPrefixSelection() {\n\t      _classCallCheck(this, KeyboardPrefixSelection);\n\t\n\t      return _possibleConstructorReturn(this, (KeyboardPrefixSelection.__proto__ || Object.getPrototypeOf(KeyboardPrefixSelection)).apply(this, arguments));\n\t    }\n\t\n\t    _createClass(KeyboardPrefixSelection, [{\n\t      key: _symbols2.default.getItemText,\n\t\n\t\n\t      // Default implementation returns an item's `alt` attribute or its\n\t      // `textContent`, in that order.\n\t      value: function value(item) {\n\t        return item.getAttribute('alt') || item.textContent;\n\t      }\n\t\n\t      // If the set of items has changed, reset the prefix. We'll also need to\n\t      // rebuild our cache of item text the next time we're asked for it.\n\t\n\t    }, {\n\t      key: _symbols2.default.itemsChanged,\n\t      value: function value() {\n\t        if (_get(KeyboardPrefixSelection.prototype.__proto__ || Object.getPrototypeOf(KeyboardPrefixSelection.prototype), _symbols2.default.itemsChanged, this)) {\n\t          _get(KeyboardPrefixSelection.prototype.__proto__ || Object.getPrototypeOf(KeyboardPrefixSelection.prototype), _symbols2.default.itemsChanged, this).call(this);\n\t        }\n\t        this[itemTextContentsSymbol] = null;\n\t        resetTypedPrefix(this);\n\t      }\n\t    }, {\n\t      key: _symbols2.default.keydown,\n\t      value: function value(event) {\n\t        var handled = void 0;\n\t        var resetPrefix = true;\n\t\n\t        switch (event.keyCode) {\n\t          case 8:\n\t            // Backspace\n\t            handleBackspace(this);\n\t            handled = true;\n\t            resetPrefix = false;\n\t            break;\n\t          case 27:\n\t            // Escape\n\t            handled = true;\n\t            break;\n\t          default:\n\t            if (!event.ctrlKey && !event.metaKey && !event.altKey && event.which !== 32 /* Space */) {\n\t                handlePlainCharacter(this, String.fromCharCode(event.keyCode));\n\t              }\n\t            resetPrefix = false;\n\t        }\n\t\n\t        if (resetPrefix) {\n\t          resetTypedPrefix(this);\n\t        }\n\t\n\t        // Prefer mixin result if it's defined, otherwise use base result.\n\t        return handled || _get(KeyboardPrefixSelection.prototype.__proto__ || Object.getPrototypeOf(KeyboardPrefixSelection.prototype), _symbols2.default.keydown, this) && _get(KeyboardPrefixSelection.prototype.__proto__ || Object.getPrototypeOf(KeyboardPrefixSelection.prototype), _symbols2.default.keydown, this).call(this, event);\n\t      }\n\t    }, {\n\t      key: 'selectItemWithTextPrefix',\n\t\n\t\n\t      /**\n\t       * Select the first item whose text content begins with the given prefix.\n\t       *\n\t       * @param prefix [String] The prefix string to search for\n\t       */\n\t      value: function selectItemWithTextPrefix(prefix) {\n\t        if (_get(KeyboardPrefixSelection.prototype.__proto__ || Object.getPrototypeOf(KeyboardPrefixSelection.prototype), 'selectItemWithTextPrefix', this)) {\n\t          _get(KeyboardPrefixSelection.prototype.__proto__ || Object.getPrototypeOf(KeyboardPrefixSelection.prototype), 'selectItemWithTextPrefix', this).call(this, prefix);\n\t        }\n\t        if (prefix == null || prefix.length === 0) {\n\t          return;\n\t        }\n\t        var index = getIndexOfItemWithTextPrefix(this, prefix);\n\t        if (index >= 0) {\n\t          // Update the selection. During that operation, set the flag that lets\n\t          // us know that we are the cause of the selection change. See note at\n\t          // this mixin's `selectedIndex` implementation.\n\t          this[settingSelectionSymbol] = true;\n\t          this.selectedIndex = index;\n\t          this[settingSelectionSymbol] = false;\n\t        }\n\t      }\n\t    }, {\n\t      key: 'selectedIndex',\n\t      get: function get() {\n\t        return _get(KeyboardPrefixSelection.prototype.__proto__ || Object.getPrototypeOf(KeyboardPrefixSelection.prototype), 'selectedIndex', this);\n\t      },\n\t      set: function set(index) {\n\t        if ('selectedIndex' in base.prototype) {\n\t          _set(KeyboardPrefixSelection.prototype.__proto__ || Object.getPrototypeOf(KeyboardPrefixSelection.prototype), 'selectedIndex', index, this);\n\t        }\n\t        if (!this[settingSelectionSymbol]) {\n\t          // Someone else (not this mixin) has changed the selection. In response,\n\t          // we invalidate the prefix under construction.\n\t          resetTypedPrefix(this);\n\t        }\n\t      }\n\t    }]);\n\t\n\t    return KeyboardPrefixSelection;\n\t  }(base);\n\t\n\t  return KeyboardPrefixSelection;\n\t}\n\t\n\t// Return the index of the first item with the given prefix, else -1.\n\tfunction getIndexOfItemWithTextPrefix(element, prefix) {\n\t  var itemTextContents = getItemTextContents(element);\n\t  var prefixLength = prefix.length;\n\t  for (var i = 0; i < itemTextContents.length; i++) {\n\t    var itemTextContent = itemTextContents[i];\n\t    if (itemTextContent.substr(0, prefixLength) === prefix) {\n\t      return i;\n\t    }\n\t  }\n\t  return -1;\n\t}\n\t\n\t// Return an array of the text content (in lowercase) of all items.\n\t// Cache these results.\n\tfunction getItemTextContents(element) {\n\t  if (!element[itemTextContentsSymbol]) {\n\t    var items = element.items;\n\t    element[itemTextContentsSymbol] = Array.prototype.map.call(items, function (item) {\n\t      var text = element[_symbols2.default.getItemText](item);\n\t      return text.toLowerCase();\n\t    });\n\t  }\n\t  return element[itemTextContentsSymbol];\n\t}\n\t\n\t// Handle the Backspace key: remove the last character from the prefix.\n\tfunction handleBackspace(element) {\n\t  var length = element[typedPrefixSymbol] ? element[typedPrefixSymbol].length : 0;\n\t  if (length > 0) {\n\t    element[typedPrefixSymbol] = element[typedPrefixSymbol].substr(0, length - 1);\n\t  }\n\t  element.selectItemWithTextPrefix(element[typedPrefixSymbol]);\n\t  setPrefixTimeout(element);\n\t}\n\t\n\t// Add a plain character to the prefix.\n\tfunction handlePlainCharacter(element, char) {\n\t  var prefix = element[typedPrefixSymbol] || '';\n\t  element[typedPrefixSymbol] = prefix + char.toLowerCase();\n\t  element.selectItemWithTextPrefix(element[typedPrefixSymbol]);\n\t  setPrefixTimeout(element);\n\t}\n\t\n\t// Stop listening for typing.\n\tfunction resetPrefixTimeout(element) {\n\t  if (element[prefixTimeoutSymbol]) {\n\t    clearTimeout(element[prefixTimeoutSymbol]);\n\t    element[prefixTimeoutSymbol] = false;\n\t  }\n\t}\n\t\n\t// Clear the prefix under construction.\n\tfunction resetTypedPrefix(element) {\n\t  element[typedPrefixSymbol] = '';\n\t  resetPrefixTimeout(element);\n\t}\n\t\n\t// Wait for the user to stop typing.\n\tfunction setPrefixTimeout(element) {\n\t  resetPrefixTimeout(element);\n\t  element[prefixTimeoutSymbol] = setTimeout(function () {\n\t    resetTypedPrefix(element);\n\t  }, _constants2.default.TYPING_TIMEOUT_DURATION);\n\t}\n\n/***/ },\n/* 14 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t/**\n\t * A collection of constants used by Elix mixins and components for consistency\n\t * in things such as user interface timings.\n\t *\n\t * @module constants\n\t */\n\tvar constants = {\n\t\n\t  /**\n\t   * Time in milliseconds after which the user is considered to have stopped\n\t   * typing.\n\t   *\n\t   * @const {number} TYPING_TIMEOUT_DURATION\n\t   */\n\t  TYPING_TIMEOUT_DURATION: 1000\n\t\n\t};\n\t\n\texports.default = constants;\n\n/***/ },\n/* 15 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _set = function set(object, property, value, receiver) { var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent !== null) { set(parent, property, value, receiver); } } else if (\"value\" in desc && desc.writable) { desc.value = value; } else { var setter = desc.set; if (setter !== undefined) { setter.call(receiver, value); } } return value; };\n\t\n\tvar _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if (\"value\" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };\n\t\n\texports.default = function (base) {\n\t\n\t  /**\n\t   * The class prototype added by the mixin.\n\t   */\n\t  var SelectionAria = function (_base) {\n\t    _inherits(SelectionAria, _base);\n\t\n\t    function SelectionAria() {\n\t      _classCallCheck(this, SelectionAria);\n\t\n\t      return _possibleConstructorReturn(this, (SelectionAria.__proto__ || Object.getPrototypeOf(SelectionAria)).apply(this, arguments));\n\t    }\n\t\n\t    _createClass(SelectionAria, [{\n\t      key: 'connectedCallback',\n\t      value: function connectedCallback() {\n\t        if (_get(SelectionAria.prototype.__proto__ || Object.getPrototypeOf(SelectionAria.prototype), 'connectedCallback', this)) {\n\t          _get(SelectionAria.prototype.__proto__ || Object.getPrototypeOf(SelectionAria.prototype), 'connectedCallback', this).call(this);\n\t        }\n\t\n\t        // Set default ARIA role for the overall component.\n\t        if (this.getAttribute('role') == null && this[_symbols2.default.defaults].role) {\n\t          this.setAttribute('role', this[_symbols2.default.defaults].role);\n\t        }\n\t      }\n\t    }, {\n\t      key: _symbols2.default.itemAdded,\n\t      value: function value(item) {\n\t        if (_get(SelectionAria.prototype.__proto__ || Object.getPrototypeOf(SelectionAria.prototype), _symbols2.default.itemAdded, this)) {\n\t          _get(SelectionAria.prototype.__proto__ || Object.getPrototypeOf(SelectionAria.prototype), _symbols2.default.itemAdded, this).call(this, item);\n\t        }\n\t\n\t        if (!item.getAttribute('role')) {\n\t          // Assign a default ARIA role for an individual item.\n\t          item.setAttribute('role', this[_symbols2.default.defaults].itemRole);\n\t        }\n\t\n\t        // Ensure each item has an ID so we can set aria-activedescendant on the\n\t        // overall list whenever the selection changes.\n\t        //\n\t        // The ID will take the form of a base ID plus a unique integer. The base\n\t        // ID will be incorporate the component's own ID. E.g., if a component has\n\t        // ID \"foo\", then its items will have IDs that look like \"_fooOption1\". If\n\t        // the compnent has no ID itself, its items will get IDs that look like\n\t        // \"_option1\". Item IDs are prefixed with an underscore to differentiate\n\t        // them from manually-assigned IDs, and to minimize the potential for ID\n\t        // conflicts.\n\t        if (!item.id) {\n\t          var baseId = this.id ? \"_\" + this.id + \"Option\" : \"_option\";\n\t          item.id = baseId + idCount++;\n\t        }\n\t      }\n\t    }, {\n\t      key: _symbols2.default.itemSelected,\n\t      value: function value(item, selected) {\n\t        if (_get(SelectionAria.prototype.__proto__ || Object.getPrototypeOf(SelectionAria.prototype), _symbols2.default.itemSelected, this)) {\n\t          _get(SelectionAria.prototype.__proto__ || Object.getPrototypeOf(SelectionAria.prototype), _symbols2.default.itemSelected, this).call(this, item, selected);\n\t        }\n\t        item.setAttribute('aria-selected', selected);\n\t        var itemId = item.id;\n\t        if (itemId && selected) {\n\t          this.setAttribute('aria-activedescendant', itemId);\n\t        }\n\t      }\n\t    }, {\n\t      key: _symbols2.default.defaults,\n\t      get: function get() {\n\t        var defaults = _get(SelectionAria.prototype.__proto__ || Object.getPrototypeOf(SelectionAria.prototype), _symbols2.default.defaults, this) || {};\n\t        defaults.role = 'listbox';\n\t        defaults.itemRole = 'option';\n\t        return defaults;\n\t      }\n\t    }, {\n\t      key: 'selectedItem',\n\t      get: function get() {\n\t        return _get(SelectionAria.prototype.__proto__ || Object.getPrototypeOf(SelectionAria.prototype), 'selectedItem', this);\n\t      },\n\t      set: function set(item) {\n\t        if ('selectedItem' in base.prototype) {\n\t          _set(SelectionAria.prototype.__proto__ || Object.getPrototypeOf(SelectionAria.prototype), 'selectedItem', item, this);\n\t        }\n\t        if (item == null) {\n\t          // Selection was removed.\n\t          this.removeAttribute('aria-activedescendant');\n\t        }\n\t      }\n\t    }]);\n\t\n\t    return SelectionAria;\n\t  }(base);\n\t\n\t  return SelectionAria;\n\t};\n\t\n\tvar _symbols = __webpack_require__(5);\n\t\n\tvar _symbols2 = _interopRequireDefault(_symbols);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\t// Used to assign unique IDs to item elements without IDs.\n\tvar idCount = 0;\n\t\n\t/**\n\t * Mixin which treats the selected item in a list as the active item in ARIA\n\t * accessibility terms.\n\t *\n\t * Handling ARIA selection state properly is actually quite complex:\n\t *\n\t * * The items in the list need to be indicated as possible items via an ARIA\n\t *   `role` attribute value such as \"option\".\n\t * * The selected item need to be marked as selected by setting the item's\n\t *   `aria-selected` attribute to true *and* the other items need be marked as\n\t *   *not* selected by setting `aria-selected` to false.\n\t * * The outermost element with the keyboard focus needs to have attributes\n\t *   set on it so that the selection is knowable at the list level via the\n\t *   `aria-activedescendant` attribute.\n\t * * Use of `aria-activedescendant` in turn requires that all items in the\n\t *   list have ID attributes assigned to them.\n\t *\n\t * This mixin tries to address all of the above requirements. To that end,\n\t * this mixin will assign generated IDs to any item that doesn't already have\n\t * an ID.\n\t *\n\t * ARIA relies on elements to provide `role` attributes. This mixin will apply\n\t * a default role of \"listbox\" on the outer list if it doesn't already have an\n\t * explicit role. Similarly, this mixin will apply a default role of \"option\"\n\t * to any list item that does not already have a role specified.\n\t *\n\t * This mixin expects a set of members that manage the state of the selection:\n\t * `[symbols.itemSelected]`, `[symbols.itemAdded]`, and `selectedItem`. You can\n\t * supply these yourself, or do so via\n\t * [SingleSelectionMixin](SingleSelectionMixin.md).\n\t *\n\t * @module\n\t * @param base {Class} the base class to extend\n\t * @returns {Class} the extended class\n\t */\n\n/***/ },\n/* 16 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _set = function set(object, property, value, receiver) { var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent !== null) { set(parent, property, value, receiver); } } else if (\"value\" in desc && desc.writable) { desc.value = value; } else { var setter = desc.set; if (setter !== undefined) { setter.call(receiver, value); } } return value; };\n\t\n\tvar _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if (\"value\" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };\n\t\n\tvar _defaultScrollTarget = __webpack_require__(12);\n\t\n\tvar _defaultScrollTarget2 = _interopRequireDefault(_defaultScrollTarget);\n\t\n\tvar _symbols = __webpack_require__(5);\n\t\n\tvar _symbols2 = _interopRequireDefault(_symbols);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\t/**\n\t * Mixin which scrolls a container horizontally and/or vertically to ensure that\n\t * a newly-selected item is visible to the user.\n\t *\n\t * When the selected item in a list-like component changes, the selected item\n\t * should be brought into view so that the user can confirm their selection.\n\t *\n\t * This mixin expects a `selectedItem` property to be set when the selection\n\t * changes. You can supply that yourself, or use\n\t * [SingleSelectionMixin](SingleSelectionMixin.md).\n\t *\n\t * @module SelectinInViewMixin\n\t * @param base {Class} the base class to extend\n\t * @returns {Class} the extended class\n\t */\n\texports.default = function (base) {\n\t\n\t  /**\n\t   * The class prototype added by the mixin.\n\t   */\n\t  var SelectionInView = function (_base) {\n\t    _inherits(SelectionInView, _base);\n\t\n\t    function SelectionInView() {\n\t      _classCallCheck(this, SelectionInView);\n\t\n\t      return _possibleConstructorReturn(this, (SelectionInView.__proto__ || Object.getPrototypeOf(SelectionInView)).apply(this, arguments));\n\t    }\n\t\n\t    _createClass(SelectionInView, [{\n\t      key: 'connectedCallback',\n\t      value: function connectedCallback() {\n\t        if (_get(SelectionInView.prototype.__proto__ || Object.getPrototypeOf(SelectionInView.prototype), 'connectedCallback', this)) {\n\t          _get(SelectionInView.prototype.__proto__ || Object.getPrototypeOf(SelectionInView.prototype), 'connectedCallback', this).call(this);\n\t        }\n\t        var selectedItem = this.selectedItem;\n\t        if (selectedItem) {\n\t          this.scrollItemIntoView(selectedItem);\n\t        }\n\t      }\n\t\n\t      /**\n\t       * Scroll the given element completely into view, minimizing the degree of\n\t       * scrolling performed.\n\t       *\n\t       * Blink has a `scrollIntoViewIfNeeded()` function that does something\n\t       * similar, but unfortunately it's non-standard, and in any event often ends\n\t       * up scrolling more than is absolutely necessary.\n\t       *\n\t       * This scrolls the containing element defined by the `scrollTarget`\n\t       * property. See that property for a discussion of the default value of\n\t       * that property.\n\t       *\n\t       * @param {HTMLElement} item - the item to scroll into view.\n\t       */\n\t\n\t    }, {\n\t      key: 'scrollItemIntoView',\n\t      value: function scrollItemIntoView(item) {\n\t        if (_get(SelectionInView.prototype.__proto__ || Object.getPrototypeOf(SelectionInView.prototype), 'scrollItemIntoView', this)) {\n\t          _get(SelectionInView.prototype.__proto__ || Object.getPrototypeOf(SelectionInView.prototype), 'scrollItemIntoView', this).call(this);\n\t        }\n\t\n\t        var scrollTarget = this[_symbols2.default.scrollTarget];\n\t\n\t        // Determine the bounds of the scroll target and item. We use\n\t        // getBoundingClientRect instead of .offsetTop, etc., because the latter\n\t        // round values, and we want to handle fractional values.\n\t        var scrollTargetRect = scrollTarget.getBoundingClientRect();\n\t        var itemRect = item.getBoundingClientRect();\n\t\n\t        // Determine how far the item is outside the viewport.\n\t        var bottomDelta = itemRect.bottom - scrollTargetRect.bottom;\n\t        var topDelta = itemRect.top - scrollTargetRect.top;\n\t        var leftDelta = itemRect.left - scrollTargetRect.left;\n\t        var rightDelta = itemRect.right - scrollTargetRect.right;\n\t\n\t        // Scroll the target as necessary to bring the item into view.\n\t        if (bottomDelta > 0) {\n\t          scrollTarget.scrollTop += bottomDelta; // Scroll down\n\t        } else if (topDelta < 0) {\n\t          scrollTarget.scrollTop += Math.ceil(topDelta); // Scroll up\n\t        }\n\t        if (rightDelta > 0) {\n\t          scrollTarget.scrollLeft += rightDelta; // Scroll right\n\t        } else if (leftDelta < 0) {\n\t          scrollTarget.scrollLeft += Math.ceil(leftDelta); // Scroll left\n\t        }\n\t      }\n\t\n\t      /* Provide a default scrollTarget implementation if none exists. */\n\t\n\t    }, {\n\t      key: _symbols2.default.scrollTarget,\n\t      get: function get() {\n\t        return _get(SelectionInView.prototype.__proto__ || Object.getPrototypeOf(SelectionInView.prototype), _symbols2.default.scrollTarget, this) || (0, _defaultScrollTarget2.default)(this);\n\t      }\n\t    }, {\n\t      key: 'selectedItem',\n\t      get: function get() {\n\t        return _get(SelectionInView.prototype.__proto__ || Object.getPrototypeOf(SelectionInView.prototype), 'selectedItem', this);\n\t      },\n\t      set: function set(item) {\n\t        if ('selectedItem' in base.prototype) {\n\t          _set(SelectionInView.prototype.__proto__ || Object.getPrototypeOf(SelectionInView.prototype), 'selectedItem', item, this);\n\t        }\n\t        if (item) {\n\t          // Keep the selected item in view.\n\t          this.scrollItemIntoView(item);\n\t        }\n\t      }\n\t    }]);\n\t\n\t    return SelectionInView;\n\t  }(base);\n\t\n\t  return SelectionInView;\n\t};\n\n/***/ },\n/* 17 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if (\"value\" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };\n\t\n\texports.default = ShadowTemplateMixin;\n\t\n\tvar _symbols = __webpack_require__(5);\n\t\n\tvar _symbols2 = _interopRequireDefault(_symbols);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\t// A cache of processed templates.\n\t//\n\t// We maintain this as a map keyed by element tag (localName). We could store\n\t// an element's processed template on its element prototype. One scenario that\n\t// wouldn't support would be registration of the same constructor under multiple\n\t// tag names, which was a (perhaps theoretical) use case for Custom Elements.\n\t//\n\tvar mapTagToTemplate = {};\n\t\n\t/**\n\t * Mixin which adds stamping a template into a Shadow DOM subtree upon component\n\t * instantiation.\n\t *\n\t * To use this mixin, define a `template` property as a string or HTML\n\t * `<template>` element:\n\t *\n\t *     class MyElement extends ShadowTemplateMixin(HTMLElement) {\n\t *       get [symbols.template]() {\n\t *         return `Hello, <em>world</em>.`;\n\t *       }\n\t *     }\n\t *\n\t * When your component class is instantiated, a shadow root will be created on\n\t * the instance, and the contents of the template will be cloned into the\n\t * shadow root. If your component does not define a `template` property, this\n\t * mixin has no effect.\n\t *\n\t * For the time being, this extension retains support for Shadow DOM v0. That\n\t * will eventually be deprecated as browsers (and the Shadow DOM polyfill)\n\t * implement Shadow DOM v1.\n\t *\n\t * @module ShadowTemplateMixin\n\t * @param base {Class} the base class to extend\n\t * @returns {Class} the extended class\n\t */\n\tfunction ShadowTemplateMixin(base) {\n\t\n\t  /**\n\t   * The class prototype added by the mixin.\n\t   */\n\t  var ShadowTemplate = function (_base) {\n\t    _inherits(ShadowTemplate, _base);\n\t\n\t    /*\n\t     * If the component defines a template, a shadow root will be created on the\n\t     * component instance, and the template stamped into it.\n\t     */\n\t    function ShadowTemplate() {\n\t      _classCallCheck(this, ShadowTemplate);\n\t\n\t      var _this = _possibleConstructorReturn(this, (ShadowTemplate.__proto__ || Object.getPrototypeOf(ShadowTemplate)).call(this));\n\t\n\t      var tag = _this.localName;\n\t      var template = mapTagToTemplate[tag];\n\t\n\t      // See if we've already processed a template for this tag.\n\t      if (!template) {\n\t        // This is the first time we've created an instance of this tag.\n\t\n\t        // Get the template and perform initial processing.\n\t        template = _this[_symbols2.default.template];\n\t        if (!template) {\n\t          console.warn('ShadowTemplateMixin expects a component to define a property called [symbols.template].');\n\t          return _possibleConstructorReturn(_this);\n\t        }\n\t\n\t        if (typeof template === 'string') {\n\t          // Upgrade plain string to real template.\n\t          var templateText = template;\n\t          template = document.createElement('template');\n\t          template.innerHTML = templateText;\n\t        }\n\t\n\t        if (window.ShadyCSS) {\n\t          // Let the CSS polyfill do its own initialization.\n\t          window.ShadyCSS.prepareTemplate(template, tag);\n\t        }\n\t\n\t        // Store this for the next time we create the same type of element.\n\t        mapTagToTemplate[tag] = template;\n\t      }\n\t\n\t      // Stamp the template into a new shadow root.\n\t      var root = _this.attachShadow({ mode: 'open' });\n\t      var clone = document.importNode(template.content, true);\n\t      root.appendChild(clone);\n\t\n\t      /* Let the component know the shadow tree has been populated. */\n\t      if (_this[_symbols2.default.shadowCreated]) {\n\t        _this[_symbols2.default.shadowCreated]();\n\t      }\n\t      return _this;\n\t    }\n\t\n\t    _createClass(ShadowTemplate, [{\n\t      key: 'connectedCallback',\n\t      value: function connectedCallback() {\n\t        if (_get(ShadowTemplate.prototype.__proto__ || Object.getPrototypeOf(ShadowTemplate.prototype), 'connectedCallback', this)) {\n\t          _get(ShadowTemplate.prototype.__proto__ || Object.getPrototypeOf(ShadowTemplate.prototype), 'connectedCallback', this).call(this);\n\t        }\n\t        if (window.ShadyCSS) {\n\t          window.ShadyCSS.applyStyle(this);\n\t        }\n\t      }\n\t    }]);\n\t\n\t    return ShadowTemplate;\n\t  }(base);\n\t\n\t  return ShadowTemplate;\n\t}\n\n/***/ },\n/* 18 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if (\"value\" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };\n\t\n\tvar _set = function set(object, property, value, receiver) { var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent !== null) { set(parent, property, value, receiver); } } else if (\"value\" in desc && desc.writable) { desc.value = value; } else { var setter = desc.set; if (setter !== undefined) { setter.call(receiver, value); } } return value; };\n\t\n\texports.default = SingleSelectionMixin;\n\t\n\tvar _Symbol2 = __webpack_require__(4);\n\t\n\tvar _Symbol3 = _interopRequireDefault(_Symbol2);\n\t\n\tvar _symbols = __webpack_require__(5);\n\t\n\tvar _symbols2 = _interopRequireDefault(_symbols);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\t// Symbols for private data members on an element.\n\tvar canSelectNextSymbol = (0, _Symbol3.default)('canSelectNext');\n\tvar canSelectPreviousSymbol = (0, _Symbol3.default)('canSelectPrevious');\n\tvar selectionRequiredSymbol = (0, _Symbol3.default)('selectionRequired');\n\tvar selectionWrapsSymbol = (0, _Symbol3.default)('selectionWraps');\n\t\n\t// We want to expose both selectedIndex and selectedItem as independent\n\t// properties but keep them in sync. This allows a component user to reference\n\t// the selection by whatever means is most natural for their situation.\n\t//\n\t// To efficiently keep these properties in sync, we track \"external\" and\n\t// \"internal\" references for each property:\n\t//\n\t// The external index or item is the one we report to the outside world when\n\t// asked for selection.  When handling a change to index or item, we update the\n\t// external reference as soon as possible, so that if anyone immediately asks\n\t// for the current selection, they will receive a stable answer.\n\t//\n\t// The internal index or item tracks whichever index or item last received the\n\t// full set of processing. Processing includes raising a change event for the\n\t// new value. Once we've begun that processing, we store the new value as the\n\t// internal value to indicate we've handled it.\n\t//\n\tvar externalSelectedIndexSymbol = (0, _Symbol3.default)('externalSelectedIndex');\n\tvar externalSelectedItemSymbol = (0, _Symbol3.default)('externalSelectedItem');\n\tvar internalSelectedIndexSymbol = (0, _Symbol3.default)('internalSelectedIndex');\n\tvar internalSelectedItemSymbol = (0, _Symbol3.default)('internalSelectedItem');\n\t\n\t/**\n\t * Mixin which adds single-selection semantics for items in a list.\n\t *\n\t * This mixin expects a component to provide an `items` Array or NodeList of\n\t * all elements in the list.\n\t *\n\t * This mixin tracks a single selected item in the list, and provides means to\n\t * get and set that state by item position (`selectedIndex`) or item identity\n\t * (`selectedItem`). The selection can be moved in the list via the methods\n\t * `selectFirst`, `selectLast`, `selectNext`, and `selectPrevious`.\n\t *\n\t * This mixin does not produce any user-visible effects to represent\n\t * selection.\n\t *\n\t * @module SingleSelectionMixin\n\t * @param base {Class} the base class to extend\n\t * @returns {Class} the extended class\n\t */\n\tfunction SingleSelectionMixin(base) {\n\t\n\t  /**\n\t   * The class prototype added by the mixin.\n\t   */\n\t  var SingleSelection = function (_base) {\n\t    _inherits(SingleSelection, _base);\n\t\n\t    function SingleSelection() {\n\t      _classCallCheck(this, SingleSelection);\n\t\n\t      // Set defaults.\n\t      var _this = _possibleConstructorReturn(this, (SingleSelection.__proto__ || Object.getPrototypeOf(SingleSelection)).call(this));\n\t\n\t      if (typeof _this.selectionRequired === 'undefined') {\n\t        _this.selectionRequired = _this[_symbols2.default.defaults].selectionRequired;\n\t      }\n\t      if (typeof _this.selectionWraps === 'undefined') {\n\t        _this.selectionWraps = _this[_symbols2.default.defaults].selectionWraps;\n\t      }\n\t      return _this;\n\t    }\n\t\n\t    /**\n\t     * True if the selection can be moved to the next item, false if not (the\n\t     * selected item is the last item in the list).\n\t     *\n\t     * @type {boolean}\n\t     */\n\t\n\t\n\t    _createClass(SingleSelection, [{\n\t      key: _symbols2.default.itemAdded,\n\t\n\t\n\t      /**\n\t       * Handle a new item being added to the list.\n\t       *\n\t       * The default implementation of this method simply sets the item's\n\t       * selection state to false.\n\t       *\n\t       * @param {HTMLElement} item - the item being added\n\t       */\n\t      value: function value(item) {\n\t        if (_get(SingleSelection.prototype.__proto__ || Object.getPrototypeOf(SingleSelection.prototype), _symbols2.default.itemAdded, this)) {\n\t          _get(SingleSelection.prototype.__proto__ || Object.getPrototypeOf(SingleSelection.prototype), _symbols2.default.itemAdded, this).call(this, item);\n\t        }\n\t        this[_symbols2.default.itemSelected](item, item === this.selectedItem);\n\t      }\n\t    }, {\n\t      key: _symbols2.default.itemsChanged,\n\t      value: function value() {\n\t        if (_get(SingleSelection.prototype.__proto__ || Object.getPrototypeOf(SingleSelection.prototype), _symbols2.default.itemsChanged, this)) {\n\t          _get(SingleSelection.prototype.__proto__ || Object.getPrototypeOf(SingleSelection.prototype), _symbols2.default.itemsChanged, this).call(this);\n\t        }\n\t\n\t        // In case selected item changed position or was removed.\n\t        trackSelectedItem(this);\n\t\n\t        // In case the change in items affected which navigations are possible.\n\t        updatePossibleNavigations(this);\n\t      }\n\t\n\t      /**\n\t       * Apply the indicate selection state to the item.\n\t       *\n\t       * The default implementation of this method does nothing. User-visible\n\t       * effects will typically be handled by other mixins.\n\t       *\n\t       * @param {HTMLElement} item - the item being selected/deselected\n\t       * @param {boolean} selected - true if the item is selected, false if not\n\t       */\n\t\n\t    }, {\n\t      key: _symbols2.default.itemSelected,\n\t      value: function value(item, selected) {\n\t        if (_get(SingleSelection.prototype.__proto__ || Object.getPrototypeOf(SingleSelection.prototype), _symbols2.default.itemSelected, this)) {\n\t          _get(SingleSelection.prototype.__proto__ || Object.getPrototypeOf(SingleSelection.prototype), _symbols2.default.itemSelected, this).call(this, item, selected);\n\t        }\n\t      }\n\t\n\t      /**\n\t       * The index of the item which is currently selected.\n\t       *\n\t       * The setter expects an integer or a string representing an integer.\n\t       *\n\t       * A `selectedIndex` of -1 indicates there is no selection. Setting this\n\t       * property to -1 will remove any existing selection.\n\t       *\n\t       * @type {number}\n\t       */\n\t\n\t    }, {\n\t      key: 'selectFirst',\n\t\n\t\n\t      /**\n\t       * Select the first item in the list.\n\t       *\n\t       * @returns {Boolean} True if the selection changed, false if not.\n\t       */\n\t      value: function selectFirst() {\n\t        if (_get(SingleSelection.prototype.__proto__ || Object.getPrototypeOf(SingleSelection.prototype), 'selectFirst', this)) {\n\t          _get(SingleSelection.prototype.__proto__ || Object.getPrototypeOf(SingleSelection.prototype), 'selectFirst', this).call(this);\n\t        }\n\t        return selectIndex(this, 0);\n\t      }\n\t\n\t      /**\n\t       * True if the list should always have a selection (if it has items).\n\t       *\n\t       * @type {boolean}\n\t       * @default false\n\t       */\n\t\n\t    }, {\n\t      key: 'selectLast',\n\t\n\t\n\t      /**\n\t       * Select the last item in the list.\n\t       *\n\t       * @returns {Boolean} True if the selection changed, false if not.\n\t       */\n\t      value: function selectLast() {\n\t        if (_get(SingleSelection.prototype.__proto__ || Object.getPrototypeOf(SingleSelection.prototype), 'selectLast', this)) {\n\t          _get(SingleSelection.prototype.__proto__ || Object.getPrototypeOf(SingleSelection.prototype), 'selectLast', this).call(this);\n\t        }\n\t        return selectIndex(this, this.items.length - 1);\n\t      }\n\t\n\t      /**\n\t       * Select the next item in the list.\n\t       *\n\t       * If the list has no selection, the first item will be selected.\n\t       *\n\t       * @returns {Boolean} True if the selection changed, false if not.\n\t       */\n\t\n\t    }, {\n\t      key: 'selectNext',\n\t      value: function selectNext() {\n\t        if (_get(SingleSelection.prototype.__proto__ || Object.getPrototypeOf(SingleSelection.prototype), 'selectNext', this)) {\n\t          _get(SingleSelection.prototype.__proto__ || Object.getPrototypeOf(SingleSelection.prototype), 'selectNext', this).call(this);\n\t        }\n\t        return selectIndex(this, this.selectedIndex + 1);\n\t      }\n\t\n\t      /**\n\t       * Select the previous item in the list.\n\t       *\n\t       * If the list has no selection, the last item will be selected.\n\t       *\n\t       * @returns {Boolean} True if the selection changed, false if not.\n\t       */\n\t\n\t    }, {\n\t      key: 'selectPrevious',\n\t      value: function selectPrevious() {\n\t        if (_get(SingleSelection.prototype.__proto__ || Object.getPrototypeOf(SingleSelection.prototype), 'selectPrevious', this)) {\n\t          _get(SingleSelection.prototype.__proto__ || Object.getPrototypeOf(SingleSelection.prototype), 'selectPrevious', this).call(this);\n\t        }\n\t        var newIndex = this.selectedIndex < 0 ? this.items.length - 1 : // No selection yet; select last item.\n\t        this.selectedIndex - 1;\n\t        return selectIndex(this, newIndex);\n\t      }\n\t\n\t      /**\n\t       * Fires when the canSelectNext property changes in response to internal\n\t       * component activity.\n\t       *\n\t       * @memberof SingleSelection\n\t       * @event can-select-next-changed\n\t       */\n\t\n\t      /**\n\t       * Fires when the canSelectPrevious property changes in response to internal\n\t       * component activity.\n\t       *\n\t       * @memberof SingleSelection\n\t       * @event can-select-previous-changed\n\t       */\n\t\n\t      /**\n\t       * Fires when the selectedIndex property changes in response to internal\n\t       * component activity.\n\t       *\n\t       * @memberof SingleSelection\n\t       * @event selected-index-changed\n\t       * @param {number} detail.selectedIndex The new selected index.\n\t       */\n\t\n\t      /**\n\t       * Fires when the selectedItem property changes in response to internal\n\t       * component activity.\n\t       *\n\t       * @memberof SingleSelection\n\t       * @event selected-item-changed\n\t       * @param {HTMLElement} detail.selectedItem The new selected item.\n\t       */\n\t\n\t    }, {\n\t      key: 'canSelectNext',\n\t      get: function get() {\n\t        return this[canSelectNextSymbol];\n\t      },\n\t      set: function set(canSelectNext) {\n\t        var changed = canSelectNext !== this[canSelectNextSymbol];\n\t        this[canSelectNextSymbol] = canSelectNext;\n\t        if ('canSelectNext' in base.prototype) {\n\t          _set(SingleSelection.prototype.__proto__ || Object.getPrototypeOf(SingleSelection.prototype), 'canSelectNext', canSelectNext, this);\n\t        }\n\t        if (this[_symbols2.default.raiseChangeEvents] && changed) {\n\t          this.dispatchEvent(new CustomEvent('can-select-next-changed'));\n\t        }\n\t      }\n\t\n\t      /**\n\t       * True if the selection can be moved to the previous item, false if not\n\t       * (the selected item is the first one in the list).\n\t       *\n\t       * @type {boolean}\n\t       */\n\t\n\t    }, {\n\t      key: 'canSelectPrevious',\n\t      get: function get() {\n\t        return this[canSelectPreviousSymbol];\n\t      },\n\t      set: function set(canSelectPrevious) {\n\t        var changed = canSelectPrevious !== this[canSelectPreviousSymbol];\n\t        this[canSelectPreviousSymbol] = canSelectPrevious;\n\t        if ('canSelectPrevious' in base.prototype) {\n\t          _set(SingleSelection.prototype.__proto__ || Object.getPrototypeOf(SingleSelection.prototype), 'canSelectPrevious', canSelectPrevious, this);\n\t        }\n\t        if (this[_symbols2.default.raiseChangeEvents] && changed) {\n\t          this.dispatchEvent(new CustomEvent('can-select-previous-changed'));\n\t        }\n\t      }\n\t    }, {\n\t      key: _symbols2.default.defaults,\n\t      get: function get() {\n\t        var defaults = _get(SingleSelection.prototype.__proto__ || Object.getPrototypeOf(SingleSelection.prototype), _symbols2.default.defaults, this) || {};\n\t        defaults.selectionRequired = false;\n\t        defaults.selectionWraps = false;\n\t        return defaults;\n\t      }\n\t    }, {\n\t      key: 'selectedIndex',\n\t      get: function get() {\n\t        return this[externalSelectedIndexSymbol] != null ? this[externalSelectedIndexSymbol] : -1;\n\t      },\n\t      set: function set(index) {\n\t        // See notes at top about internal vs. external copies of this property.\n\t        var changed = index !== this[internalSelectedIndexSymbol];\n\t        var item = void 0;\n\t        var parsedIndex = parseInt(index);\n\t        if (parsedIndex !== this[externalSelectedIndexSymbol]) {\n\t          // Store the new index and the corresponding item.\n\t          var items = this.items;\n\t          var hasItems = items && items.length > 0;\n\t          if (!(hasItems && parsedIndex >= 0 && parsedIndex < items.length)) {\n\t            parsedIndex = -1; // No item at that index.\n\t          }\n\t          this[externalSelectedIndexSymbol] = parsedIndex;\n\t          item = hasItems && parsedIndex >= 0 ? items[parsedIndex] : null;\n\t          this[externalSelectedItemSymbol] = item;\n\t        } else {\n\t          item = this[externalSelectedItemSymbol];\n\t        }\n\t\n\t        // Now let super do any work.\n\t        if ('selectedIndex' in base.prototype) {\n\t          _set(SingleSelection.prototype.__proto__ || Object.getPrototypeOf(SingleSelection.prototype), 'selectedIndex', index, this);\n\t        }\n\t\n\t        if (changed) {\n\t          // The selected index changed.\n\t          this[internalSelectedIndexSymbol] = parsedIndex;\n\t\n\t          if (this[_symbols2.default.raiseChangeEvents]) {\n\t            var event = new CustomEvent('selected-index-changed', {\n\t              detail: {\n\t                selectedIndex: parsedIndex,\n\t                value: parsedIndex // for Polymer binding. TODO: Verify still necessary\n\t              }\n\t            });\n\t            this.dispatchEvent(event);\n\t          }\n\t        }\n\t\n\t        if (this[internalSelectedItemSymbol] !== item) {\n\t          // Update selectedItem property so it can have its own effects.\n\t          this.selectedItem = item;\n\t        }\n\t      }\n\t\n\t      /**\n\t       * The currently selected item, or null if there is no selection.\n\t       *\n\t       * Setting this property to null deselects any currently-selected item.\n\t       * Setting this property to an object that is not in the list has no effect.\n\t       *\n\t       * TODO: Even if selectionRequired, can still explicitly set selectedItem to null.\n\t       * TODO: If selectionRequired, leave selection alone?\n\t       *\n\t       * @type {object}\n\t       */\n\t\n\t    }, {\n\t      key: 'selectedItem',\n\t      get: function get() {\n\t        return this[externalSelectedItemSymbol] || null;\n\t      },\n\t      set: function set(item) {\n\t        // See notes at top about internal vs. external copies of this property.\n\t        var previousSelectedItem = this[internalSelectedItemSymbol];\n\t        var changed = item !== previousSelectedItem;\n\t        var index = void 0;\n\t        if (item !== this[externalSelectedItemSymbol]) {\n\t          // Store item and look up corresponding index.\n\t          var items = this.items;\n\t          var hasItems = items && items.length > 0;\n\t          index = hasItems ? Array.prototype.indexOf.call(items, item) : -1;\n\t          this[externalSelectedIndexSymbol] = index;\n\t          if (index < 0) {\n\t            item = null; // The indicated item isn't actually in `items`.\n\t          }\n\t          this[externalSelectedItemSymbol] = item;\n\t        } else {\n\t          index = this[externalSelectedIndexSymbol];\n\t        }\n\t\n\t        // Now let super do any work.\n\t        if ('selectedItem' in base.prototype) {\n\t          _set(SingleSelection.prototype.__proto__ || Object.getPrototypeOf(SingleSelection.prototype), 'selectedItem', item, this);\n\t        }\n\t\n\t        if (changed) {\n\t          // The selected item changed.\n\t          this[internalSelectedItemSymbol] = item;\n\t\n\t          if (previousSelectedItem) {\n\t            // Update selection state of old item.\n\t            this[_symbols2.default.itemSelected](previousSelectedItem, false);\n\t          }\n\t          if (item) {\n\t            // Update selection state to new item.\n\t            this[_symbols2.default.itemSelected](item, true);\n\t          }\n\t\n\t          updatePossibleNavigations(this);\n\t\n\t          if (this[_symbols2.default.raiseChangeEvents]) {\n\t            var event = new CustomEvent('selected-item-changed', {\n\t              detail: {\n\t                selectedItem: item,\n\t                value: item // for Polymer binding\n\t              }\n\t            });\n\t            this.dispatchEvent(event);\n\t          }\n\t        }\n\t\n\t        if (this[internalSelectedIndexSymbol] !== index) {\n\t          // Update selectedIndex property so it can have its own effects.\n\t          this.selectedIndex = index;\n\t        }\n\t      }\n\t    }, {\n\t      key: 'selectionRequired',\n\t      get: function get() {\n\t        return this[selectionRequiredSymbol];\n\t      },\n\t      set: function set(selectionRequired) {\n\t        var parsed = String(selectionRequired) === 'true';\n\t        var changed = parsed !== this[selectionRequiredSymbol];\n\t        this[selectionRequiredSymbol] = parsed;\n\t        if ('selectionRequired' in base.prototype) {\n\t          _set(SingleSelection.prototype.__proto__ || Object.getPrototypeOf(SingleSelection.prototype), 'selectionRequired', selectionRequired, this);\n\t        }\n\t        if (changed) {\n\t          if (this[_symbols2.default.raiseChangeEvents]) {\n\t            var event = new CustomEvent('selection-required-changed');\n\t            this.dispatchEvent(event);\n\t          }\n\t          if (selectionRequired) {\n\t            trackSelectedItem(this);\n\t          }\n\t        }\n\t      }\n\t\n\t      /**\n\t       * True if selection navigations wrap from last to first, and vice versa.\n\t       *\n\t       * @type {boolean}\n\t       * @default false\n\t       */\n\t\n\t    }, {\n\t      key: 'selectionWraps',\n\t      get: function get() {\n\t        return this[selectionWrapsSymbol];\n\t      },\n\t      set: function set(selectionWraps) {\n\t        var parsed = String(selectionWraps) === 'true';\n\t        var changed = parsed !== this[selectionWrapsSymbol];\n\t        this[selectionWrapsSymbol] = parsed;\n\t        if ('selectionWraps' in base.prototype) {\n\t          _set(SingleSelection.prototype.__proto__ || Object.getPrototypeOf(SingleSelection.prototype), 'selectionWraps', selectionWraps, this);\n\t        }\n\t        if (changed) {\n\t          if (this[_symbols2.default.raiseChangeEvents]) {\n\t            var event = new CustomEvent('selection-wraps-changed');\n\t            this.dispatchEvent(event);\n\t          }\n\t          updatePossibleNavigations(this);\n\t        }\n\t      }\n\t    }]);\n\t\n\t    return SingleSelection;\n\t  }(base);\n\t\n\t  return SingleSelection;\n\t}\n\t\n\t// Ensure the given index is within bounds, and select it if it's not already\n\t// selected.\n\tfunction selectIndex(element, index) {\n\t\n\t  var items = element.items;\n\t  if (items == null) {\n\t    // Nothing to select.\n\t    return false;\n\t  }\n\t\n\t  var count = items.length;\n\t  var boundedIndex = element.selectionWraps ?\n\t  // JavaScript mod doesn't handle negative numbers the way we want to wrap.\n\t  // See http://stackoverflow.com/a/18618250/76472\n\t  (index % count + count) % count :\n\t\n\t  // Keep index within bounds of array.\n\t  Math.max(Math.min(index, count - 1), 0);\n\t\n\t  var previousIndex = element.selectedIndex;\n\t  if (previousIndex !== boundedIndex) {\n\t    element.selectedIndex = boundedIndex;\n\t    return true;\n\t  } else {\n\t    return false;\n\t  }\n\t}\n\t\n\t// Following a change in the set of items, or in the value of the\n\t// `selectionRequired` property, reacquire the selected item. If it's moved,\n\t// update `selectedIndex`. If it's been removed, and a selection is required,\n\t// try to select another item.\n\tfunction trackSelectedItem(element) {\n\t\n\t  var items = element.items;\n\t  var itemCount = items ? items.length : 0;\n\t\n\t  var previousSelectedItem = element.selectedItem;\n\t  if (!previousSelectedItem) {\n\t    // No item was previously selected.\n\t    if (element.selectionRequired) {\n\t      // Select the first item by default.\n\t      element.selectedIndex = 0;\n\t    }\n\t  } else if (itemCount === 0) {\n\t    // We've lost the selection, and there's nothing left to select.\n\t    element.selectedItem = null;\n\t  } else {\n\t    // Try to find the previously-selected item in the current set of items.\n\t    var indexInCurrentItems = Array.prototype.indexOf.call(items, previousSelectedItem);\n\t    var previousSelectedIndex = element.selectedIndex;\n\t    if (indexInCurrentItems < 0) {\n\t      // Previously-selected item was removed from the items.\n\t      // Select the item at the same index (if it exists) or as close as possible.\n\t      var newSelectedIndex = Math.min(previousSelectedIndex, itemCount - 1);\n\t      // Select by item, since index may be the same, and we want to raise the\n\t      // selected-item-changed event.\n\t      element.selectedItem = items[newSelectedIndex];\n\t    } else if (indexInCurrentItems !== previousSelectedIndex) {\n\t      // Previously-selected item still there, but changed position.\n\t      element.selectedIndex = indexInCurrentItems;\n\t    }\n\t  }\n\t}\n\t\n\t// Following a change in selection, report whether it's now possible to\n\t// go next/previous from the given index.\n\tfunction updatePossibleNavigations(element) {\n\t  var canSelectNext = void 0;\n\t  var canSelectPrevious = void 0;\n\t  var items = element.items;\n\t  if (items == null || items.length === 0) {\n\t    // No items to select.\n\t    canSelectNext = false;\n\t    canSelectPrevious = false;\n\t  } else if (element.selectionWraps) {\n\t    // Since there are items, can always go next/previous.\n\t    canSelectNext = true;\n\t    canSelectPrevious = true;\n\t  } else {\n\t    var index = element.selectedIndex;\n\t    if (index < 0 && items.length > 0) {\n\t      // Special case. If there are items but no selection, declare that it's\n\t      // always possible to go next/previous to create a selection.\n\t      canSelectNext = true;\n\t      canSelectPrevious = true;\n\t    } else {\n\t      // Normal case: we have an index in a list that has items.\n\t      canSelectPrevious = index > 0;\n\t      canSelectNext = index < items.length - 1;\n\t    }\n\t  }\n\t  if (element.canSelectNext !== canSelectNext) {\n\t    element.canSelectNext = canSelectNext;\n\t  }\n\t  if (element.canSelectPrevious !== canSelectPrevious) {\n\t    element.canSelectPrevious = canSelectPrevious;\n\t  }\n\t}\n\n/***/ },\n/* 19 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if (\"value\" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };\n\t\n\tvar _SingleSelectionMixin2 = __webpack_require__(18);\n\t\n\tvar _SingleSelectionMixin3 = _interopRequireDefault(_SingleSelectionMixin2);\n\t\n\tvar _symbols = __webpack_require__(5);\n\t\n\tvar _symbols2 = _interopRequireDefault(_symbols);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\t/*\n\t * A very simple component to show the application of SingleSelectionMixin.\n\t *\n\t * For a more complete demo using SingleSelectionMixin, see the ListBox demo.\n\t */\n\tvar SingleSelectionDemo = function (_SingleSelectionMixin) {\n\t  _inherits(SingleSelectionDemo, _SingleSelectionMixin);\n\t\n\t  function SingleSelectionDemo() {\n\t    _classCallCheck(this, SingleSelectionDemo);\n\t\n\t    var _this = _possibleConstructorReturn(this, (SingleSelectionDemo.__proto__ || Object.getPrototypeOf(SingleSelectionDemo)).call(this));\n\t\n\t    _this.addEventListener('mousedown', function (event) {\n\t      _this[_symbols2.default.raiseChangeEvents] = true;\n\t      _this.selectedItem = event.target;\n\t      event.stopPropagation();\n\t      _this[_symbols2.default.raiseChangeEvents] = false;\n\t    });\n\t    return _this;\n\t  }\n\t\n\t  _createClass(SingleSelectionDemo, [{\n\t    key: 'attributeChangedCallback',\n\t    value: function attributeChangedCallback(attributeName, oldValue, newValue) {\n\t      if (_get(SingleSelectionDemo.prototype.__proto__ || Object.getPrototypeOf(SingleSelectionDemo.prototype), 'attributeChangedCallback', this)) {\n\t        _get(SingleSelectionDemo.prototype.__proto__ || Object.getPrototypeOf(SingleSelectionDemo.prototype), 'attributeChangedCallback', this).call(this, attributeName, oldValue, newValue);\n\t      }\n\t      if (attributeName === 'selected-index') {\n\t        this.selectedIndex = newValue;\n\t      }\n\t    }\n\t\n\t    // Map item selection to a `selected` CSS class.\n\t\n\t  }, {\n\t    key: _symbols2.default.itemSelected,\n\t    value: function value(item, selected) {\n\t      if (_get(SingleSelectionDemo.prototype.__proto__ || Object.getPrototypeOf(SingleSelectionDemo.prototype), _symbols2.default.itemSelected, this)) {\n\t        _get(SingleSelectionDemo.prototype.__proto__ || Object.getPrototypeOf(SingleSelectionDemo.prototype), _symbols2.default.itemSelected, this).call(this, item, selected);\n\t      }\n\t      item.classList.toggle('selected', selected);\n\t    }\n\t\n\t    // Simplistic implementation of items property — doesn't handle redistribution.\n\t\n\t  }, {\n\t    key: 'items',\n\t    get: function get() {\n\t      return this.children;\n\t    }\n\t  }], [{\n\t    key: 'observedAttributes',\n\t    get: function get() {\n\t      return ['selected-index'];\n\t    }\n\t  }]);\n\t\n\t  return SingleSelectionDemo;\n\t}((0, _SingleSelectionMixin3.default)(HTMLElement));\n\t\n\texports.default = SingleSelectionDemo;\n\t\n\t\n\tcustomElements.define('single-selection-demo', SingleSelectionDemo);\n\n/***/ }\n/******/ ]);\n\n\n// WEBPACK FOOTER //\n// demos.min.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap d7f9c65a89ab5f9c486a","/*\n * This is currently a demo of how multiple mixins cooperate to perform useful\n * functions.\n *\n * * The component uses ShadowTemplateMixin to populate its shadow root.\n * * A user can click on a child item, and ClickSelectionMixin will set the\n *   selected item.\n * * The SingleSelectionMixin will track the selected item, and map that to\n *   changes in the selection state of the selected/deselected items.\n * * The SelectionAriaMixin will reflect an item's selection state using ARIA\n *   attributes to support assistive devices like screen readers.\n *\n * This demo will eventually evolve into a complete list box component, but\n * at the moment omits many features, including support for Page Up/Page Down\n * keys, keeping the selected item in view, the ability to select an item\n * by typing its initial characters, and support for slot elements as children.\n */\n\n\nimport DefaultSlotContentMixin from '../../elix-mixins/src/DefaultSlotContentMixin';\nimport ClickSelectionMixin from '../../elix-mixins/src/ClickSelectionMixin';\nimport ContentItemsMixin from '../../elix-mixins/src/ContentItemsMixin';\nimport DirectionSelectionMixin from '../../elix-mixins/src/DirectionSelectionMixin';\nimport KeyboardDirectionMixin from '../../elix-mixins/src/KeyboardDirectionMixin';\nimport KeyboardMixin from '../../elix-mixins/src/KeyboardMixin';\nimport KeyboardPagedSelectionMixin from '../../elix-mixins/src/KeyboardPagedSelectionMixin';\nimport KeyboardPrefixSelectionMixin from '../../elix-mixins/src/KeyboardPrefixSelectionMixin';\nimport SelectionAriaMixin from '../../elix-mixins/src/SelectionAriaMixin';\nimport SelectionInViewMixin from '../../elix-mixins/src/SelectionInViewMixin';\nimport ShadowTemplateMixin from '../../elix-mixins/src/ShadowTemplateMixin';\nimport SingleSelectionMixin from '../../elix-mixins/src/SingleSelectionMixin';\nimport symbols from '../../elix-mixins/src/symbols';\n\n\n// We want to apply a number of mixin functions to HTMLElement.\nconst mixins = [\n  DefaultSlotContentMixin,\n  ClickSelectionMixin,\n  ContentItemsMixin,\n  DirectionSelectionMixin,\n  KeyboardDirectionMixin,\n  KeyboardMixin,\n  KeyboardPagedSelectionMixin,\n  KeyboardPrefixSelectionMixin,\n  SelectionAriaMixin,\n  SelectionInViewMixin,\n  ShadowTemplateMixin,\n  SingleSelectionMixin\n];\n\n// The mixins are functions, so an efficient way to apply them all is with\n// reduce. This is just function composition. We end up with a base class we\n// can extend below.\nconst base = mixins.reduce((cls, mixin) => mixin(cls), HTMLElement);\n\n\n/**\n * A simple single-selection list box.\n *\n * This uses the base class we just created above, and adds in the behavior\n * unique to this list box element. As it turns out, much of this behavior is\n * also interesting to other components, and will eventually get factored into\n * other mixins.\n *\n * @extends HTMLElement\n * @mixes DefaultSlotContentMixin\n * @mixes ClickSelectionMixin\n * @mixes ContentItemsMixin\n * @mixes DirectionSelectionMixin\n * @mixes KeyboardDirectionMixin\n * @mixes KeyboardMixin\n * @mixes KeyboardPagedSelectionMixin\n * @mixes KeyboardPrefixSelectionMixin\n * @mixes SelectionAriaMixin\n * @mixes SelectionInViewMixin\n * @mixes ShadowTemplateMixin\n * @mixes SingleSelectionMixin\n */\nclass ListBox extends base {\n\n  // Map attribute changes to the corresponding property.\n  attributeChangedCallback(attributeName, oldValue, newValue) {\n    if (super.attributeChangedCallback) { super.attributeChangedCallback(attributeName, oldValue, newValue); }\n    const mapAttributeToProperty = {\n      'selected-index': 'selectedIndex'\n    };\n    const propertyName = mapAttributeToProperty[attributeName] || attributeName;\n    this[propertyName] = newValue;\n  }\n\n  // We define a collection of default property values which can be set in\n  // the constructor or connectedCallback. Defining the actual default values\n  // in those calls would complicate things if a subclass someday wants to\n  // define its own default value.\n  get [symbols.defaults]() {\n    const defaults = super[symbols.defaults] || {};\n    // By default, we assume the list presents list items vertically.\n    defaults.orientation = 'vertical';\n    return defaults;\n  }\n\n  // Map item selection to a `selected` CSS class.\n  [symbols.itemSelected](item, selected) {\n    if (super[symbols.itemSelected]) { super[symbols.itemSelected](item, selected); }\n    item.classList.toggle('selected', selected);\n  }\n\n  // Tell the browser which attributes we want to handle.\n  static get observedAttributes() {\n    return ['orientation', 'selected-index'];\n  }\n\n  /**\n   * The vertical (default) or horizontal orientation of the list.\n   *\n   * Supported values are \"horizontal\" or \"vertical\".\n   *\n   * @type {string}\n   */\n  get orientation() {\n    return this[symbols.orientation] || this[symbols.defaults].orientation;\n  }\n  set orientation(value) {\n    const changed = value !== this[symbols.orientation];\n    this[symbols.orientation] = value;\n    if ('orientation' in base) { super.orientation = value; }\n    // Reflect attribute for styling\n    if (this.getAttribute('orientation') !== value) {\n      this.setAttribute('orientation', value);\n    }\n    if (changed && this[symbols.raiseChangeEvents]) {\n      const event = new CustomEvent('orientation-changed');\n      this.dispatchEvent(event);\n    }\n  }\n\n  // Define a template that will be stamped into the Shadow DOM by the\n  // ShadowTemplateMixin.\n  get [symbols.template]() {\n    return `\n      <style>\n      :host {\n        border: 1px solid gray;\n        box-sizing: border-box;\n        cursor: default;\n        display: flex;\n        -webkit-tap-highlight-color: rgba(0, 0, 0, 0);\n      }\n\n      #itemsContainer {\n        flex: 1;\n        -webkit-overflow-scrolling: touch; /* for momentum scrolling */\n        overflow-x: hidden;\n        overflow-y: scroll;\n      }\n      :host([orientation=\"horizontal\"]) #itemsContainer {\n        display: flex;\n        overflow-x: scroll;\n        overflow-y: hidden;\n      }\n\n      #itemsContainer ::slotted(*) {\n        cursor: default;\n        padding: 0.25em;\n        -webkit-user-select: none;\n        -moz-user-select: none;\n        -ms-user-select: none;\n        user-select: none;\n      }\n\n      #itemsContainer ::slotted(.selected) {\n        background: var(--elix-selected-background, highlight);\n        color: var(--elix-selected-color, highlighttext);\n      }\n      </style>\n\n      <div id=\"itemsContainer\" role=\"none\">\n        <slot></slot>\n      </div>\n    `;\n  }\n\n  /**\n   * Fires when the orientation property changes in response to internal\n   * component activity.\n   *\n   * @memberof ListBox\n   * @event orientation-changed\n   */\n}\n\n\ncustomElements.define('sample-list-box', ListBox);\nexport default ListBox;\n\n\n\n// WEBPACK FOOTER //\n// ./elements/demos/src/ListBox.js","import { assignedChildren } from './content';\nimport Symbol from './Symbol';\nimport symbols from './symbols';\n\n\n// Symbols for private data members on an element.\nconst slotchangeFiredSymbol = Symbol('slotchangeFired');\n\n\n/**\n * Mixin which defines a component's `symbols.content` property as the flattened\n * set of nodes assigned to its default slot.\n *\n * This also provides notification of changes to a component's content. It\n * will invoke a `symbols.contentChanged` method when the component is first\n * instantiated, and whenever its distributed children change. This is intended\n * to satisfy the Gold Standard checklist item for monitoring\n * [Content Changes](https://github.com/webcomponents/gold-standard/wiki/Content-Changes).\n *\n * Example:\n *\n * ```\n * let base = DefaultSlotContentMixin(HTMLElement);\n * class CountingElement extends base {\n *\n *   constructor() {\n *     super();\n *     let root = this.attachShadow({ mode: 'open' });\n *     root.innerHTML = `<slot></slot>`;\n *     this[symbols.shadowCreated]();\n *   }\n *\n *   [symbols.contentChanged]() {\n *     if (super[symbols.contentChanged]) { super[symbols.contentChanged](); }\n *     // Count the component's children, both initially and when changed.\n *     this.count = this.distributedChildren.length;\n *   }\n *\n * }\n * ```\n *\n * To use this mixin, the component should define a default (unnamed) `slot`\n * element in its shadow subtree.\n *\n * To receive `contentChanged` notification, this mixin expects a component to\n * invoke a method called `symbols.shadowCreated` after the component's shadow\n * root has been created and populated.\n *\n * @module DefaultSlotContentMixin\n * @param base {Class} the base class to extend\n * @returns {Class} the extended class\n */\nexport default function DefaultSlotContentMixin(base) {\n\n  /**\n   * The class prototype added by the mixin.\n   */\n  class DefaultSlotContent extends base {\n\n    connectedCallback() {\n      if (super.connectedCallback) { super.connectedCallback(); }\n      // HACK for Blink, which doesn't correctly fire initial slotchange.\n      // See https://bugs.chromium.org/p/chromium/issues/detail?id=696659\n      setTimeout(() => {\n        // By this point, the slotchange event should have fired.\n        if (!this[slotchangeFiredSymbol]) {\n          // slotchange event didn't fire; we're in Blink. Force the invocation\n          // of contentChanged that would have happened on slotchange.\n          if (this[symbols.contentChanged]) {\n            this[symbols.contentChanged]();\n          }\n        }\n      });\n    }\n\n    /**\n     * The content of this component, defined to be the flattened set of\n     * nodes assigned to its default unnamed slot.\n     *\n     * @type {HTMLElement[]}\n     */\n    get [symbols.content]() {\n      const slot = defaultSlot(this);\n      return slot ?\n        slot.assignedNodes({ flatten: true }) :\n        [];\n    }\n\n    [symbols.shadowCreated]() {\n      if (super[symbols.shadowCreated]) { super[symbols.shadowCreated](); }\n      // Listen to changes on the default slot.\n      const slot = defaultSlot(this);\n      slot.addEventListener('slotchange', event => {\n        this[slotchangeFiredSymbol] = true;\n        if (this[symbols.contentChanged]) {\n          this[symbols.contentChanged]();\n        }\n      });\n    }\n  }\n\n  return DefaultSlotContent;\n}\n\n\nfunction defaultSlot(element) {\n  const defaultSlot = element.shadowRoot && element.shadowRoot.querySelector('slot:not([name])');\n  if (element.shadowRoot && !defaultSlot) {\n    console.warn(`DefaultSlotContentMixin expects a component to define a shadow tree that includes a default (unnamed) slot.`);\n  }\n  return defaultSlot;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./elements/elix-mixins/src/DefaultSlotContentMixin.js","/**\n * Helpers for accessing a component's content.\n *\n * @module content\n */\n\n/**\n * Return a set of Elements which are likely to be useful as component content.\n *\n * Given a `NodeList` or array of objects, this will return only those array\n * members that are: a) instances of `Element` (`HTMLElement` or `SVGElement`),\n * and b) not on a blacklist of normally invisible elements (such as `style` or\n * `script`). Among other things, this filters out Text nodes.\n *\n * @param {NodeList|Node[]} nodes - the list of nodes to filter\n * @returns {Element[]} - the filtered elements\n */\nexport function substantiveElements(nodes) {\n\n  // These are tags for elements that can appear in the document body, but do\n  // not seem to have any user-visible manifestation.\n  // See https://developer.mozilla.org/en-US/docs/Web/HTML/Element\n  const auxiliaryElementTags = [\n    'applet',         // deprecated\n    'basefont',       // deprecated\n    'embed',\n    'font',           // deprecated\n    'frame',          // deprecated\n    'frameset',       // deprecated\n    'isindex',        // deprecated\n    'keygen',         // deprecated\n    'link',\n    'multicol',       // deprecated\n    'nextid',         // deprecated\n    'noscript',\n    'object',\n    'param',\n    'script',\n    'style',\n    'template',\n    'noembed'         // deprecated\n  ];\n\n  return [].filter.call(nodes,\n    node => node instanceof Element &&\n        (!node.localName || auxiliaryElementTags.indexOf(node.localName) < 0)\n  );\n}\n\n\n\n// WEBPACK FOOTER //\n// ./elements/elix-mixins/src/content.js","/* The number of fake symbols we've served up */\nlet count = 0;\n\nfunction uniqueString(description) {\n  return `_${description}${count++}`;\n}\n\nconst symbolFunction = typeof window.Symbol === 'function' ?\n  window.Symbol :\n  uniqueString;\n\n/**\n * Polyfill for ES6 symbol class.\n *\n * Mixins and component classes often want to associate private data with an\n * element instance, but JavaScript does not have direct support for true\n * private properties. One approach is to use the\n * [Symbol](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol)\n * data type to set and retrieve data on an element.\n *\n * Unfortunately, the Symbol type is not available in Internet Explorer 11. In\n * lieu of returning a true Symbol, this polyfill returns a different string\n * each time it is called.\n *\n * Usage:\n *\n *     const fooSymbol = Symbol('foo');\n *\n *     class MyElement extends HTMLElement {\n *       get foo() {\n *         return this[fooSymbol];\n *       }\n *       set foo(value) {\n *         this[fooSymbol] = value;\n *       }\n *     }\n *\n * In IE 11, this sample will \"hide\" data behind an instance property that looks\n * like this._foo0. The underscore is meant to reduce (not eliminate) potential\n * accidental access, and the unique number at the end is mean to avoid (not\n * eliminate) naming conflicts.\n *\n * @function Symbol\n * @param {string} description - A string to identify the symbol when debugging\n * @returns {Symbol|string} — A Symbol (in ES6 browsers) or unique string ID (in\n * ES5).\n */\nexport default symbolFunction;\n\n\n\n// WEBPACK FOOTER //\n// ./elements/elix-mixins/src/Symbol.js","import Symbol from './Symbol';\n\n\n/**\n * A collection of (potentially polyfilled) Symbol objects for standard\n * component properties and methods.\n *\n * These Symbol objects are used to allow mixins and a component to internally\n * communicate, without exposing these properties and methods in the component's\n * public API.\n *\n * To use these Symbol objects in your own component, include this module and\n * then create a property or method whose key is the desired Symbol.\n *\n *     import 'SingleSelectionMixin' from 'elix-mixins/src/SingleSelectionMixin';\n *     import 'symbols' from 'elix-mixins/src/symbols';\n *\n *     class MyElement extends SingleSelectionMixin(HTMLElement) {\n *       [symbols.itemSelected](item, selected) {\n *         // This will be invoked whenever an item is selected/deselected.\n *       }\n *     }\n *\n * @module symbols\n */\nconst symbols = {\n\n  /**\n   * Symbols for the `content` property.\n   *\n   * This property returns the component's content -- however the component\n   * wants to define that. This could, for example, return the component's\n   * distributed children.\n   *\n   * @type {HTMLElement[]}\n   */\n  content: Symbol('content'),\n\n  /**\n   * Symbol for the `contentChanged` method.\n   *\n   * For components that define a `content` property, this method should be\n   * invoked when that property changes.\n   *\n   * @function contentChanged\n   */\n  contentChanged: Symbol('contentChanged'),\n\n  /**\n   * Symbol for the `defaults` property.\n   *\n   * This property can be used to set or override defaults that will be applied\n   * to a new component instance. When implementing this property, take care to\n   * first acquire any defaults defined by the superclass. The standard idiom is\n   * as follows:\n   *\n   *     get [symbols.defaults]() {\n   *       const defaults = super[symbols.defaults] || {};\n   *       // Set or override default values here\n   *       defaults.customProperty = false;\n   *       return defaults;\n   *     }\n   *\n   * @var {object} defaults\n   */\n  defaults: Symbol('defaults'),\n\n  /**\n   * Symbol for the `getItemText` method.\n   *\n   * This method can be applied to an item to return its text.\n   *\n   * @function getText\n   * @param {HTMLElement} item - the item to extract text from\n   * @returns {string} - the text of the item\n   */\n  getItemText: Symbol('getText'),\n\n  /**\n   * Symbol for the `goDown` method.\n   *\n   * This method is invoked when the user wants to go/navigate down.\n   *\n   * @function goDown\n   */\n  goDown: Symbol('goDown'),\n\n  /**\n   * Symbol for the `goEnd` method.\n   *\n   * This method is invoked when the user wants to go/navigate to the end (e.g.,\n   * of a list).\n   *\n   * @function goEnd\n   */\n  goEnd: Symbol('goEnd'),\n\n  /**\n   * Symbol for the `goLeft` method.\n   *\n   * This method is invoked when the user wants to go/navigate left.\n   *\n   * @function goLeft\n   */\n  goLeft: Symbol('goLeft'),\n\n  /**\n   * Symbol for the `goRight` method.\n   *\n   * This method is invoked when the user wants to go/navigate right.\n   *\n   * @function goRight\n   */\n  goRight: Symbol('goRight'),\n\n  /**\n   * Symbol for the `goStart` method.\n   *\n   * This method is invoked when the user wants to go/navigate to the start\n   * (e.g., of a list).\n   *\n   * @function goStart\n   */\n  goStart: Symbol('goStart'),\n\n  /**\n   * Symbol for the `goUp` method.\n   *\n   * This method is invoked when the user wants to go/navigate up.\n   *\n   * @function goUp\n   */\n  goUp: Symbol('goUp'),\n\n  /**\n   * Symbol for the `itemAdded` method.\n   *\n   * This method is invoked when a new item is added to a list.\n   *\n   * @function itemAdded\n   * @param {HTMLElement} item - the item being selected/deselected\n   */\n  itemAdded: Symbol('itemAdded'),\n\n  /**\n   * Symbol for the `itemsChanged` method.\n   *\n   * This method is invoked when the underlying contents change. It is also\n   * invoked on component initialization – since the items have \"changed\" from\n   * being nothing.\n   *\n   * @function itemsChanged\n   */\n  itemsChanged: Symbol('itemsChanged'),\n\n  /**\n   * Symbol for the `itemSelected` method.\n   *\n   * This method is invoked when an item becomes selected or deselected.\n   *\n   * @function itemSelected\n   * @param {HTMLElement} item - the item being selected/deselected\n   * @param {boolean} selected - true if the item is selected, false if not\n   */\n  itemSelected: Symbol('itemSelected'),\n\n  /**\n   * Symbol for the `keydown` method.\n   *\n   * This method is invoked when an element receives a `keydown` event.\n   *\n   * @function keydown\n   * @param {KeyboardEvent} event - the event being processed\n   */\n  keydown: Symbol('keydown'),\n\n  /**\n   * Indicates the general horizontal and/or vertical orientation of the\n   * component. This may affect both presentation and behavior (e.g., of\n   * keyboard navigation).\n   *\n   * Accepted values are \"horizontal\", \"vertical\", or \"both\" (the default).\n   *\n   * @type {string}\n   */\n  orientation: Symbol('orientation'),\n\n  /**\n   * Symbol for the `raiseChangeEvents` property.\n   *\n   * This property is used by mixins to determine whether they should raise\n   * property change events. The standard HTML pattern is to only raise such\n   * events in response to direct user interactions. For a detailed discussion\n   * of this point, see the Gold Standard checklist item for\n   * [Propery Change Events](https://github.com/webcomponents/gold-standard/wiki/Property%20Change%20Events).\n   *\n   * The above article describes a pattern for using a flag to track whether\n   * work is being performed in response to internal component activity, and\n   * whether the component should therefore raise property change events.\n   * This `raiseChangeEvents` symbol is a shared flag used for that purpose by\n   * all Elix mixins and components. Sharing this flag ensures that internal\n   * activity (e.g., a UI event listener) in one mixin can signal other mixins\n   * handling affected properties to raise change events.\n   *\n   * All UI event listeners (and other forms of internal handlers, such as\n   * timeouts and async network handlers) should set `raiseChangeEvents` to\n   * `true` at the start of the event handler, then `false` at the end:\n   *\n   *     this.addEventListener('click', event => {\n   *       this[symbols.raiseChangeEvents] = true;\n   *       // Do work here, possibly setting properties, like:\n   *       this.foo = 'Hello';\n   *       this[symbols.raiseChangeEvents] = false;\n   *     });\n   *\n   * Elsewhere, property setters that raise change events should only do so it\n   * this property is `true`:\n   *\n   *     set foo(value) {\n   *       // Save foo value here, do any other work.\n   *       if (this[symbols.raiseChangeEvents]) {\n   *         const event = new CustomEvent('foo-changed');\n   *         this.dispatchEvent(event);\n   *       }\n   *     }\n   *\n   * In this way, programmatic attempts to set the `foo` property will not\n   * trigger the `foo-changed` event, but UI interactions that update that\n   * property will cause those events to be raised.\n   *\n   * @var {boolean} raiseChangeEvents\n   */\n  raiseChangeEvents: Symbol('raiseChangeEvents'),\n\n  /**\n   * Symbol for the `shadowCreated` method.\n   *\n   * This method is invoked when the component's shadow root has been attached\n   * and populated. Other code can handle this method to perform initialization\n   * that depends upon the existence of a populated shadow subtree.\n   *\n   * @function shadowCreated\n   */\n  shadowCreated: Symbol('shadowCreated'),\n\n  /**\n   * Symbol for the `template` property.\n   *\n   * This property returns a component's template.\n   *\n   * @type {string|HTMLTemplateElement}\n   */\n  template: Symbol('template')\n};\n\nexport default symbols;\n\n\n\n// WEBPACK FOOTER //\n// ./elements/elix-mixins/src/symbols.js","import symbols from './symbols';\n\n\n/**\n * Mixin which maps a click (actually, a mousedown) to a selection.\n *\n * This simple mixin is useful in list box-like elements, where a click on a\n * list item implicitly selects it.\n *\n * The standard use for this mixin is in list-like elements. Native list\n * boxes don't appear to be consistent with regard to whether they select\n * on mousedown or click/mouseup. This mixin assumes the use of mousedown.\n * On touch devices, that event appears to trigger when the touch is *released*.\n *\n * This mixin only listens to mousedown events for the primary mouse button\n * (typically the left button). Right-clicks are ignored so that the browser\n * may display a context menu.\n *\n * Much has been written about how to ensure \"fast tap\" behavior on mobile\n * devices. This mixin makes a very straightforward use of a standard event, and\n * this appears to perform well on mobile devices when, e.g., the viewport is\n * configured with `width=device-width`.\n *\n * This mixin expects the component to provide an `items` property. It also\n * expects the component to define a `selectedItem` property; you can provide\n * that yourself, or use [SingleSelectionMixin](SingleSelectionMixin.md).\n *\n * If the component receives a clicks that doesn't correspond to an item (e.g.,\n * the user clicks on the element background visible between items), the\n * selection will be removed. However, if the component defines a\n * `selectionRequired` and this is true, a background click will *not* remove\n * the selection.\n *\n * @module ClickSelectionMixin\n * @param base {Class} the base class to extend\n * @returns {Class} the extended class\n */\nexport default function ClickSelectionMixin(base) {\n\n  /**\n   * The class prototype added by the mixin.\n   */\n  class ClickSelection extends base {\n\n    constructor() {\n      super();\n      this.addEventListener('mousedown', event => {\n\n        // Only process events for the main (usually left) button.\n        if (event.button !== 0) {\n          return;\n        }\n\n        this[symbols.raiseChangeEvents] = true;\n\n        // If the item clicked on is a button, the event seems to be raised in\n        // phase 2 (AT_TARGET) — but the event target will be the component, not\n        // the item that was clicked on.\n        const target = event.target === this ?\n          event.path[0] : // Event target isn't the item, so get it from path.\n          event.target;\n\n        // Find which item was clicked on and, if found, select it. For elements\n        // which don't require a selection, a background click will determine\n        // the item was null, in which we case we'll remove the selection.\n        const item = itemForTarget(this, target);\n        if (item || !this.selectionRequired) {\n\n          if (!('selectedItem' in this)) {\n            console.warn(`ClickSelectionMixin expects a component to define a \"selectedItem\" property.`);\n          } else {\n            this.selectedItem = item;\n          }\n\n          // We don't call preventDefault here. The default behavior for\n          // mousedown includes setting keyboard focus if the element doesn't\n          // already have the focus, and we want to preserve that behavior.\n          event.stopPropagation();\n        }\n\n        this[symbols.raiseChangeEvents] = false;\n      });\n    }\n\n  }\n\n  return ClickSelection;\n}\n\n\n/*\n * Return the list item that is, or contains, the indicated target element.\n * Return null if not found.\n */\nfunction itemForTarget(listElement, target) {\n  const items = listElement.items;\n  const itemCount = items ? items.length : 0;\n  for (let i = 0; i < itemCount; i++) {\n    let item = items[i];\n    if (item === target || item.contains(target)) {\n      return item;\n    }\n  }\n  return null;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./elements/elix-mixins/src/ClickSelectionMixin.js","import * as content from './content';\nimport Symbol from './Symbol';\nimport symbols from './symbols';\n\n\n// Symbols for private data members on an element.\nconst itemsSymbol = Symbol('items');\nconst itemInitializedSymbol = Symbol('itemInitialized');\n\n\n/**\n * Mixin which maps content semantics (nodes) to list item semantics.\n *\n * Items differ from nodes contents in several ways:\n *\n * * They are often referenced via index.\n * * They may have a selection state.\n * * It's common to do work to initialize the appearance or state of a new\n *   item.\n * * Text nodes are filtered out.\n * * Auxiliary invisible child elements are filtered out and not counted as\n *   items. Auxiliary elements include link, script, style, and template\n *   elements. This filtering ensures that those auxiliary elements can be\n *   used in markup inside of a list without being treated as list items.\n *\n * This mixin expects a component to provide a `content` property returning a\n * raw set of elements. You can provide that yourself, or use\n * [DefaultSlotContentMixin](DefaultSlotContentMixin.md).\n *\n * The most commonly referenced property defined by this mixin is the `items`\n * property. To avoid having to do work each time that property is requested,\n * this mixin supports an optimized mode. If you invoke the `contentChanged`\n * method when the set of items changes, the mixin concludes that you'll take\n * care of notifying it of future changes, and turns on the optimization. With\n * that on, the mixin saves a reference to the computed set of items, and will\n * return that immediately on subsequent calls to the `items` property. If you\n * use this mixin in conjunction with `DefaultSlotContentMixin`, the\n * `contentChanged` method will be invoked for you when the element's children\n * change, turning on the optimization automatically.\n *\n * @module ContentItemsMixin\n * @param base {Class} the base class to extend\n * @returns {Class} the extended class\n */\nexport default function ContentItemsMixin(base) {\n\n  /**\n   * The class prototype added by the mixin.\n   */\n  class ContentItems extends base {\n\n    [symbols.contentChanged]() {\n      if (super[symbols.contentChanged]) { super[symbols.contentChanged](); }\n\n      // Since we got the contentChanged call, we'll assume we'll be notified if\n      // the set of items changes later. We turn on memoization of the items\n      // property by setting our internal property to null (instead of\n      // undefined).\n      this[itemsSymbol] = null;\n\n      this[symbols.itemsChanged]();\n    }\n\n    /**\n     * The current set of items in the list. See the top-level documentation for\n     * mixin for a description of how items differ from plain content.\n     *\n     * @type {HTMLElement[]}\n     */\n    get items() {\n      let items;\n      if (this[itemsSymbol] == null) {\n        items = content.substantiveElements(this[symbols.content]);\n        // Note: test for *equality* with null, since we use `undefined` to\n        // indicate that we're not yet caching items.\n        if (this[itemsSymbol] === null) {\n          // Memoize the set of items.\n          this[itemsSymbol] = items;\n        }\n      } else {\n        // Return the memoized items.\n        items = this[itemsSymbol];\n      }\n      return items;\n    }\n\n    /**\n     * This method is invoked when the underlying contents change. It is also\n     * invoked on component initialization – since the items have \"changed\" from\n     * being nothing.\n     */\n    [symbols.itemsChanged]() {\n      if (super[symbols.itemsChanged]) { super[symbols.itemsChanged](); }\n\n      // Perform per-item initialization if `itemAdded` is defined.\n      if (this[symbols.itemAdded]) {\n        Array.prototype.forEach.call(this.items, item => {\n          if (!item[itemInitializedSymbol]) {\n            this[symbols.itemAdded](item);\n            item[itemInitializedSymbol] = true;\n          }\n        });\n      }\n\n      if (this[symbols.raiseChangeEvents]) {\n        this.dispatchEvent(new CustomEvent('items-changed'));\n      }\n    }\n\n    /**\n     * Fires when the items in the list change.\n     *\n     * @memberof ContentItems\n     * @event items-changed\n     */\n  }\n\n  return ContentItems;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./elements/elix-mixins/src/ContentItemsMixin.js","import symbols from './symbols';\n\n\n/**\n * Mixin which maps direction semantics (goLeft, goRight, etc.) to selection\n * semantics (selectPrevious, selectNext, etc.).\n *\n * This mixin can be used in conjunction with\n * [KeyboardDirectionMixin](KeyboardDirectionMixin.md) (which maps keyboard\n * events to directions) and a mixin that handles selection like\n * [SingleSelectionMixin](SingleSelectionMixin.md).\n *\n * @module DirectionSelectionMixin\n * @param base {Class} the base class to extend\n * @returns {Class} the extended class\n */\nexport default function DirectionSelectionMixin(base) {\n\n  /**\n   * The class prototype added by the mixin.\n   */\n  class DirectionSelection extends base {\n\n    [symbols.goDown]() {\n      if (super[symbols.goDown]) { super[symbols.goDown](); }\n      if (!this.selectNext) {\n        console.warn(`DirectionSelectionMixin expects a component to define a \"selectNext\" method.`);\n      } else {\n        return this.selectNext();\n      }\n    }\n\n    [symbols.goEnd]() {\n      if (super[symbols.goEnd]) { super[symbols.goEnd](); }\n      if (!this.selectLast) {\n        console.warn(`DirectionSelectionMixin expects a component to define a \"selectLast\" method.`);\n      } else {\n        return this.selectLast();\n      }\n    }\n\n    [symbols.goLeft]() {\n      if (super[symbols.goLeft]) { super[symbols.goLeft](); }\n      if (!this.selectPrevious) {\n        console.warn(`DirectionSelectionMixin expects a component to define a \"selectPrevious\" method.`);\n      } else {\n        return this.selectPrevious();\n      }\n    }\n\n    [symbols.goRight]() {\n      if (super[symbols.goRight]) { super[symbols.goRight](); }\n      if (!this.selectNext) {\n        console.warn(`DirectionSelectionMixin expects a component to define a \"selectNext\" method.`);\n      } else {\n        return this.selectNext();\n      }\n    }\n\n    [symbols.goStart]() {\n      if (super[symbols.goStart]) { super[symbols.goStart](); }\n      if (!this.selectFirst) {\n        console.warn(`DirectionSelectionMixin expects a component to define a \"selectFirst\" method.`);\n      } else {\n        return this.selectFirst();\n      }\n    }\n\n    [symbols.goUp]() {\n      if (super[symbols.goUp]) { super[symbols.goUp](); }\n      if (!this.selectPrevious) {\n        console.warn(`DirectionSelectionMixin expects a component to define a \"selectPrevious\" method.`);\n      } else {\n        return this.selectPrevious();\n      }\n    }\n\n  }\n\n  return DirectionSelection;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./elements/elix-mixins/src/DirectionSelectionMixin.js","import symbols from './symbols';\n\n\n/**\n * Mixin which maps direction keys (Left, Right, etc.) to direction semantics\n * (go left, go right, etc.).\n *\n * This mixin expects the component to invoke a `keydown` method when a key is\n * pressed. You can use [KeyboardMixin](KeyboardMixin.md) for that\n * purpose, or wire up your own keyboard handling and call `keydown` yourself.\n *\n * This mixin calls methods such as `goLeft` and `goRight`. You can define\n * what that means by implementing those methods yourself. If you want to use\n * direction keys to navigate a selection, use this mixin with\n * [DirectionSelectionMixin](DirectionSelectionMixin.md).\n *\n * If the component defines a property called `symbols.orientation`, the value\n * of that property will constrain navigation to the horizontal or vertical axis.\n *\n * @module KeyboardDirectionMixin\n * @param base {Class} the base class to extend\n * @returns {Class} the extended class\n */\nexport default function KeyboardDirectionMixin(base) {\n\n  /**\n   * The class prototype added by the mixin.\n   */\n  class KeyboardDirection extends base {\n\n    /**\n     * Invoked when the user wants to go/navigate down.\n     * The default implementation of this method does nothing.\n     */\n    [symbols.goDown]() {\n      if (super[symbols.goDown]) { return super[symbols.goDown](); }\n    }\n\n    /**\n     * Invoked when the user wants to go/navigate to the end (e.g., of a list).\n     * The default implementation of this method does nothing.\n     */\n    [symbols.goEnd]() {\n      if (super[symbols.goEnd]) { return super[symbols.goEnd](); }\n    }\n\n    /**\n     * Invoked when the user wants to go/navigate left.\n     * The default implementation of this method does nothing.\n     */\n    [symbols.goLeft]() {\n      if (super[symbols.goLeft]) { return super[symbols.goLeft](); }\n    }\n\n    /**\n     * Invoked when the user wants to go/navigate right.\n     * The default implementation of this method does nothing.\n     */\n    [symbols.goRight]() {\n      if (super[symbols.goRight]) { return super[symbols.goRight](); }\n    }\n\n    /**\n     * Invoked when the user wants to go/navigate to the start (e.g., of a\n     * list). The default implementation of this method does nothing.\n     */\n    [symbols.goStart]() {\n      if (super[symbols.goStart]) { return super[symbols.goStart](); }\n    }\n\n    /**\n     * Invoked when the user wants to go/navigate up.\n     * The default implementation of this method does nothing.\n     */\n    [symbols.goUp]() {\n      if (super[symbols.goUp]) { return super[symbols.goUp](); }\n    }\n\n    [symbols.keydown](event) {\n      let handled = false;\n\n      const orientation = this[symbols.orientation] || 'both';\n      const horizontal = (orientation === 'horizontal' || orientation === 'both');\n      const vertical = (orientation === 'vertical' || orientation === 'both');\n\n      // Ignore Left/Right keys when metaKey or altKey modifier is also pressed,\n      // as the user may be trying to navigate back or forward in the browser.\n      switch (event.keyCode) {\n        case 35: // End\n          handled = this[symbols.goEnd]();\n          break;\n        case 36: // Home\n          handled = this[symbols.goStart]();\n          break;\n        case 37: // Left\n          if (horizontal && !event.metaKey && !event.altKey) {\n            handled = this[symbols.goLeft]();\n          }\n          break;\n        case 38: // Up\n          if (vertical) {\n            handled = event.altKey ? this[symbols.goStart]() : this[symbols.goUp]();\n          }\n          break;\n        case 39: // Right\n          if (horizontal && !event.metaKey && !event.altKey) {\n            handled = this[symbols.goRight]();\n          }\n          break;\n        case 40: // Down\n          if (vertical) {\n            handled = event.altKey ? this[symbols.goEnd]() : this[symbols.goDown]();\n          }\n          break;\n      }\n      // Prefer mixin result if it's defined, otherwise use base result.\n      return handled || (super[symbols.keydown] && super[symbols.keydown](event)) || false;\n    }\n\n  }\n\n  return KeyboardDirection;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./elements/elix-mixins/src/KeyboardDirectionMixin.js","import symbols from './symbols';\n\n\n/**\n * Mixin which manages the keydown handling for a component.\n *\n * This mixin handles several keyboard-related features.\n *\n * First, it wires up a single keydown event handler that can be shared by\n * multiple mixins on a component. The event handler will invoke a `keydown`\n * method with the event object, and any mixin along the prototype chain that\n * wants to handle that method can do so.\n *\n * If a mixin wants to indicate that keyboard event has been handled, and that\n * other mixins should *not* handle it, the mixin's `keydown` handler should\n * return a value of true. The convention that seems to work well is that a\n * mixin should see if it wants to handle the event and, if not, then ask the\n * superclass to see if it wants to handle the event. This has the effect of\n * giving the mixin that was applied last the first chance at handling a\n * keyboard event.\n *\n * Example:\n *\n *     [symbols.keydown](event) {\n *       let handled;\n *       switch (event.keyCode) {\n *         // Handle the keys you want, setting handled = true if appropriate.\n *       }\n *       // Prefer mixin result if it's defined, otherwise use base result.\n *       return handled || (super[symbols.keydown] && super[symbols.keydown](event));\n *     }\n *\n * Until iOS Safari supports the `KeyboardEvent.key` property\n * (see http://caniuse.com/#search=keyboardevent.key), mixins should generally\n * test keys using the legacy `keyCode` property, not `key`.\n *\n * A second feature provided by this mixin is that it implicitly makes the\n * component a tab stop if it isn't already, by setting `tabIndex` to 0. This\n * has the effect of adding the component to the tab order in document order.\n *\n * @module KeyboardMixin\n * @param base {Class} the base class to extend\n * @returns {Class} the extended class\n */\nexport default function KeyboardMixin(base) {\n\n  /**\n   * The class prototype added by the mixin.\n   */\n  class Keyboard extends base {\n\n    constructor() {\n      super();\n      this.addEventListener('keydown', event => {\n        this[symbols.raiseChangeEvents] = true;\n        const handled = this[symbols.keydown](event);\n        if (handled) {\n          event.preventDefault();\n          event.stopPropagation();\n        }\n        this[symbols.raiseChangeEvents] = false;\n      });\n    }\n\n    connectedCallback() {\n      if (super.connectedCallback) { super.connectedCallback(); }\n      if (this.getAttribute('tabindex') == null && this[symbols.defaults].tabindex !== null) {\n        this.setAttribute('tabindex', this[symbols.defaults].tabindex);\n      }\n    }\n\n    get [symbols.defaults]() {\n      const defaults = super[symbols.defaults] || {};\n      // The default tab index is 0 (document order).\n      defaults.tabindex = 0;\n      return defaults;\n    }\n\n    /**\n     * Handle the indicated keyboard event.\n     *\n     * The default implementation of this method does nothing. This will\n     * typically be handled by other mixins.\n     *\n     * @param {KeyboardEvent} event - the keyboard event\n     * @return {boolean} true if the event was handled\n     */\n    [symbols.keydown](event) {\n      if (super[symbols.keydown]) { return super[symbols.keydown](event); }\n    }\n\n  }\n\n  return Keyboard;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./elements/elix-mixins/src/KeyboardMixin.js","import defaultScrollTarget from './defaultScrollTarget';\nimport symbols from './symbols';\n\n\n/**\n * Mixin which maps page keys (Page Up, Page Down) into operations that move\n * the selection by one page.\n *\n * The keyboard interaction model generally follows that of Microsoft Windows'\n * list boxes instead of those in OS X:\n *\n * * The Page Up/Down and Home/End keys actually change the selection, rather\n *   than just scrolling. The former behavior seems more generally useful for\n *   keyboard users.\n *\n * * Pressing Page Up/Down will change the selection to the topmost/bottommost\n *   visible item if the selection is not already there. Thereafter, the key\n *   will move the selection up/down by a page, and (per the above point) make\n *   the selected item visible.\n *\n * To ensure the selected item is in view following use of Page Up/Down, use\n * the related [SelectionInViewMixin](SelectionInViewMixin.md).\n *\n * This mixin expects the component to provide:\n *\n * * A `[symbols.keydown]` method invoked when a key is pressed. You can use\n *   [KeyboardMixin](KeyboardMixin.md) for that purpose, or wire up your own\n *   keyboard handling and call `[symbols.keydown]` yourself.\n * * A `selectedIndex` property that indicates the index of the selected item.\n *\n * @module KeyboardPagedSelectionMixin\n * @param base {Class} the base class to extend\n * @returns {Class} the extended class\n */\nexport default function KeyboardPagedSelectionMixin(base) {\n\n  /**\n   * The class prototype added by the mixin.\n   */\n  class KeyboardPagedSelection extends base {\n\n    [symbols.keydown](event) {\n      let handled = false;\n      const orientation = this[symbols.orientation];\n      if (orientation !== 'horizontal') {\n        switch (event.keyCode) {\n          case 33: // Page Up\n          handled = this.pageUp();\n          break;\n          case 34: // Page Down\n          handled = this.pageDown();\n          break;\n        }\n      }\n      // Prefer mixin result if it's defined, otherwise use base result.\n      return handled || (super[symbols.keydown] && super[symbols.keydown](event));\n    }\n\n    /**\n     * Scroll down one page.\n     */\n    pageDown() {\n      if (super.pageDown) { super.pageDown(); }\n      return scrollOnePage(this, true);\n    }\n\n    /**\n     * Scroll up one page.\n     */\n    pageUp() {\n      if (super.pageUp) { super.pageUp(); }\n      return scrollOnePage(this, false);\n    }\n\n    /* Provide a default scrollTarget implementation if none exists. */\n    get [symbols.scrollTarget]() {\n      return super[symbols.scrollTarget] || defaultScrollTarget(this);\n    }\n\n  }\n\n  return KeyboardPagedSelection;\n}\n\n\n// Return the item whose content spans the given y position (relative to the\n// top of the list's scrolling client area), or null if not found.\n//\n// If downward is true, move down the list of items to find the first item\n// found at the given y position; if downward is false, move up the list of\n// items to find the last item at that position.\nfunction getIndexOfItemAtY(element, scrollTarget, y, downward) {\n\n  const items = element.items;\n  const start = downward ? 0 : items.length - 1;\n  const end = downward ? items.length : 0;\n  const step = downward ? 1 : -1;\n\n  const topOfClientArea = scrollTarget.offsetTop + scrollTarget.clientTop;\n\n  // Find the item spanning the indicated y coordinate.\n  let item;\n  let itemIndex = start;\n  let itemTop;\n  let found = false;\n  while (itemIndex !== end) {\n    item = items[itemIndex];\n    itemTop = item.offsetTop - topOfClientArea;\n    const itemBottom = itemTop + item.offsetHeight;\n    if (itemTop <= y && itemBottom >= y) {\n      // Item spans the indicated y coordinate.\n      found = true;\n      break;\n    }\n    itemIndex += step;\n  }\n\n  if (!found) {\n    return null;\n  }\n\n  // We may have found an item whose padding spans the given y coordinate,\n  // but whose content is actually above/below that point.\n  // TODO: If the item has a border, then padding should be included in\n  // considering a hit.\n  const itemStyle = getComputedStyle(item);\n  const itemPaddingTop = parseFloat(itemStyle.paddingTop);\n  const itemPaddingBottom = parseFloat(itemStyle.paddingBottom);\n  const contentTop = itemTop + item.clientTop + itemPaddingTop;\n  const contentBottom = contentTop + item.clientHeight - itemPaddingTop - itemPaddingBottom;\n  if (downward && contentTop <= y || !downward && contentBottom >= y) {\n    // The indicated coordinate hits the actual item content.\n    return itemIndex;\n  }\n  else {\n    // The indicated coordinate falls within the item's padding. Back up to\n    // the item below/above the item we found and return that.\n    return itemIndex - step;\n  }\n}\n\n// Move by one page downward (if downward is true), or upward (if false).\n// Return true if we ended up changing the selection, false if not.\nfunction scrollOnePage(element, downward) {\n\n  // Determine the item visible just at the edge of direction we're heading.\n  // We'll select that item if it's not already selected.\n  const scrollTarget = element[symbols.scrollTarget];\n  const edge = scrollTarget.scrollTop + (downward ? scrollTarget.clientHeight : 0);\n  const indexOfItemAtEdge = getIndexOfItemAtY(element, scrollTarget, edge, downward);\n\n  const selectedIndex = element.selectedIndex;\n  let newIndex;\n  if (indexOfItemAtEdge && selectedIndex === indexOfItemAtEdge) {\n    // The item at the edge was already selected, so scroll in the indicated\n    // direction by one page. Leave the new item at that edge selected.\n    const delta = (downward ? 1 : -1) * scrollTarget.clientHeight;\n    newIndex = getIndexOfItemAtY(element, scrollTarget, edge + delta, downward);\n  }\n  else {\n    // The item at the edge wasn't selected yet. Instead of scrolling, we'll\n    // just select that item. That is, the first attempt to page up/down\n    // usually just moves the selection to the edge in that direction.\n    newIndex = indexOfItemAtEdge;\n  }\n\n  if (!newIndex) {\n    // We can't find an item in the direction we want to travel. Select the\n    // last item (if moving downward) or first item (if moving upward).\n    newIndex = (downward ? element.items.length - 1 : 0);\n  }\n\n  if (newIndex !== selectedIndex) {\n    element.selectedIndex = newIndex;\n    return true; // We handled the page up/down ourselves.\n  }\n  else {\n    return false; // We didn't do anything.\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./elements/elix-mixins/src/KeyboardPagedSelectionMixin.js","/**\n * Return a guess as to what portion of the given element can be scrolled.\n * This can be used to provide a default implementation of\n * [symbols.scrollTarget].\n *\n * If the element has a shadow root containing a default (unnamed) slot, this\n * returns the first ancestor of that slot that has either `overflow-x` or\n * `overflow-y` styled as `auto` or `scroll`. If the element has no default\n * slot, or no scrolling ancestor is found, the element itself is returned.\n *\n * @type {HTMLElement}\n */\nexport default function defaultScrollTarget(element) {\n  const root = element.shadowRoot;\n  const slot = root && root.querySelector('slot:not([name])');\n  const scrollingParent = slot && getScrollingParent(slot.parentNode);\n  return scrollingParent || element;\n}\n\n\n// Return the parent of the given element that can be scrolled. If no such\n// element is found, return null.\nfunction getScrollingParent(element) {\n  if (element === null || element instanceof ShadowRoot) {\n    // Didn't find a scrolling parent.\n    return null;\n  }\n  const style = getComputedStyle(element);\n  const overflowX = style.overflowX;\n  const overflowY = style.overflowY;\n  if (overflowX === 'scroll' || overflowX === 'auto' ||\n      overflowY === 'scroll' || overflowY === 'auto') {\n    // Found an element we can scroll.\n    return element;\n  }\n  // Keep looking higher in the hierarchy for a scrolling parent.\n  return getScrollingParent(element.parentNode);\n}\n\n\n\n// WEBPACK FOOTER //\n// ./elements/elix-mixins/src/defaultScrollTarget.js","import constants from './constants';\nimport Symbol from './Symbol';\nimport symbols from './symbols';\n\n\n// Symbols for private data members on an element.\nconst itemTextContentsSymbol = Symbol('itemTextContents');\nconst typedPrefixSymbol = Symbol('typedPrefix');\nconst prefixTimeoutSymbol = Symbol('prefixTimeout');\nconst settingSelectionSymbol = Symbol('settingSelection');\n\n\n/**\n * Mixin that handles list box-style prefix typing, in which the user can type\n * a string to select the first item that begins with that string.\n *\n * Example: suppose a component using this mixin has the following items:\n *\n *     <sample-list-component>\n *       <div>Apple</div>\n *       <div>Apricot</div>\n *       <div>Banana</div>\n *       <div>Blackberry</div>\n *       <div>Blueberry</div>\n *       <div>Cantaloupe</div>\n *       <div>Cherry</div>\n *       <div>Lemon</div>\n *       <div>Lime</div>\n *     </sample-list-component>\n *\n * If this component receives the focus, and the user presses the \"b\" or \"B\"\n * key, the \"Banana\" item will be selected, because it's the first item that\n * matches the prefix \"b\". (Matching is case-insensitive.) If the user now\n * presses the \"l\" or \"L\" key quickly, the prefix to match becomes \"bl\", so\n * \"Blackberry\" will be selected.\n *\n * The prefix typing feature has a one second timeout — the prefix to match\n * will be reset after a second has passed since the user last typed a key.\n * If, in the above example, the user waits a second between typing \"b\" and\n * \"l\", the prefix will become \"l\", so \"Lemon\" would be selected.\n *\n * This mixin expects the component to invoke a `keydown` method when a key is\n * pressed. You can use [KeyboardMixin](KeyboardMixin.md) for that\n * purpose, or wire up your own keyboard handling and call `keydown` yourself.\n *\n * This mixin also expects the component to provide an `items` property. The\n * `textContent` of those items will be used for purposes of prefix matching.\n *\n * @module KeyboardPrefixSelectionMixin\n * @param base {Class} the base class to extend\n * @returns {Class} the extended class\n */\nexport default function KeyboardPrefixSelectionMixin(base) {\n\n  /**\n   * The class prototype added by the mixin.\n   */\n  class KeyboardPrefixSelection extends base {\n\n    // Default implementation returns an item's `alt` attribute or its\n    // `textContent`, in that order.\n    [symbols.getItemText](item) {\n      return item.getAttribute('alt') || item.textContent;\n    }\n\n    // If the set of items has changed, reset the prefix. We'll also need to\n    // rebuild our cache of item text the next time we're asked for it.\n    [symbols.itemsChanged]() {\n      if (super[symbols.itemsChanged]) { super[symbols.itemsChanged](); }\n      this[itemTextContentsSymbol] = null;\n      resetTypedPrefix(this);\n    }\n\n    [symbols.keydown](event) {\n      let handled;\n      let resetPrefix = true;\n\n      switch (event.keyCode) {\n        case 8: // Backspace\n          handleBackspace(this);\n          handled = true;\n          resetPrefix = false;\n          break;\n        case 27: // Escape\n          handled = true;\n          break;\n        default:\n          if (!event.ctrlKey && !event.metaKey && !event.altKey &&\n              event.which !== 32 /* Space */) {\n            handlePlainCharacter(this, String.fromCharCode(event.keyCode));\n          }\n          resetPrefix = false;\n      }\n\n      if (resetPrefix) {\n        resetTypedPrefix(this);\n      }\n\n      // Prefer mixin result if it's defined, otherwise use base result.\n      return handled || (super[symbols.keydown] && super[symbols.keydown](event));\n    }\n\n    get selectedIndex() {\n      return super.selectedIndex;\n    }\n    set selectedIndex(index) {\n      if ('selectedIndex' in base.prototype) { super.selectedIndex = index; }\n      if (!this[settingSelectionSymbol]) {\n        // Someone else (not this mixin) has changed the selection. In response,\n        // we invalidate the prefix under construction.\n        resetTypedPrefix(this);\n      }\n    }\n\n    /**\n     * Select the first item whose text content begins with the given prefix.\n     *\n     * @param prefix [String] The prefix string to search for\n     */\n    selectItemWithTextPrefix(prefix) {\n      if (super.selectItemWithTextPrefix) { super.selectItemWithTextPrefix(prefix); }\n      if (prefix == null || prefix.length === 0) {\n        return;\n      }\n      const index = getIndexOfItemWithTextPrefix(this, prefix);\n      if (index >= 0) {\n        // Update the selection. During that operation, set the flag that lets\n        // us know that we are the cause of the selection change. See note at\n        // this mixin's `selectedIndex` implementation.\n        this[settingSelectionSymbol] = true;\n        this.selectedIndex = index;\n        this[settingSelectionSymbol] = false;\n      }\n    }\n\n  }\n\n  return KeyboardPrefixSelection;\n}\n\n\n// Return the index of the first item with the given prefix, else -1.\nfunction getIndexOfItemWithTextPrefix(element, prefix) {\n  const itemTextContents = getItemTextContents(element);\n  const prefixLength = prefix.length;\n  for (let i = 0; i < itemTextContents.length; i++) {\n    const itemTextContent = itemTextContents[i];\n    if (itemTextContent.substr(0, prefixLength) === prefix) {\n      return i;\n    }\n  }\n  return -1;\n}\n\n// Return an array of the text content (in lowercase) of all items.\n// Cache these results.\nfunction getItemTextContents(element) {\n  if (!element[itemTextContentsSymbol]) {\n    const items = element.items;\n    element[itemTextContentsSymbol] = Array.prototype.map.call(items, item => {\n      const text = element[symbols.getItemText](item);\n      return text.toLowerCase();\n    });\n  }\n  return element[itemTextContentsSymbol];\n}\n\n// Handle the Backspace key: remove the last character from the prefix.\nfunction handleBackspace(element) {\n  const length = element[typedPrefixSymbol] ? element[typedPrefixSymbol].length : 0;\n  if (length > 0) {\n    element[typedPrefixSymbol] = element[typedPrefixSymbol].substr(0, length - 1);\n  }\n  element.selectItemWithTextPrefix(element[typedPrefixSymbol]);\n  setPrefixTimeout(element);\n}\n\n// Add a plain character to the prefix.\nfunction handlePlainCharacter(element, char) {\n  const prefix = element[typedPrefixSymbol] || '';\n  element[typedPrefixSymbol] = prefix + char.toLowerCase();\n  element.selectItemWithTextPrefix(element[typedPrefixSymbol]);\n  setPrefixTimeout(element);\n}\n\n// Stop listening for typing.\nfunction resetPrefixTimeout(element) {\n  if (element[prefixTimeoutSymbol]) {\n    clearTimeout(element[prefixTimeoutSymbol]);\n    element[prefixTimeoutSymbol] = false;\n  }\n}\n\n// Clear the prefix under construction.\nfunction resetTypedPrefix(element) {\n  element[typedPrefixSymbol] = '';\n  resetPrefixTimeout(element);\n}\n\n// Wait for the user to stop typing.\nfunction setPrefixTimeout(element) {\n  resetPrefixTimeout(element);\n  element[prefixTimeoutSymbol] = setTimeout(() => {\n    resetTypedPrefix(element);\n  }, constants.TYPING_TIMEOUT_DURATION);\n}\n\n\n\n// WEBPACK FOOTER //\n// ./elements/elix-mixins/src/KeyboardPrefixSelectionMixin.js","/**\n * A collection of constants used by Elix mixins and components for consistency\n * in things such as user interface timings.\n *\n * @module constants\n */\nconst constants = {\n\n  /**\n   * Time in milliseconds after which the user is considered to have stopped\n   * typing.\n   *\n   * @const {number} TYPING_TIMEOUT_DURATION\n   */\n  TYPING_TIMEOUT_DURATION: 1000\n\n};\n\n\nexport default constants;\n\n\n\n// WEBPACK FOOTER //\n// ./elements/elix-mixins/src/constants.js","import symbols from './symbols';\n\n\n// Used to assign unique IDs to item elements without IDs.\nlet idCount = 0;\n\n\n/**\n * Mixin which treats the selected item in a list as the active item in ARIA\n * accessibility terms.\n *\n * Handling ARIA selection state properly is actually quite complex:\n *\n * * The items in the list need to be indicated as possible items via an ARIA\n *   `role` attribute value such as \"option\".\n * * The selected item need to be marked as selected by setting the item's\n *   `aria-selected` attribute to true *and* the other items need be marked as\n *   *not* selected by setting `aria-selected` to false.\n * * The outermost element with the keyboard focus needs to have attributes\n *   set on it so that the selection is knowable at the list level via the\n *   `aria-activedescendant` attribute.\n * * Use of `aria-activedescendant` in turn requires that all items in the\n *   list have ID attributes assigned to them.\n *\n * This mixin tries to address all of the above requirements. To that end,\n * this mixin will assign generated IDs to any item that doesn't already have\n * an ID.\n *\n * ARIA relies on elements to provide `role` attributes. This mixin will apply\n * a default role of \"listbox\" on the outer list if it doesn't already have an\n * explicit role. Similarly, this mixin will apply a default role of \"option\"\n * to any list item that does not already have a role specified.\n *\n * This mixin expects a set of members that manage the state of the selection:\n * `[symbols.itemSelected]`, `[symbols.itemAdded]`, and `selectedItem`. You can\n * supply these yourself, or do so via\n * [SingleSelectionMixin](SingleSelectionMixin.md).\n *\n * @module\n * @param base {Class} the base class to extend\n * @returns {Class} the extended class\n */\nexport default function (base) {\n\n  /**\n   * The class prototype added by the mixin.\n   */\n  class SelectionAria extends base {\n\n    connectedCallback() {\n      if (super.connectedCallback) { super.connectedCallback(); }\n\n      // Set default ARIA role for the overall component.\n      if (this.getAttribute('role') == null && this[symbols.defaults].role) {\n        this.setAttribute('role', this[symbols.defaults].role);\n      }\n    }\n\n    get [symbols.defaults]() {\n      const defaults = super[symbols.defaults] || {};\n      defaults.role = 'listbox';\n      defaults.itemRole = 'option';\n      return defaults;\n    }\n\n    [symbols.itemAdded](item) {\n      if (super[symbols.itemAdded]) { super[symbols.itemAdded](item); }\n\n      if (!item.getAttribute('role')) {\n        // Assign a default ARIA role for an individual item.\n        item.setAttribute('role', this[symbols.defaults].itemRole);\n      }\n\n      // Ensure each item has an ID so we can set aria-activedescendant on the\n      // overall list whenever the selection changes.\n      //\n      // The ID will take the form of a base ID plus a unique integer. The base\n      // ID will be incorporate the component's own ID. E.g., if a component has\n      // ID \"foo\", then its items will have IDs that look like \"_fooOption1\". If\n      // the compnent has no ID itself, its items will get IDs that look like\n      // \"_option1\". Item IDs are prefixed with an underscore to differentiate\n      // them from manually-assigned IDs, and to minimize the potential for ID\n      // conflicts.\n      if (!item.id) {\n        const baseId = this.id ?\n            \"_\" + this.id + \"Option\" :\n            \"_option\";\n        item.id = baseId + idCount++;\n      }\n    }\n\n    [symbols.itemSelected](item, selected) {\n      if (super[symbols.itemSelected]) { super[symbols.itemSelected](item, selected); }\n      item.setAttribute('aria-selected', selected);\n      const itemId = item.id;\n      if (itemId && selected) {\n        this.setAttribute('aria-activedescendant', itemId);\n      }\n    }\n\n    get selectedItem() {\n      return super.selectedItem;\n    }\n    set selectedItem(item) {\n      if ('selectedItem' in base.prototype) { super.selectedItem = item; }\n      if (item == null) {\n        // Selection was removed.\n        this.removeAttribute('aria-activedescendant');\n      }\n    }\n\n  }\n\n  return SelectionAria;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./elements/elix-mixins/src/SelectionAriaMixin.js","import defaultScrollTarget from './defaultScrollTarget';\nimport symbols from './symbols';\n\n\n/**\n * Mixin which scrolls a container horizontally and/or vertically to ensure that\n * a newly-selected item is visible to the user.\n *\n * When the selected item in a list-like component changes, the selected item\n * should be brought into view so that the user can confirm their selection.\n *\n * This mixin expects a `selectedItem` property to be set when the selection\n * changes. You can supply that yourself, or use\n * [SingleSelectionMixin](SingleSelectionMixin.md).\n *\n * @module SelectinInViewMixin\n * @param base {Class} the base class to extend\n * @returns {Class} the extended class\n */\nexport default (base) => {\n\n  /**\n   * The class prototype added by the mixin.\n   */\n  class SelectionInView extends base {\n\n    connectedCallback() {\n      if (super.connectedCallback) { super.connectedCallback(); }\n      const selectedItem = this.selectedItem;\n      if (selectedItem) {\n        this.scrollItemIntoView(selectedItem);\n      }\n    }\n\n    /**\n     * Scroll the given element completely into view, minimizing the degree of\n     * scrolling performed.\n     *\n     * Blink has a `scrollIntoViewIfNeeded()` function that does something\n     * similar, but unfortunately it's non-standard, and in any event often ends\n     * up scrolling more than is absolutely necessary.\n     *\n     * This scrolls the containing element defined by the `scrollTarget`\n     * property. See that property for a discussion of the default value of\n     * that property.\n     *\n     * @param {HTMLElement} item - the item to scroll into view.\n     */\n    scrollItemIntoView(item) {\n      if (super.scrollItemIntoView) { super.scrollItemIntoView(); }\n\n      const scrollTarget = this[symbols.scrollTarget];\n\n      // Determine the bounds of the scroll target and item. We use\n      // getBoundingClientRect instead of .offsetTop, etc., because the latter\n      // round values, and we want to handle fractional values.\n      const scrollTargetRect = scrollTarget.getBoundingClientRect();\n      const itemRect = item.getBoundingClientRect();\n\n      // Determine how far the item is outside the viewport.\n      const bottomDelta = itemRect.bottom - scrollTargetRect.bottom;\n      const topDelta = itemRect.top - scrollTargetRect.top;\n      const leftDelta = itemRect.left - scrollTargetRect.left;\n      const rightDelta = itemRect.right - scrollTargetRect.right;\n\n      // Scroll the target as necessary to bring the item into view.\n      if (bottomDelta > 0) {\n        scrollTarget.scrollTop += bottomDelta;            // Scroll down\n      } else if (topDelta < 0) {\n        scrollTarget.scrollTop += Math.ceil(topDelta);    // Scroll up\n      }\n      if (rightDelta > 0) {\n        scrollTarget.scrollLeft += rightDelta;            // Scroll right\n      } else if (leftDelta < 0) {\n        scrollTarget.scrollLeft += Math.ceil(leftDelta);  // Scroll left\n      }\n    }\n\n    /* Provide a default scrollTarget implementation if none exists. */\n    get [symbols.scrollTarget]() {\n      return super[symbols.scrollTarget] || defaultScrollTarget(this);\n    }\n\n    get selectedItem() {\n      return super.selectedItem;\n    }\n    set selectedItem(item) {\n      if ('selectedItem' in base.prototype) { super.selectedItem = item; }\n      if (item) {\n        // Keep the selected item in view.\n        this.scrollItemIntoView(item);\n      }\n    }\n  }\n\n  return SelectionInView;\n};\n\n\n\n// WEBPACK FOOTER //\n// ./elements/elix-mixins/src/SelectionInViewMixin.js","import symbols from '../src/symbols';\n\n\n// A cache of processed templates.\n//\n// We maintain this as a map keyed by element tag (localName). We could store\n// an element's processed template on its element prototype. One scenario that\n// wouldn't support would be registration of the same constructor under multiple\n// tag names, which was a (perhaps theoretical) use case for Custom Elements.\n//\nconst mapTagToTemplate = {};\n\n\n/**\n * Mixin which adds stamping a template into a Shadow DOM subtree upon component\n * instantiation.\n *\n * To use this mixin, define a `template` property as a string or HTML\n * `<template>` element:\n *\n *     class MyElement extends ShadowTemplateMixin(HTMLElement) {\n *       get [symbols.template]() {\n *         return `Hello, <em>world</em>.`;\n *       }\n *     }\n *\n * When your component class is instantiated, a shadow root will be created on\n * the instance, and the contents of the template will be cloned into the\n * shadow root. If your component does not define a `template` property, this\n * mixin has no effect.\n *\n * For the time being, this extension retains support for Shadow DOM v0. That\n * will eventually be deprecated as browsers (and the Shadow DOM polyfill)\n * implement Shadow DOM v1.\n *\n * @module ShadowTemplateMixin\n * @param base {Class} the base class to extend\n * @returns {Class} the extended class\n */\nexport default function ShadowTemplateMixin(base) {\n\n  /**\n   * The class prototype added by the mixin.\n   */\n  class ShadowTemplate extends base {\n\n    /*\n     * If the component defines a template, a shadow root will be created on the\n     * component instance, and the template stamped into it.\n     */\n    constructor() {\n      super();\n\n      const tag = this.localName;\n      let template = mapTagToTemplate[tag];\n\n      // See if we've already processed a template for this tag.\n      if (!template) {\n        // This is the first time we've created an instance of this tag.\n\n        // Get the template and perform initial processing.\n        template = this[symbols.template];\n        if (!template) {\n          console.warn(`ShadowTemplateMixin expects a component to define a property called [symbols.template].`);\n          return;\n        }\n\n        if (typeof template === 'string') {\n          // Upgrade plain string to real template.\n          const templateText = template;\n          template = document.createElement('template');\n          template.innerHTML = templateText;\n        }\n\n        if (window.ShadyCSS) {\n          // Let the CSS polyfill do its own initialization.\n          window.ShadyCSS.prepareTemplate(template, tag);\n        }\n\n        // Store this for the next time we create the same type of element.\n        mapTagToTemplate[tag] = template;\n      }\n\n      // Stamp the template into a new shadow root.\n      const root = this.attachShadow({ mode: 'open' });\n      const clone = document.importNode(template.content, true);\n      root.appendChild(clone);\n\n      /* Let the component know the shadow tree has been populated. */\n      if (this[symbols.shadowCreated]) {\n        this[symbols.shadowCreated]();\n      }\n    }\n\n    connectedCallback() {\n      if (super.connectedCallback) { super.connectedCallback(); }\n      if (window.ShadyCSS) {\n        window.ShadyCSS.applyStyle(this);\n      }\n    }\n\n  }\n\n  return ShadowTemplate;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./elements/elix-mixins/src/ShadowTemplateMixin.js","import Symbol from './Symbol';\nimport symbols from './symbols';\n\n\n// Symbols for private data members on an element.\nconst canSelectNextSymbol = Symbol('canSelectNext');\nconst canSelectPreviousSymbol = Symbol('canSelectPrevious');\nconst selectionRequiredSymbol = Symbol('selectionRequired');\nconst selectionWrapsSymbol = Symbol('selectionWraps');\n\n// We want to expose both selectedIndex and selectedItem as independent\n// properties but keep them in sync. This allows a component user to reference\n// the selection by whatever means is most natural for their situation.\n//\n// To efficiently keep these properties in sync, we track \"external\" and\n// \"internal\" references for each property:\n//\n// The external index or item is the one we report to the outside world when\n// asked for selection.  When handling a change to index or item, we update the\n// external reference as soon as possible, so that if anyone immediately asks\n// for the current selection, they will receive a stable answer.\n//\n// The internal index or item tracks whichever index or item last received the\n// full set of processing. Processing includes raising a change event for the\n// new value. Once we've begun that processing, we store the new value as the\n// internal value to indicate we've handled it.\n//\nconst externalSelectedIndexSymbol = Symbol('externalSelectedIndex');\nconst externalSelectedItemSymbol = Symbol('externalSelectedItem');\nconst internalSelectedIndexSymbol = Symbol('internalSelectedIndex');\nconst internalSelectedItemSymbol = Symbol('internalSelectedItem');\n\n\n/**\n * Mixin which adds single-selection semantics for items in a list.\n *\n * This mixin expects a component to provide an `items` Array or NodeList of\n * all elements in the list.\n *\n * This mixin tracks a single selected item in the list, and provides means to\n * get and set that state by item position (`selectedIndex`) or item identity\n * (`selectedItem`). The selection can be moved in the list via the methods\n * `selectFirst`, `selectLast`, `selectNext`, and `selectPrevious`.\n *\n * This mixin does not produce any user-visible effects to represent\n * selection.\n *\n * @module SingleSelectionMixin\n * @param base {Class} the base class to extend\n * @returns {Class} the extended class\n */\nexport default function SingleSelectionMixin(base) {\n\n  /**\n   * The class prototype added by the mixin.\n   */\n  class SingleSelection extends base {\n\n    constructor() {\n      super();\n      // Set defaults.\n      if (typeof this.selectionRequired === 'undefined') {\n        this.selectionRequired = this[symbols.defaults].selectionRequired;\n      }\n      if (typeof this.selectionWraps === 'undefined') {\n        this.selectionWraps = this[symbols.defaults].selectionWraps;\n      }\n    }\n\n    /**\n     * True if the selection can be moved to the next item, false if not (the\n     * selected item is the last item in the list).\n     *\n     * @type {boolean}\n     */\n    get canSelectNext() {\n      return this[canSelectNextSymbol];\n    }\n    set canSelectNext(canSelectNext) {\n      const changed = canSelectNext !== this[canSelectNextSymbol];\n      this[canSelectNextSymbol] = canSelectNext;\n      if ('canSelectNext' in base.prototype) { super.canSelectNext = canSelectNext; }\n      if (this[symbols.raiseChangeEvents] && changed) {\n        this.dispatchEvent(new CustomEvent('can-select-next-changed'));\n      }\n    }\n\n    /**\n     * True if the selection can be moved to the previous item, false if not\n     * (the selected item is the first one in the list).\n     *\n     * @type {boolean}\n     */\n    get canSelectPrevious() {\n      return this[canSelectPreviousSymbol];\n    }\n    set canSelectPrevious(canSelectPrevious) {\n      const changed = canSelectPrevious !== this[canSelectPreviousSymbol];\n      this[canSelectPreviousSymbol] = canSelectPrevious;\n      if ('canSelectPrevious' in base.prototype) { super.canSelectPrevious = canSelectPrevious; }\n      if (this[symbols.raiseChangeEvents] && changed) {\n        this.dispatchEvent(new CustomEvent('can-select-previous-changed'));\n      }\n    }\n\n    get [symbols.defaults]() {\n      const defaults = super[symbols.defaults] || {};\n      defaults.selectionRequired = false;\n      defaults.selectionWraps = false;\n      return defaults;\n    }\n\n    /**\n     * Handle a new item being added to the list.\n     *\n     * The default implementation of this method simply sets the item's\n     * selection state to false.\n     *\n     * @param {HTMLElement} item - the item being added\n     */\n    [symbols.itemAdded](item) {\n      if (super[symbols.itemAdded]) { super[symbols.itemAdded](item); }\n      this[symbols.itemSelected](item, item === this.selectedItem);\n    }\n\n    [symbols.itemsChanged]() {\n      if (super[symbols.itemsChanged]) { super[symbols.itemsChanged](); }\n\n      // In case selected item changed position or was removed.\n      trackSelectedItem(this);\n\n      // In case the change in items affected which navigations are possible.\n      updatePossibleNavigations(this);\n    }\n\n    /**\n     * Apply the indicate selection state to the item.\n     *\n     * The default implementation of this method does nothing. User-visible\n     * effects will typically be handled by other mixins.\n     *\n     * @param {HTMLElement} item - the item being selected/deselected\n     * @param {boolean} selected - true if the item is selected, false if not\n     */\n    [symbols.itemSelected](item, selected) {\n      if (super[symbols.itemSelected]) { super[symbols.itemSelected](item, selected); }\n    }\n\n    /**\n     * The index of the item which is currently selected.\n     *\n     * The setter expects an integer or a string representing an integer.\n     *\n     * A `selectedIndex` of -1 indicates there is no selection. Setting this\n     * property to -1 will remove any existing selection.\n     *\n     * @type {number}\n     */\n    get selectedIndex() {\n      return this[externalSelectedIndexSymbol] != null ?\n        this[externalSelectedIndexSymbol] :\n        -1;\n    }\n    set selectedIndex(index) {\n      // See notes at top about internal vs. external copies of this property.\n      const changed = index !== this[internalSelectedIndexSymbol];\n      let item;\n      let parsedIndex = parseInt(index);\n      if (parsedIndex !== this[externalSelectedIndexSymbol]) {\n        // Store the new index and the corresponding item.\n        const items = this.items;\n        const hasItems = items && items.length > 0;\n        if (!(hasItems && parsedIndex >= 0 && parsedIndex < items.length)) {\n          parsedIndex = -1; // No item at that index.\n        }\n        this[externalSelectedIndexSymbol] = parsedIndex;\n        item = hasItems && parsedIndex >= 0 ? items[parsedIndex] : null;\n        this[externalSelectedItemSymbol] = item;\n      } else {\n        item = this[externalSelectedItemSymbol];\n      }\n\n      // Now let super do any work.\n      if ('selectedIndex' in base.prototype) { super.selectedIndex = index; }\n\n      if (changed) {\n        // The selected index changed.\n        this[internalSelectedIndexSymbol] = parsedIndex;\n\n        if (this[symbols.raiseChangeEvents]) {\n          const event = new CustomEvent('selected-index-changed', {\n            detail: {\n              selectedIndex: parsedIndex,\n              value: parsedIndex // for Polymer binding. TODO: Verify still necessary\n            }\n          });\n          this.dispatchEvent(event);\n        }\n      }\n\n      if (this[internalSelectedItemSymbol] !== item) {\n        // Update selectedItem property so it can have its own effects.\n        this.selectedItem = item;\n      }\n    }\n\n    /**\n     * The currently selected item, or null if there is no selection.\n     *\n     * Setting this property to null deselects any currently-selected item.\n     * Setting this property to an object that is not in the list has no effect.\n     *\n     * TODO: Even if selectionRequired, can still explicitly set selectedItem to null.\n     * TODO: If selectionRequired, leave selection alone?\n     *\n     * @type {object}\n     */\n    get selectedItem() {\n      return this[externalSelectedItemSymbol] || null;\n    }\n    set selectedItem(item) {\n      // See notes at top about internal vs. external copies of this property.\n      const previousSelectedItem = this[internalSelectedItemSymbol];\n      const changed = item !== previousSelectedItem;\n      let index;\n      if (item !== this[externalSelectedItemSymbol]) {\n        // Store item and look up corresponding index.\n        const items = this.items;\n        const hasItems = items && items.length > 0;\n        index = hasItems ? Array.prototype.indexOf.call(items, item) : -1;\n        this[externalSelectedIndexSymbol] = index;\n        if (index < 0) {\n          item = null; // The indicated item isn't actually in `items`.\n        }\n        this[externalSelectedItemSymbol] = item;\n      } else {\n        index = this[externalSelectedIndexSymbol];\n      }\n\n      // Now let super do any work.\n      if ('selectedItem' in base.prototype) { super.selectedItem = item; }\n\n      if (changed) {\n        // The selected item changed.\n        this[internalSelectedItemSymbol] = item;\n\n        if (previousSelectedItem) {\n          // Update selection state of old item.\n          this[symbols.itemSelected](previousSelectedItem, false);\n        }\n        if (item) {\n          // Update selection state to new item.\n          this[symbols.itemSelected](item, true);\n        }\n\n        updatePossibleNavigations(this);\n\n        if (this[symbols.raiseChangeEvents]) {\n          const event = new CustomEvent('selected-item-changed', {\n            detail: {\n              selectedItem: item,\n              value: item // for Polymer binding\n            }\n          });\n          this.dispatchEvent(event);\n        }\n      }\n\n      if (this[internalSelectedIndexSymbol] !== index) {\n        // Update selectedIndex property so it can have its own effects.\n        this.selectedIndex = index;\n      }\n    }\n\n    /**\n     * Select the first item in the list.\n     *\n     * @returns {Boolean} True if the selection changed, false if not.\n     */\n    selectFirst() {\n      if (super.selectFirst) { super.selectFirst(); }\n      return selectIndex(this, 0);\n    }\n\n    /**\n     * True if the list should always have a selection (if it has items).\n     *\n     * @type {boolean}\n     * @default false\n     */\n    get selectionRequired() {\n      return this[selectionRequiredSymbol];\n    }\n    set selectionRequired(selectionRequired) {\n      const parsed = String(selectionRequired) === 'true';\n      const changed = parsed !== this[selectionRequiredSymbol];\n      this[selectionRequiredSymbol] = parsed;\n      if ('selectionRequired' in base.prototype) { super.selectionRequired = selectionRequired; }\n      if (changed) {\n        if (this[symbols.raiseChangeEvents]) {\n          const event = new CustomEvent('selection-required-changed');\n          this.dispatchEvent(event);\n        }\n        if (selectionRequired) {\n          trackSelectedItem(this);\n        }\n      }\n    }\n\n    /**\n     * True if selection navigations wrap from last to first, and vice versa.\n     *\n     * @type {boolean}\n     * @default false\n     */\n    get selectionWraps() {\n      return this[selectionWrapsSymbol];\n    }\n    set selectionWraps(selectionWraps) {\n      const parsed = String(selectionWraps) === 'true';\n      const changed = parsed !== this[selectionWrapsSymbol];\n      this[selectionWrapsSymbol] = parsed;\n      if ('selectionWraps' in base.prototype) { super.selectionWraps = selectionWraps; }\n      if (changed) {\n        if (this[symbols.raiseChangeEvents]) {\n          const event = new CustomEvent('selection-wraps-changed');\n          this.dispatchEvent(event);\n        }\n        updatePossibleNavigations(this);\n      }\n    }\n\n    /**\n     * Select the last item in the list.\n     *\n     * @returns {Boolean} True if the selection changed, false if not.\n     */\n    selectLast() {\n      if (super.selectLast) { super.selectLast(); }\n      return selectIndex(this, this.items.length - 1);\n    }\n\n    /**\n     * Select the next item in the list.\n     *\n     * If the list has no selection, the first item will be selected.\n     *\n     * @returns {Boolean} True if the selection changed, false if not.\n     */\n    selectNext() {\n      if (super.selectNext) { super.selectNext(); }\n      return selectIndex(this, this.selectedIndex + 1);\n    }\n\n    /**\n     * Select the previous item in the list.\n     *\n     * If the list has no selection, the last item will be selected.\n     *\n     * @returns {Boolean} True if the selection changed, false if not.\n     */\n    selectPrevious() {\n      if (super.selectPrevious) { super.selectPrevious(); }\n      const newIndex = this.selectedIndex < 0 ?\n        this.items.length - 1 :     // No selection yet; select last item.\n        this.selectedIndex - 1;\n      return selectIndex(this, newIndex);\n    }\n\n    /**\n     * Fires when the canSelectNext property changes in response to internal\n     * component activity.\n     *\n     * @memberof SingleSelection\n     * @event can-select-next-changed\n     */\n\n    /**\n     * Fires when the canSelectPrevious property changes in response to internal\n     * component activity.\n     *\n     * @memberof SingleSelection\n     * @event can-select-previous-changed\n     */\n\n    /**\n     * Fires when the selectedIndex property changes in response to internal\n     * component activity.\n     *\n     * @memberof SingleSelection\n     * @event selected-index-changed\n     * @param {number} detail.selectedIndex The new selected index.\n     */\n\n    /**\n     * Fires when the selectedItem property changes in response to internal\n     * component activity.\n     *\n     * @memberof SingleSelection\n     * @event selected-item-changed\n     * @param {HTMLElement} detail.selectedItem The new selected item.\n     */\n\n  }\n\n  return SingleSelection;\n}\n\n\n// Ensure the given index is within bounds, and select it if it's not already\n// selected.\nfunction selectIndex(element, index) {\n\n  const items = element.items;\n  if (items == null) {\n    // Nothing to select.\n    return false;\n  }\n\n  const count = items.length;\n  const boundedIndex = element.selectionWraps ?\n    // JavaScript mod doesn't handle negative numbers the way we want to wrap.\n    // See http://stackoverflow.com/a/18618250/76472\n    ((index % count) + count) % count :\n\n    // Keep index within bounds of array.\n    Math.max(Math.min(index, count - 1), 0);\n\n  const previousIndex = element.selectedIndex;\n  if (previousIndex !== boundedIndex) {\n    element.selectedIndex = boundedIndex;\n    return true;\n  } else {\n    return false;\n  }\n}\n\n// Following a change in the set of items, or in the value of the\n// `selectionRequired` property, reacquire the selected item. If it's moved,\n// update `selectedIndex`. If it's been removed, and a selection is required,\n// try to select another item.\nfunction trackSelectedItem(element) {\n\n  const items = element.items;\n  const itemCount = items ? items.length : 0;\n\n  const previousSelectedItem = element.selectedItem;\n  if (!previousSelectedItem) {\n    // No item was previously selected.\n    if (element.selectionRequired) {\n      // Select the first item by default.\n      element.selectedIndex = 0;\n    }\n  } else if (itemCount === 0) {\n    // We've lost the selection, and there's nothing left to select.\n    element.selectedItem = null;\n  } else {\n    // Try to find the previously-selected item in the current set of items.\n    const indexInCurrentItems = Array.prototype.indexOf.call(items, previousSelectedItem);\n    const previousSelectedIndex = element.selectedIndex;\n    if (indexInCurrentItems < 0) {\n      // Previously-selected item was removed from the items.\n      // Select the item at the same index (if it exists) or as close as possible.\n      const newSelectedIndex = Math.min(previousSelectedIndex, itemCount - 1);\n      // Select by item, since index may be the same, and we want to raise the\n      // selected-item-changed event.\n      element.selectedItem = items[newSelectedIndex];\n    } else if (indexInCurrentItems !== previousSelectedIndex) {\n      // Previously-selected item still there, but changed position.\n      element.selectedIndex = indexInCurrentItems;\n    }\n  }\n}\n\n// Following a change in selection, report whether it's now possible to\n// go next/previous from the given index.\nfunction updatePossibleNavigations(element) {\n  let canSelectNext;\n  let canSelectPrevious;\n  const items = element.items;\n  if (items == null || items.length === 0) {\n    // No items to select.\n    canSelectNext = false;\n    canSelectPrevious = false;\n  } else if (element.selectionWraps) {\n    // Since there are items, can always go next/previous.\n    canSelectNext = true;\n    canSelectPrevious = true;\n  } else {\n    const index = element.selectedIndex;\n    if (index < 0 && items.length > 0) {\n      // Special case. If there are items but no selection, declare that it's\n      // always possible to go next/previous to create a selection.\n      canSelectNext = true;\n      canSelectPrevious = true;\n    } else {\n      // Normal case: we have an index in a list that has items.\n      canSelectPrevious = (index > 0);\n      canSelectNext = (index < items.length - 1);\n    }\n  }\n  if (element.canSelectNext !== canSelectNext) {\n    element.canSelectNext = canSelectNext;\n  }\n  if (element.canSelectPrevious !== canSelectPrevious) {\n    element.canSelectPrevious = canSelectPrevious;\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./elements/elix-mixins/src/SingleSelectionMixin.js","import SingleSelectionMixin from '../../elix-mixins/src/SingleSelectionMixin';\nimport symbols from '../../elix-mixins/src/symbols';\n\n\n/*\n * A very simple component to show the application of SingleSelectionMixin.\n *\n * For a more complete demo using SingleSelectionMixin, see the ListBox demo.\n */\nexport default class SingleSelectionDemo extends SingleSelectionMixin(HTMLElement) {\n\n  constructor() {\n    super();\n    this.addEventListener('mousedown', event => {\n      this[symbols.raiseChangeEvents] = true;\n      this.selectedItem = event.target;\n      event.stopPropagation();\n      this[symbols.raiseChangeEvents] = false;\n    });\n  }\n\n  attributeChangedCallback(attributeName, oldValue, newValue) {\n    if (super.attributeChangedCallback) { super.attributeChangedCallback(attributeName, oldValue, newValue); }\n    if (attributeName === 'selected-index') {\n      this.selectedIndex = newValue;\n    }\n  }\n\n  // Map item selection to a `selected` CSS class.\n  [symbols.itemSelected](item, selected) {\n    if (super[symbols.itemSelected]) { super[symbols.itemSelected](item, selected); }\n    item.classList.toggle('selected', selected);\n  }\n\n  // Simplistic implementation of items property — doesn't handle redistribution.\n  get items() {\n    return this.children;\n  }\n\n  static get observedAttributes() {\n    return ['selected-index'];\n  }\n\n}\n\n\ncustomElements.define('single-selection-demo', SingleSelectionDemo);\n\n\n\n// WEBPACK FOOTER //\n// ./elements/demos/src/SingleSelectionDemo.js"],"sourceRoot":""}