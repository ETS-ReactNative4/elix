{"version":3,"sources":["webpack:///webpack/bootstrap 0870564cbaf48433ae3c","webpack:///./elements/demos/src/SingleSelectionDemo.js","webpack:///./elements/elix-mixins/src/SingleSelectionMixin.js","webpack:///./elements/elix-mixins/src/createSymbol.js","webpack:///./elements/elix-mixins/src/CustomEvent.js","webpack:///./elements/elix-mixins/src/symbols.js"],"names":["SingleSelectionDemo","addEventListener","raiseChangeEvents","selectedItem","event","target","stopPropagation","attributeName","oldValue","newValue","selectedIndex","itemSelected","item","selected","classList","toggle","children","HTMLElement","customElements","define","SingleSelectionMixin","canSelectNextSymbol","canSelectPreviousSymbol","selectionRequiredSymbol","selectionWrapsSymbol","externalSelectedIndexSymbol","externalSelectedItemSymbol","internalSelectedIndexSymbol","internalSelectedItemSymbol","base","SingleSelection","selectionRequired","defaults","selectionWraps","itemAdded","itemsChanged","trackSelectedItem","updatePossibleNavigations","selectIndex","items","length","newIndex","canSelectNext","changed","prototype","dispatchEvent","canSelectPrevious","index","parsedIndex","parseInt","hasItems","detail","value","previousSelectedItem","Array","indexOf","call","String","element","count","boundedIndex","Math","max","min","previousIndex","itemCount","indexInCurrentItems","previousSelectedIndex","newSelectedIndex","createSymbol","description","Symbol","customEventConstructor","customEventPolyfill","eventName","params","bubbles","cancelable","undefined","document","createEvent","initCustomEvent","originalPreventDefault","preventDefault","Object","defineProperty","get","e","defaultPrevented","setPrototypeOf","window","Event","CustomEvent","symbols"],"mappings":"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","file":"demos.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 0870564cbaf48433ae3c","import SingleSelectionMixin from '../../elix-mixins/src/SingleSelectionMixin';\nimport symbols from '../../elix-mixins/src/symbols';\n\n\nexport default class SingleSelectionDemo extends SingleSelectionMixin(HTMLElement) {\n\n  constructor() {\n    super();\n\n    // When a child is clicked, set the selectedItem.\n    this.addEventListener('click', event => {\n      this[symbols.raiseChangeEvents] = true;\n      this.selectedItem = event.target !== this ?\n        event.target :  // Clicked on an item\n        null;           // Clicked on element background\n      event.stopPropagation();\n      this[symbols.raiseChangeEvents] = false;\n    });\n  }\n\n  attributeChangedCallback(attributeName, oldValue, newValue) {\n    if (super.attributeChangedCallback) { super.attributeChangedCallback(attributeName, oldValue, newValue); }\n    if (attributeName === 'selected-index') {\n      this.selectedIndex = newValue;\n    }\n  }\n\n  // Map item selection to a `selected` CSS class.\n  [symbols.itemSelected](item, selected) {\n    if (super[symbols.itemSelected]) { super[symbols.itemSelected](item, selected); }\n    item.classList.toggle('selected', selected);\n  }\n\n  // Simplistic implementation of items property — doesn't handle redistribution.\n  get items() {\n    return this.children;\n  }\n\n  static get observedAttributes() {\n    return ['selected-index'];\n  }\n\n}\n\n\ncustomElements.define('single-selection-demo', SingleSelectionDemo);\n\n\n\n// WEBPACK FOOTER //\n// ./elements/demos/src/SingleSelectionDemo.js","import createSymbol from './createSymbol';\nimport CustomEvent from './CustomEvent';\nimport symbols from './symbols';\n\n\n// Symbols for private data members on an element.\nconst canSelectNextSymbol = createSymbol('canSelectNext');\nconst canSelectPreviousSymbol = createSymbol('canSelectPrevious');\nconst selectionRequiredSymbol = createSymbol('selectionRequired');\nconst selectionWrapsSymbol = createSymbol('selectionWraps');\n\n// We want to expose both selectedIndex and selectedItem as independent\n// properties but keep them in sync. This allows a component user to reference\n// the selection by whatever means is most natural for their situation.\n//\n// To efficiently keep these properties in sync, we track \"external\" and\n// \"internal\" references for each property:\n//\n// The external index or item is the one we report to the outside world when\n// asked for selection.  When handling a change to index or item, we update the\n// external reference as soon as possible, so that if anyone immediately asks\n// for the current selection, they will receive a stable answer.\n//\n// The internal index or item tracks whichever index or item last received the\n// full set of processing. Processing includes raising a change event for the\n// new value. Once we've begun that processing, we store the new value as the\n// internal value to indicate we've handled it.\n//\nconst externalSelectedIndexSymbol = createSymbol('externalSelectedIndex');\nconst externalSelectedItemSymbol = createSymbol('externalSelectedItem');\nconst internalSelectedIndexSymbol = createSymbol('internalSelectedIndex');\nconst internalSelectedItemSymbol = createSymbol('internalSelectedItem');\n\n\n/**\n * Mixin which adds single-selection semantics for items in a list.\n *\n * This mixin expects a component to provide an `items` Array or NodeList of\n * all elements in the list.\n *\n * This mixin tracks a single selected item in the list, and provides means to\n * get and set that state by item position (`selectedIndex`) or item identity\n * (`selectedItem`). The selection can be moved in the list via the methods\n * `selectFirst`, `selectLast`, `selectNext`, and `selectPrevious`.\n *\n * This mixin does not produce any user-visible effects to represent\n * selection.\n *\n * @module SingleSelectionMixin\n * @param base {Class} the base class to extend\n * @returns {Class} the extended class\n */\nexport default function SingleSelectionMixin(base) {\n\n  /**\n   * The class prototype added by the mixin.\n   */\n  class SingleSelection extends base {\n\n    constructor() {\n      super();\n      // Set defaults.\n      if (typeof this.selectionRequired === 'undefined') {\n        this.selectionRequired = this[symbols.defaults].selectionRequired;\n      }\n      if (typeof this.selectionWraps === 'undefined') {\n        this.selectionWraps = this[symbols.defaults].selectionWraps;\n      }\n    }\n\n    /**\n     * True if the selection can be moved to the next item, false if not (the\n     * selected item is the last item in the list).\n     *\n     * @type {boolean}\n     */\n    get canSelectNext() {\n      return this[canSelectNextSymbol];\n    }\n    set canSelectNext(canSelectNext) {\n      const changed = canSelectNext !== this[canSelectNextSymbol];\n      this[canSelectNextSymbol] = canSelectNext;\n      if ('canSelectNext' in base.prototype) { super.canSelectNext = canSelectNext; }\n      if (this[symbols.raiseChangeEvents] && changed) {\n        this.dispatchEvent(new CustomEvent('can-select-next-changed'));\n      }\n    }\n\n    /**\n     * True if the selection can be moved to the previous item, false if not\n     * (the selected item is the first one in the list).\n     *\n     * @type {boolean}\n     */\n    get canSelectPrevious() {\n      return this[canSelectPreviousSymbol];\n    }\n    set canSelectPrevious(canSelectPrevious) {\n      const changed = canSelectPrevious !== this[canSelectPreviousSymbol];\n      this[canSelectPreviousSymbol] = canSelectPrevious;\n      if ('canSelectPrevious' in base.prototype) { super.canSelectPrevious = canSelectPrevious; }\n      if (this[symbols.raiseChangeEvents] && changed) {\n        this.dispatchEvent(new CustomEvent('can-select-previous-changed'));\n      }\n    }\n\n    get [symbols.defaults]() {\n      const defaults = super[symbols.defaults] || {};\n      defaults.selectionRequired = false;\n      defaults.selectionWraps = false;\n      return defaults;\n    }\n\n    /**\n     * Handle a new item being added to the list.\n     *\n     * The default implementation of this method simply sets the item's\n     * selection state to false.\n     *\n     * @param {HTMLElement} item - the item being added\n     */\n    [symbols.itemAdded](item) {\n      if (super[symbols.itemAdded]) { super[symbols.itemAdded](item); }\n      this[symbols.itemSelected](item, item === this.selectedItem);\n    }\n\n    [symbols.itemsChanged]() {\n      if (super[symbols.itemsChanged]) { super[symbols.itemsChanged](); }\n\n      // In case selected item changed position or was removed.\n      trackSelectedItem(this);\n\n      // In case the change in items affected which navigations are possible.\n      updatePossibleNavigations(this);\n    }\n\n    /**\n     * Apply the indicate selection state to the item.\n     *\n     * The default implementation of this method does nothing. User-visible\n     * effects will typically be handled by other mixins.\n     *\n     * @param {HTMLElement} item - the item being selected/deselected\n     * @param {boolean} selected - true if the item is selected, false if not\n     */\n    [symbols.itemSelected](item, selected) {\n      if (super[symbols.itemSelected]) { super[symbols.itemSelected](item, selected); }\n    }\n\n    /**\n     * The index of the item which is currently selected.\n     *\n     * The setter expects an integer or a string representing an integer.\n     *\n     * A `selectedIndex` of -1 indicates there is no selection. Setting this\n     * property to -1 will remove any existing selection.\n     *\n     * @type {number}\n     */\n    get selectedIndex() {\n      return this[externalSelectedIndexSymbol] != null ?\n        this[externalSelectedIndexSymbol] :\n        -1;\n    }\n    set selectedIndex(index) {\n      // See notes at top about internal vs. external copies of this property.\n      const changed = index !== this[internalSelectedIndexSymbol];\n      let item;\n      let parsedIndex = parseInt(index);\n      if (parsedIndex !== this[externalSelectedIndexSymbol]) {\n        // Store the new index and the corresponding item.\n        const items = this.items;\n        const hasItems = items && items.length > 0;\n        if (!(hasItems && parsedIndex >= 0 && parsedIndex < items.length)) {\n          parsedIndex = -1; // No item at that index.\n        }\n        this[externalSelectedIndexSymbol] = parsedIndex;\n        item = hasItems && parsedIndex >= 0 ? items[parsedIndex] : null;\n        this[externalSelectedItemSymbol] = item;\n      } else {\n        item = this[externalSelectedItemSymbol];\n      }\n\n      // Now let super do any work.\n      if ('selectedIndex' in base.prototype) { super.selectedIndex = index; }\n\n      if (changed) {\n        // The selected index changed.\n        this[internalSelectedIndexSymbol] = parsedIndex;\n\n        if (this[symbols.raiseChangeEvents]) {\n          const event = new CustomEvent('selected-index-changed', {\n            detail: {\n              selectedIndex: parsedIndex,\n              value: parsedIndex // for Polymer binding. TODO: Verify still necessary\n            }\n          });\n          this.dispatchEvent(event);\n        }\n      }\n\n      if (this[internalSelectedItemSymbol] !== item) {\n        // Update selectedItem property so it can have its own effects.\n        this.selectedItem = item;\n      }\n    }\n\n    /**\n     * The currently selected item, or null if there is no selection.\n     *\n     * Setting this property to null deselects any currently-selected item.\n     * Setting this property to an object that is not in the list has no effect.\n     *\n     * TODO: Even if selectionRequired, can still explicitly set selectedItem to null.\n     * TODO: If selectionRequired, leave selection alone?\n     *\n     * @type {object}\n     */\n    get selectedItem() {\n      return this[externalSelectedItemSymbol] || null;\n    }\n    set selectedItem(item) {\n      // See notes at top about internal vs. external copies of this property.\n      const previousSelectedItem = this[internalSelectedItemSymbol];\n      const changed = item !== previousSelectedItem;\n      let index;\n      if (item !== this[externalSelectedItemSymbol]) {\n        // Store item and look up corresponding index.\n        const items = this.items;\n        const hasItems = items && items.length > 0;\n        index = hasItems ? Array.prototype.indexOf.call(items, item) : -1;\n        this[externalSelectedIndexSymbol] = index;\n        if (index < 0) {\n          item = null; // The indicated item isn't actually in `items`.\n        }\n        this[externalSelectedItemSymbol] = item;\n      } else {\n        index = this[externalSelectedIndexSymbol];\n      }\n\n      // Now let super do any work.\n      if ('selectedItem' in base.prototype) { super.selectedItem = item; }\n\n      if (changed) {\n        // The selected item changed.\n        this[internalSelectedItemSymbol] = item;\n\n        if (previousSelectedItem) {\n          // Update selection state of old item.\n          this[symbols.itemSelected](previousSelectedItem, false);\n        }\n        if (item) {\n          // Update selection state to new item.\n          this[symbols.itemSelected](item, true);\n        }\n\n        updatePossibleNavigations(this);\n\n        if (this[symbols.raiseChangeEvents]) {\n          const event = new CustomEvent('selected-item-changed', {\n            detail: {\n              selectedItem: item,\n              value: item // for Polymer binding\n            }\n          });\n          this.dispatchEvent(event);\n        }\n      }\n\n      if (this[internalSelectedIndexSymbol] !== index) {\n        // Update selectedIndex property so it can have its own effects.\n        this.selectedIndex = index;\n      }\n    }\n\n    /**\n     * Select the first item in the list.\n     *\n     * @returns {Boolean} True if the selection changed, false if not.\n     */\n    selectFirst() {\n      if (super.selectFirst) { super.selectFirst(); }\n      return selectIndex(this, 0);\n    }\n\n    /**\n     * True if the list should always have a selection (if it has items).\n     *\n     * @type {boolean}\n     * @default false\n     */\n    get selectionRequired() {\n      return this[selectionRequiredSymbol];\n    }\n    set selectionRequired(selectionRequired) {\n      this[selectionRequiredSymbol] = selectionRequired;\n      if ('selectionRequired' in base.prototype) { super.selectionRequired = selectionRequired; }\n      trackSelectedItem(this);\n    }\n\n    /**\n     * True if selection navigations wrap from last to first, and vice versa.\n     *\n     * @type {boolean}\n     * @default false\n     */\n    get selectionWraps() {\n      return this[selectionWrapsSymbol];\n    }\n    set selectionWraps(value) {\n      this[selectionWrapsSymbol] = String(value) === 'true';\n      if ('selectionWraps' in base.prototype) { super.selectionWraps = value; }\n      updatePossibleNavigations(this);\n    }\n\n    /**\n     * Select the last item in the list.\n     *\n     * @returns {Boolean} True if the selection changed, false if not.\n     */\n    selectLast() {\n      if (super.selectLast) { super.selectLast(); }\n      return selectIndex(this, this.items.length - 1);\n    }\n\n    /**\n     * Select the next item in the list.\n     *\n     * If the list has no selection, the first item will be selected.\n     *\n     * @returns {Boolean} True if the selection changed, false if not.\n     */\n    selectNext() {\n      if (super.selectNext) { super.selectNext(); }\n      return selectIndex(this, this.selectedIndex + 1);\n    }\n\n    /**\n     * Select the previous item in the list.\n     *\n     * If the list has no selection, the last item will be selected.\n     *\n     * @returns {Boolean} True if the selection changed, false if not.\n     */\n    selectPrevious() {\n      if (super.selectPrevious) { super.selectPrevious(); }\n      const newIndex = this.selectedIndex < 0 ?\n        this.items.length - 1 :     // No selection yet; select last item.\n        this.selectedIndex - 1;\n      return selectIndex(this, newIndex);\n    }\n\n    /**\n     * Fires when the canSelectNext property changes in response to internal\n     * component activity.\n     *\n     * @memberof SingleSelection\n     * @event can-select-next-changed\n     */\n\n    /**\n     * Fires when the canSelectPrevious property changes in response to internal\n     * component activity.\n     *\n     * @memberof SingleSelection\n     * @event can-select-previous-changed\n     */\n\n    /**\n     * Fires when the selectedIndex property changes in response to internal\n     * component activity.\n     *\n     * @memberof SingleSelection\n     * @event selected-index-changed\n     * @param {number} detail.selectedIndex The new selected index.\n     */\n\n    /**\n     * Fires when the selectedItem property changes in response to internal\n     * component activity.\n     *\n     * @memberof SingleSelection\n     * @event selected-item-changed\n     * @param {HTMLElement} detail.selectedItem The new selected item.\n     */\n\n  }\n\n  return SingleSelection;\n}\n\n\n// Ensure the given index is within bounds, and select it if it's not already\n// selected.\nfunction selectIndex(element, index) {\n\n  const items = element.items;\n  if (items == null) {\n    // Nothing to select.\n    return false;\n  }\n\n  const count = items.length;\n  const boundedIndex = element.selectionWraps ?\n    // JavaScript mod doesn't handle negative numbers the way we want to wrap.\n    // See http://stackoverflow.com/a/18618250/76472\n    ((index % count) + count) % count :\n\n    // Keep index within bounds of array.\n    Math.max(Math.min(index, count - 1), 0);\n\n  const previousIndex = element.selectedIndex;\n  if (previousIndex !== boundedIndex) {\n    element.selectedIndex = boundedIndex;\n    return true;\n  } else {\n    return false;\n  }\n}\n\n// Following a change in the set of items, or in the value of the\n// `selectionRequired` property, reacquire the selected item. If it's moved,\n// update `selectedIndex`. If it's been removed, and a selection is required,\n// try to select another item.\nfunction trackSelectedItem(element) {\n\n  const items = element.items;\n  const itemCount = items ? items.length : 0;\n\n  const previousSelectedItem = element.selectedItem;\n  if (!previousSelectedItem) {\n    // No item was previously selected.\n    if (element.selectionRequired) {\n      // Select the first item by default.\n      element.selectedIndex = 0;\n    }\n  } else if (itemCount === 0) {\n    // We've lost the selection, and there's nothing left to select.\n    element.selectedItem = null;\n  } else {\n    // Try to find the previously-selected item in the current set of items.\n    const indexInCurrentItems = Array.prototype.indexOf.call(items, previousSelectedItem);\n    const previousSelectedIndex = element.selectedIndex;\n    if (indexInCurrentItems < 0) {\n      // Previously-selected item was removed from the items.\n      // Select the item at the same index (if it exists) or as close as possible.\n      const newSelectedIndex = Math.min(previousSelectedIndex, itemCount - 1);\n      // Select by item, since index may be the same, and we want to raise the\n      // selected-item-changed event.\n      element.selectedItem = items[newSelectedIndex];\n    } else if (indexInCurrentItems !== previousSelectedIndex) {\n      // Previously-selected item still there, but changed position.\n      element.selectedIndex = indexInCurrentItems;\n    }\n  }\n}\n\n// Following a change in selection, report whether it's now possible to\n// go next/previous from the given index.\nfunction updatePossibleNavigations(element) {\n  let canSelectNext;\n  let canSelectPrevious;\n  const items = element.items;\n  if (items == null || items.length === 0) {\n    // No items to select.\n    canSelectNext = false;\n    canSelectPrevious = false;\n  } else if (element.selectionWraps) {\n    // Since there are items, can always go next/previous.\n    canSelectNext = true;\n    canSelectPrevious = true;\n  } else {\n    const index = element.selectedIndex;\n    if (index < 0 && items.length > 0) {\n      // Special case. If there are items but no selection, declare that it's\n      // always possible to go next/previous to create a selection.\n      canSelectNext = true;\n      canSelectPrevious = true;\n    } else {\n      // Normal case: we have an index in a list that has items.\n      canSelectPrevious = (index > 0);\n      canSelectNext = (index < items.length - 1);\n    }\n  }\n  if (element.canSelectNext !== canSelectNext) {\n    element.canSelectNext = canSelectNext;\n  }\n  if (element.canSelectPrevious !== canSelectPrevious) {\n    element.canSelectPrevious = canSelectPrevious;\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./elements/elix-mixins/src/SingleSelectionMixin.js","/**\n * Helper function to create a symbol that can be used for associating private\n * data with an element.\n *\n * Mixins and component classes often want to associate private data with an\n * element instance, but JavaScript does not have direct support for true\n * private properties. One approach is to use the\n * [Symbol](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol)\n * data type to set and retrieve data on an element.\n *\n * Unfortunately, the Symbol type is not available in Internet Explorer 11. The\n * `createSymbol` helper function exists as a workaround for IE 11. Rather than\n * returning a true Symbol, it simply returns an underscore-prefixed string.\n *\n * Usage:\n *\n *     const fooSymbol = createSymbol('foo');\n *\n *     class MyElement extends HTMLElement {\n *       get foo() {\n *         return this[fooSymbol];\n *       }\n *       set foo(value) {\n *         this[fooSymbol] = value;\n *       }\n *     }\n *\n * In IE 11, this sample will \"hide\" data behind an instance property this._foo.\n * The use of the underscore is meant to reduce (not eliminate) the potential\n * for name conflicts, and discourage (not prevent) external access to this\n * data. In modern browsers, the above code will eliminate the potential of\n * naming conflicts, and better hide the data behind a real Symbol.\n *\n * @function createSymbol\n * @param {string} description - A string to identify the symbol when debugging\n */\nexport default function createSymbol(description) {\n  return typeof Symbol === 'function' ?\n    Symbol(description) :\n    `_${description}`;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./elements/elix-mixins/src/createSymbol.js","/*\n * Polyfill for creating CustomEvents for IE 11.\n * Inspired by https://github.com/krambuhl/custom-event-polyfill.\n */\n\nlet customEventConstructor;\n\nfunction customEventPolyfill(eventName, params) {\n  params = params || {\n    bubbles: false,\n    cancelable: false,\n    detail: undefined\n  };\n  const event = document.createEvent(\"CustomEvent\");\n  event.initCustomEvent(eventName, params.bubbles, params.cancelable, params.detail);\n  const originalPreventDefault = event.preventDefault;\n  event.preventDefault = function() {\n    originalPreventDefault.call(this);\n    try {\n      Object.defineProperty(this, 'defaultPrevented', {\n        get: function () {\n          return true;\n        }\n      });\n    } catch(e) {\n      this.defaultPrevented = true;\n    }\n  };\n\n  return event;\n}\nObject.setPrototypeOf(customEventPolyfill, window.Event.prototype);\n\ntry {\n  new window.CustomEvent('test');\n  customEventConstructor = window.CustomEvent;\n} catch(e) {\n  customEventConstructor = customEventPolyfill;\n}\n\nexport default customEventConstructor;\n\n\n\n// WEBPACK FOOTER //\n// ./elements/elix-mixins/src/CustomEvent.js","import createSymbol from './createSymbol';\n\n/**\n * A collection of Symbol objects for standard component properties and methods.\n *\n * These Symbol objects are used to allow mixins and a component to internally\n * communicate, without exposing these properties and methods in the component's\n * public API.\n *\n * To use these Symbol objects in your own component, include this module and\n * then create a property or method whose key is the desired Symbol.\n *\n *     import 'SingleSelectionMixin' from 'elix-mixins/src/SingleSelectionMixin';\n *     import 'symbols' from 'elix-mixins/src/symbols';\n *\n *     class MyElement extends SingleSelectionMixin(HTMLElement) {\n *       [symbols.itemSelected](item, selected) {\n *         // This will be invoked whenever an item is selected/deselected.\n *       }\n *     }\n *\n * @module symbols\n */\nconst symbols = {\n\n  /**\n   * Symbol for the `defaults` property.\n   *\n   * This property can be used to set or override defaults that will be applied\n   * to a new component instance. When implementing this property, take care to\n   * first acquire any defaults defined by the superclass. The standard idiom is\n   * as follows:\n   *\n   *     get [symbols.defaults]() {\n   *       const defaults = super[symbols.defaults] || {};\n   *       // Set or override default values here\n   *       defaults.customProperty = false;\n   *       return defaults;\n   *     }\n   *\n   * @var {object} defaults\n   */\n  defaults: createSymbol('defaults'),\n\n  /**\n   * Symbol for the `raiseChangeEvents` property.\n   *\n   * This property is used by mixins to determine whether they should raise\n   * property change events. The standard HTML pattern is to only raise such\n   * events in response to direct user interactions. For a detailed discussion\n   * of this point, see the Gold Standard checklist item for\n   * [Propery Change Events](https://github.com/webcomponents/gold-standard/wiki/Property%20Change%20Events).\n   *\n   * The above article describes a pattern for using a flag to track whether\n   * work is being performed in response to internal component activity, and\n   * whether the component should therefore raise property change events.\n   * This `raiseChangeEvents` symbol is a shared flag used for that purpose by\n   * all Elix mixins and components. Sharing this flag ensures that internal\n   * activity (e.g., a UI event listener) in one mixin can signal other mixins\n   * handling affected properties to raise change events.\n   *\n   * All UI event listeners (and other forms of internal handlers, such as\n   * timeouts and async network handlers) should set `raiseChangeEvents` to\n   * `true` at the start of the event handler, then `false` at the end:\n   *\n   *     this.addEventListener('click', event => {\n   *       this[symbols.raiseChangeEvents] = true;\n   *       // Do work here, possibly setting properties, like:\n   *       this.foo = 'Hello';\n   *       this[symbols.raiseChangeEvents] = false;\n   *     });\n   *\n   * Elsewhere, property setters that raise change events should only do so it\n   * this property is `true`:\n   *\n   *     set foo(value) {\n   *       // Save foo value here, do any other work.\n   *       if (this[symbols.raiseChangeEvents]) {\n   *         const event = new CustomEvent('foo-changed');\n   *         this.dispatchEvent(event);\n   *       }\n   *     }\n   *\n   * In this way, programmatic attempts to set the `foo` property will not\n   * trigger the `foo-changed` event, but UI interactions that update that\n   * property will cause those events to be raised.\n   *\n   * @var {boolean} raiseChangeEvents\n   */\n  raiseChangeEvents: createSymbol('raiseChangeEvents'),\n\n  /**\n   * Symbol for the `itemAdded` method.\n   *\n   * This method is invoked when a new item is added to a list.\n   *\n   * @function itemAdded\n   * @param {HTMLElement} item - the item being selected/deselected\n   */\n  itemAdded: createSymbol('itemAdded'),\n\n  /**\n   * Symbol for the `itemsChanged` method.\n   *\n   * This method is invoked when the underlying contents change. It is also\n   * invoked on component initialization – since the items have \"changed\" from\n   * being nothing.\n   *\n   * @function itemsChanged\n   */\n  itemsChanged: createSymbol('itemsChanged'),\n\n  /**\n   * Symbol for the `itemSelected` method.\n   *\n   * This method is invoked when an item becomes selected or deselected.\n   *\n   * @function itemSelected\n   * @param {HTMLElement} item - the item being selected/deselected\n   * @param {boolean} selected - true if the item is selected, false if not\n   */\n  itemSelected: createSymbol('itemSelected')\n\n};\n\nexport default symbols;\n\n\n\n// WEBPACK FOOTER //\n// ./elements/elix-mixins/src/symbols.js"],"sourceRoot":""}