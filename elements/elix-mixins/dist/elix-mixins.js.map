{"version":3,"sources":["webpack:///webpack/bootstrap 47a85af58dc0fc011a70","webpack:///./elements/elix-mixins/globals.js","webpack:///./elements/elix-mixins/src/microtask.js","webpack:///./elements/elix-mixins/src/SelectionAriaMixin.js","webpack:///./elements/elix-mixins/src/symbols.js","webpack:///./elements/elix-mixins/src/Symbol.js","webpack:///./elements/elix-mixins/src/ShadowTemplateMixin.js","webpack:///./elements/elix-mixins/src/SingleSelectionMixin.js"],"names":["window","Elix","microtask","SelectionAriaMixin","ShadowTemplateMixin","SingleSelectionMixin","Symbol","symbols","callbacks","element","document","createTextNode","counter","callback","push","textContent","executeCallbacks","length","shift","observer","MutationObserver","observe","characterData","base","SelectionAria","getAttribute","defaults","role","setAttribute","itemAdded","item","itemRole","id","baseId","idCount","itemSelected","selected","itemId","prototype","removeAttribute","raiseChangeEvents","itemsChanged","template","count","uniqueString","description","symbolFunction","mapTagToTemplate","ShadowTemplate","tag","localName","console","warn","templateText","createElement","innerHTML","ShadyCSS","prepareTemplate","root","attachShadow","mode","clone","importNode","content","appendChild","applyStyle","canSelectNextSymbol","canSelectPreviousSymbol","selectionRequiredSymbol","selectionWrapsSymbol","externalSelectedIndexSymbol","externalSelectedItemSymbol","internalSelectedIndexSymbol","internalSelectedItemSymbol","SingleSelection","selectionRequired","selectionWraps","selectedItem","trackSelectedItem","updatePossibleNavigations","selectIndex","items","selectedIndex","newIndex","canSelectNext","changed","dispatchEvent","CustomEvent","canSelectPrevious","index","parsedIndex","parseInt","hasItems","event","detail","value","previousSelectedItem","Array","indexOf","call","String","boundedIndex","Math","max","min","previousIndex","itemCount","indexInCurrentItems","previousSelectedIndex","newSelectedIndex"],"mappings":"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","file":"elix-mixins.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 47a85af58dc0fc011a70","/*\n * This file is transpiled to create an ES5-compatible distribution in which\n * the package's main feature(s) are available via the window.Elix global.\n * If you're already using ES6 yourself, ignore this file, and instead import\n * the source file(s) you want from the src folder.\n */\n\nimport microtask from './src/microtask';\nimport SelectionAriaMixin from './src/SelectionAriaMixin';\nimport ShadowTemplateMixin from './src/ShadowTemplateMixin';\nimport SingleSelectionMixin from './src/SingleSelectionMixin';\nimport Symbol from './src/Symbol';\nimport symbols from './src/symbols';\n\nwindow.Elix = window.Elix || {};\n\nwindow.Elix.microtask = microtask;\nwindow.Elix.SelectionAriaMixin = SelectionAriaMixin;\nwindow.Elix.ShadowTemplateMixin = ShadowTemplateMixin;\nwindow.Elix.SingleSelectionMixin = SingleSelectionMixin;\nwindow.Elix.Symbol = Symbol;\nwindow.Elix.symbols = symbols;\n\n\n\n// WEBPACK FOOTER //\n// ./elements/elix-mixins/globals.js","/*\n * Microtask helper for IE 11.\n *\n * Executing a function as a microtask is trivial in browsers that support\n * promises, whose then() clauses use microtask timing. IE 11 doesn't support\n * promises, but does support MutationObservers, which are also executed as\n * microtasks. So this helper uses an MutationObserver to achieve microtask\n * timing.\n *\n * See https://jakearchibald.com/2015/tasks-microtasks-queues-and-schedules/\n *\n * Inspired by Polymer's async() function.\n */\n\n\n// The queue of pending callbacks to be executed as microtasks.\nconst callbacks = [];\n\n// Create an element that we will modify to force observable mutations.\nconst element = document.createTextNode('');\n\n// A monotonically-increasing value.\nlet counter = 0;\n\n\n/**\n * Add a callback to the microtask queue.\n *\n * This uses a MutationObserver so that it works on IE 11.\n *\n * NOTE: IE 11 may actually use timeout timing with MutationObservers. This\n * needs more investigation.\n *\n * @function microtask\n * @param {function} callback\n */\nexport default function microtask(callback) {\n  callbacks.push(callback);\n  // Force a mutation.\n  element.textContent = ++counter;\n}\n\n\n// Execute any pending callbacks.\nfunction executeCallbacks() {\n  while (callbacks.length > 0) {\n    const callback = callbacks.shift();\n    callback();\n  }\n}\n\n\n// Create the observer.\nconst observer = new MutationObserver(executeCallbacks);\nobserver.observe(element, {\n  characterData: true\n});\n\n\n\n// WEBPACK FOOTER //\n// ./elements/elix-mixins/src/microtask.js","import symbols from './symbols';\n\n\n// Used to assign unique IDs to item elements without IDs.\nlet idCount = 0;\n\n\n/**\n * Mixin which treats the selected item in a list as the active item in ARIA\n * accessibility terms.\n *\n * Handling ARIA selection state properly is actually quite complex:\n *\n * * The items in the list need to be indicated as possible items via an ARIA\n *   `role` attribute value such as \"option\".\n * * The selected item need to be marked as selected by setting the item's\n *   `aria-selected` attribute to true *and* the other items need be marked as\n *   *not* selected by setting `aria-selected` to false.\n * * The outermost element with the keyboard focus needs to have attributes\n *   set on it so that the selection is knowable at the list level via the\n *   `aria-activedescendant` attribute.\n * * Use of `aria-activedescendant` in turn requires that all items in the\n *   list have ID attributes assigned to them.\n *\n * This mixin tries to address all of the above requirements. To that end,\n * this mixin will assign generated IDs to any item that doesn't already have\n * an ID.\n *\n * ARIA relies on elements to provide `role` attributes. This mixin will apply\n * a default role of \"listbox\" on the outer list if it doesn't already have an\n * explicit role. Similarly, this mixin will apply a default role of \"option\"\n * to any list item that does not already have a role specified.\n *\n * This mixin expects a set of members that manage the state of the selection:\n * `[symbols.itemSelected]`, `[symbols.itemAdded]`, and `selectedItem`. You can\n * supply these yourself, or do so via\n * [SingleSelectionMixin](SingleSelectionMixin.md).\n *\n * @module\n * @param base {Class} the base class to extend\n * @returns {Class} the extended class\n */\nexport default function (base) {\n\n  /**\n   * The class prototype added by the mixin.\n   */\n  class SelectionAria extends base {\n\n    connectedCallback() {\n      if (super.connectedCallback) { super.connectedCallback(); }\n\n      // Set default ARIA role for the overall component.\n      if (this.getAttribute('role') == null && this[symbols.defaults].role) {\n        this.setAttribute('role', this[symbols.defaults].role);\n      }\n    }\n\n    get [symbols.defaults]() {\n      const defaults = super[symbols.defaults] || {};\n      defaults.role = 'listbox';\n      defaults.itemRole = 'option';\n      return defaults;\n    }\n\n    [symbols.itemAdded](item) {\n      if (super[symbols.itemAdded]) { super[symbols.itemAdded](item); }\n\n      if (!item.getAttribute('role')) {\n        // Assign a default ARIA role for an individual item.\n        item.setAttribute('role', this[symbols.defaults].itemRole);\n      }\n\n      // Ensure each item has an ID so we can set aria-activedescendant on the\n      // overall list whenever the selection changes.\n      //\n      // The ID will take the form of a base ID plus a unique integer. The base\n      // ID will be incorporate the component's own ID. E.g., if a component has\n      // ID \"foo\", then its items will have IDs that look like \"_fooOption1\". If\n      // the compnent has no ID itself, its items will get IDs that look like\n      // \"_option1\". Item IDs are prefixed with an underscore to differentiate\n      // them from manually-assigned IDs, and to minimize the potential for ID\n      // conflicts.\n      if (!item.id) {\n        const baseId = this.id ?\n            \"_\" + this.id + \"Option\" :\n            \"_option\";\n        item.id = baseId + idCount++;\n      }\n    }\n\n    [symbols.itemSelected](item, selected) {\n      if (super[symbols.itemSelected]) { super[symbols.itemSelected](item, selected); }\n      item.setAttribute('aria-selected', selected);\n      const itemId = item.id;\n      if (itemId && selected) {\n        this.setAttribute('aria-activedescendant', itemId);\n      }\n    }\n\n    get selectedItem() {\n      return super.selectedItem;\n    }\n    set selectedItem(item) {\n      if ('selectedItem' in base.prototype) { super.selectedItem = item; }\n      if (item == null) {\n        // Selection was removed.\n        this.removeAttribute('aria-activedescendant');\n      }\n    }\n\n  }\n\n  return SelectionAria;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./elements/elix-mixins/src/SelectionAriaMixin.js","import Symbol from './Symbol';\n\n\n/**\n * A collection of (potentially polyfilled) Symbol objects for standard\n * component properties and methods.\n *\n * These Symbol objects are used to allow mixins and a component to internally\n * communicate, without exposing these properties and methods in the component's\n * public API.\n *\n * To use these Symbol objects in your own component, include this module and\n * then create a property or method whose key is the desired Symbol.\n *\n *     import 'SingleSelectionMixin' from 'elix-mixins/src/SingleSelectionMixin';\n *     import 'symbols' from 'elix-mixins/src/symbols';\n *\n *     class MyElement extends SingleSelectionMixin(HTMLElement) {\n *       [symbols.itemSelected](item, selected) {\n *         // This will be invoked whenever an item is selected/deselected.\n *       }\n *     }\n *\n * @module symbols\n */\nconst symbols = {\n\n  /**\n   * Symbol for the `defaults` property.\n   *\n   * This property can be used to set or override defaults that will be applied\n   * to a new component instance. When implementing this property, take care to\n   * first acquire any defaults defined by the superclass. The standard idiom is\n   * as follows:\n   *\n   *     get [symbols.defaults]() {\n   *       const defaults = super[symbols.defaults] || {};\n   *       // Set or override default values here\n   *       defaults.customProperty = false;\n   *       return defaults;\n   *     }\n   *\n   * @var {object} defaults\n   */\n  defaults: Symbol('defaults'),\n\n  /**\n   * Symbol for the `raiseChangeEvents` property.\n   *\n   * This property is used by mixins to determine whether they should raise\n   * property change events. The standard HTML pattern is to only raise such\n   * events in response to direct user interactions. For a detailed discussion\n   * of this point, see the Gold Standard checklist item for\n   * [Propery Change Events](https://github.com/webcomponents/gold-standard/wiki/Property%20Change%20Events).\n   *\n   * The above article describes a pattern for using a flag to track whether\n   * work is being performed in response to internal component activity, and\n   * whether the component should therefore raise property change events.\n   * This `raiseChangeEvents` symbol is a shared flag used for that purpose by\n   * all Elix mixins and components. Sharing this flag ensures that internal\n   * activity (e.g., a UI event listener) in one mixin can signal other mixins\n   * handling affected properties to raise change events.\n   *\n   * All UI event listeners (and other forms of internal handlers, such as\n   * timeouts and async network handlers) should set `raiseChangeEvents` to\n   * `true` at the start of the event handler, then `false` at the end:\n   *\n   *     this.addEventListener('click', event => {\n   *       this[symbols.raiseChangeEvents] = true;\n   *       // Do work here, possibly setting properties, like:\n   *       this.foo = 'Hello';\n   *       this[symbols.raiseChangeEvents] = false;\n   *     });\n   *\n   * Elsewhere, property setters that raise change events should only do so it\n   * this property is `true`:\n   *\n   *     set foo(value) {\n   *       // Save foo value here, do any other work.\n   *       if (this[symbols.raiseChangeEvents]) {\n   *         const event = new CustomEvent('foo-changed');\n   *         this.dispatchEvent(event);\n   *       }\n   *     }\n   *\n   * In this way, programmatic attempts to set the `foo` property will not\n   * trigger the `foo-changed` event, but UI interactions that update that\n   * property will cause those events to be raised.\n   *\n   * @var {boolean} raiseChangeEvents\n   */\n  raiseChangeEvents: Symbol('raiseChangeEvents'),\n\n  /**\n   * Symbol for the `itemAdded` method.\n   *\n   * This method is invoked when a new item is added to a list.\n   *\n   * @function itemAdded\n   * @param {HTMLElement} item - the item being selected/deselected\n   */\n  itemAdded: Symbol('itemAdded'),\n\n  /**\n   * Symbol for the `itemsChanged` method.\n   *\n   * This method is invoked when the underlying contents change. It is also\n   * invoked on component initialization – since the items have \"changed\" from\n   * being nothing.\n   *\n   * @function itemsChanged\n   */\n  itemsChanged: Symbol('itemsChanged'),\n\n  /**\n   * Symbol for the `itemSelected` method.\n   *\n   * This method is invoked when an item becomes selected or deselected.\n   *\n   * @function itemSelected\n   * @param {HTMLElement} item - the item being selected/deselected\n   * @param {boolean} selected - true if the item is selected, false if not\n   */\n  itemSelected: Symbol('itemSelected'),\n\n  /**\n   * Symbol for the `template` property.\n   *\n   * This property returns a component's template.\n   *\n   * @type {string|HTMLTemplateElement}\n   */\n  template: Symbol('template')\n};\n\nexport default symbols;\n\n\n\n// WEBPACK FOOTER //\n// ./elements/elix-mixins/src/symbols.js","/* The number of fake symbols we've served up */\nlet count = 0;\n\nfunction uniqueString(description) {\n  return `_${description}${count++}`;\n}\n\nconst symbolFunction = typeof window.Symbol === 'function' ?\n  window.Symbol :\n  uniqueString;\n\n/**\n * Polyfill for ES6 symbol class.\n *\n * Mixins and component classes often want to associate private data with an\n * element instance, but JavaScript does not have direct support for true\n * private properties. One approach is to use the\n * [Symbol](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol)\n * data type to set and retrieve data on an element.\n *\n * Unfortunately, the Symbol type is not available in Internet Explorer 11. In\n * lieu of returning a true Symbol, this polyfill returns a different string\n * each time it is called.\n *\n * Usage:\n *\n *     const fooSymbol = Symbol('foo');\n *\n *     class MyElement extends HTMLElement {\n *       get foo() {\n *         return this[fooSymbol];\n *       }\n *       set foo(value) {\n *         this[fooSymbol] = value;\n *       }\n *     }\n *\n * In IE 11, this sample will \"hide\" data behind an instance property that looks\n * like this._foo0. The underscore is meant to reduce (not eliminate) potential\n * accidental access, and the unique number at the end is mean to avoid (not\n * eliminate) naming conflicts.\n *\n * @function Symbol\n * @param {string} description - A string to identify the symbol when debugging\n * @returns {Symbol|string} — A Symbol (in ES6 browsers) or unique string ID (in\n * ES5).\n */\nexport default symbolFunction;\n\n\n\n// WEBPACK FOOTER //\n// ./elements/elix-mixins/src/Symbol.js","import symbols from '../src/symbols';\n\n\n// A cache of processed templates.\n//\n// We maintain this as a map keyed by element tag (localName). We could store\n// an element's processed template on its element prototype. One scenario that\n// wouldn't support would be registration of the same constructor under multiple\n// tag names, which was a (perhaps theoretical) use case for Custom Elements.\n//\nconst mapTagToTemplate = {};\n\n\n/**\n * Mixin which adds stamping a template into a Shadow DOM subtree upon component\n * instantiation.\n *\n * To use this mixin, define a `template` property as a string or HTML\n * `<template>` element:\n *\n *     class MyElement extends ShadowTemplateMixin(HTMLElement) {\n *       get [symbols.template]() {\n *         return `Hello, <em>world</em>.`;\n *       }\n *     }\n *\n * When your component class is instantiated, a shadow root will be created on\n * the instance, and the contents of the template will be cloned into the\n * shadow root. If your component does not define a `template` property, this\n * mixin has no effect.\n *\n * For the time being, this extension retains support for Shadow DOM v0. That\n * will eventually be deprecated as browsers (and the Shadow DOM polyfill)\n * implement Shadow DOM v1.\n *\n * @module ShadowTemplateMixin\n * @param base {Class} the base class to extend\n * @returns {Class} the extended class\n */\nexport default function ShadowTemplateMixin(base) {\n\n  /**\n   * The class prototype added by the mixin.\n   */\n  class ShadowTemplate extends base {\n\n    /*\n     * If the component defines a template, a shadow root will be created on the\n     * component instance, and the template stamped into it.\n     */\n    constructor() {\n      super();\n\n      const tag = this.localName;\n      let template = mapTagToTemplate[tag];\n\n      // See if we've already processed a template for this tag.\n      if (!template) {\n        // This is the first time we've created an instance of this tag.\n\n        // Get the template and perform initial processing.\n        template = this[symbols.template];\n        if (!template) {\n          console.warn(`ShadowTemplateMixin expects a component to define a template property with [symbols.template].`);\n          return;\n        }\n\n        if (typeof template === 'string') {\n          // Upgrade plain string to real template.\n          const templateText = template;\n          template = document.createElement('template');\n          template.innerHTML = templateText;\n        }\n\n        if (window.ShadyCSS) {\n          // Let the CSS polyfill do its own initialization.\n          window.ShadyCSS.prepareTemplate(template, tag);\n        }\n\n        // Store this for the next time we create the same type of element.\n        mapTagToTemplate[tag] = template;\n      }\n\n      // Stamp the template into a new shadow root.\n      const root = this.attachShadow({ mode: 'open' });\n      const clone = document.importNode(template.content, true);\n      root.appendChild(clone);\n    }\n\n    connectedCallback() {\n      if (super.connectedCallback) { super.connectedCallback(); }\n      if (window.ShadyCSS) {\n        window.ShadyCSS.applyStyle(this);\n      }\n    }\n\n  }\n\n  return ShadowTemplate;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./elements/elix-mixins/src/ShadowTemplateMixin.js","import Symbol from './Symbol';\nimport symbols from './symbols';\n\n\n// Symbols for private data members on an element.\nconst canSelectNextSymbol = Symbol('canSelectNext');\nconst canSelectPreviousSymbol = Symbol('canSelectPrevious');\nconst selectionRequiredSymbol = Symbol('selectionRequired');\nconst selectionWrapsSymbol = Symbol('selectionWraps');\n\n// We want to expose both selectedIndex and selectedItem as independent\n// properties but keep them in sync. This allows a component user to reference\n// the selection by whatever means is most natural for their situation.\n//\n// To efficiently keep these properties in sync, we track \"external\" and\n// \"internal\" references for each property:\n//\n// The external index or item is the one we report to the outside world when\n// asked for selection.  When handling a change to index or item, we update the\n// external reference as soon as possible, so that if anyone immediately asks\n// for the current selection, they will receive a stable answer.\n//\n// The internal index or item tracks whichever index or item last received the\n// full set of processing. Processing includes raising a change event for the\n// new value. Once we've begun that processing, we store the new value as the\n// internal value to indicate we've handled it.\n//\nconst externalSelectedIndexSymbol = Symbol('externalSelectedIndex');\nconst externalSelectedItemSymbol = Symbol('externalSelectedItem');\nconst internalSelectedIndexSymbol = Symbol('internalSelectedIndex');\nconst internalSelectedItemSymbol = Symbol('internalSelectedItem');\n\n\n/**\n * Mixin which adds single-selection semantics for items in a list.\n *\n * This mixin expects a component to provide an `items` Array or NodeList of\n * all elements in the list.\n *\n * This mixin tracks a single selected item in the list, and provides means to\n * get and set that state by item position (`selectedIndex`) or item identity\n * (`selectedItem`). The selection can be moved in the list via the methods\n * `selectFirst`, `selectLast`, `selectNext`, and `selectPrevious`.\n *\n * This mixin does not produce any user-visible effects to represent\n * selection.\n *\n * @module SingleSelectionMixin\n * @param base {Class} the base class to extend\n * @returns {Class} the extended class\n */\nexport default function SingleSelectionMixin(base) {\n\n  /**\n   * The class prototype added by the mixin.\n   */\n  class SingleSelection extends base {\n\n    constructor() {\n      super();\n      // Set defaults.\n      if (typeof this.selectionRequired === 'undefined') {\n        this.selectionRequired = this[symbols.defaults].selectionRequired;\n      }\n      if (typeof this.selectionWraps === 'undefined') {\n        this.selectionWraps = this[symbols.defaults].selectionWraps;\n      }\n    }\n\n    /**\n     * True if the selection can be moved to the next item, false if not (the\n     * selected item is the last item in the list).\n     *\n     * @type {boolean}\n     */\n    get canSelectNext() {\n      return this[canSelectNextSymbol];\n    }\n    set canSelectNext(canSelectNext) {\n      const changed = canSelectNext !== this[canSelectNextSymbol];\n      this[canSelectNextSymbol] = canSelectNext;\n      if ('canSelectNext' in base.prototype) { super.canSelectNext = canSelectNext; }\n      if (this[symbols.raiseChangeEvents] && changed) {\n        this.dispatchEvent(new CustomEvent('can-select-next-changed'));\n      }\n    }\n\n    /**\n     * True if the selection can be moved to the previous item, false if not\n     * (the selected item is the first one in the list).\n     *\n     * @type {boolean}\n     */\n    get canSelectPrevious() {\n      return this[canSelectPreviousSymbol];\n    }\n    set canSelectPrevious(canSelectPrevious) {\n      const changed = canSelectPrevious !== this[canSelectPreviousSymbol];\n      this[canSelectPreviousSymbol] = canSelectPrevious;\n      if ('canSelectPrevious' in base.prototype) { super.canSelectPrevious = canSelectPrevious; }\n      if (this[symbols.raiseChangeEvents] && changed) {\n        this.dispatchEvent(new CustomEvent('can-select-previous-changed'));\n      }\n    }\n\n    get [symbols.defaults]() {\n      const defaults = super[symbols.defaults] || {};\n      defaults.selectionRequired = false;\n      defaults.selectionWraps = false;\n      return defaults;\n    }\n\n    /**\n     * Handle a new item being added to the list.\n     *\n     * The default implementation of this method simply sets the item's\n     * selection state to false.\n     *\n     * @param {HTMLElement} item - the item being added\n     */\n    [symbols.itemAdded](item) {\n      if (super[symbols.itemAdded]) { super[symbols.itemAdded](item); }\n      this[symbols.itemSelected](item, item === this.selectedItem);\n    }\n\n    [symbols.itemsChanged]() {\n      if (super[symbols.itemsChanged]) { super[symbols.itemsChanged](); }\n\n      // In case selected item changed position or was removed.\n      trackSelectedItem(this);\n\n      // In case the change in items affected which navigations are possible.\n      updatePossibleNavigations(this);\n    }\n\n    /**\n     * Apply the indicate selection state to the item.\n     *\n     * The default implementation of this method does nothing. User-visible\n     * effects will typically be handled by other mixins.\n     *\n     * @param {HTMLElement} item - the item being selected/deselected\n     * @param {boolean} selected - true if the item is selected, false if not\n     */\n    [symbols.itemSelected](item, selected) {\n      if (super[symbols.itemSelected]) { super[symbols.itemSelected](item, selected); }\n    }\n\n    /**\n     * The index of the item which is currently selected.\n     *\n     * The setter expects an integer or a string representing an integer.\n     *\n     * A `selectedIndex` of -1 indicates there is no selection. Setting this\n     * property to -1 will remove any existing selection.\n     *\n     * @type {number}\n     */\n    get selectedIndex() {\n      return this[externalSelectedIndexSymbol] != null ?\n        this[externalSelectedIndexSymbol] :\n        -1;\n    }\n    set selectedIndex(index) {\n      // See notes at top about internal vs. external copies of this property.\n      const changed = index !== this[internalSelectedIndexSymbol];\n      let item;\n      let parsedIndex = parseInt(index);\n      if (parsedIndex !== this[externalSelectedIndexSymbol]) {\n        // Store the new index and the corresponding item.\n        const items = this.items;\n        const hasItems = items && items.length > 0;\n        if (!(hasItems && parsedIndex >= 0 && parsedIndex < items.length)) {\n          parsedIndex = -1; // No item at that index.\n        }\n        this[externalSelectedIndexSymbol] = parsedIndex;\n        item = hasItems && parsedIndex >= 0 ? items[parsedIndex] : null;\n        this[externalSelectedItemSymbol] = item;\n      } else {\n        item = this[externalSelectedItemSymbol];\n      }\n\n      // Now let super do any work.\n      if ('selectedIndex' in base.prototype) { super.selectedIndex = index; }\n\n      if (changed) {\n        // The selected index changed.\n        this[internalSelectedIndexSymbol] = parsedIndex;\n\n        if (this[symbols.raiseChangeEvents]) {\n          const event = new CustomEvent('selected-index-changed', {\n            detail: {\n              selectedIndex: parsedIndex,\n              value: parsedIndex // for Polymer binding. TODO: Verify still necessary\n            }\n          });\n          this.dispatchEvent(event);\n        }\n      }\n\n      if (this[internalSelectedItemSymbol] !== item) {\n        // Update selectedItem property so it can have its own effects.\n        this.selectedItem = item;\n      }\n    }\n\n    /**\n     * The currently selected item, or null if there is no selection.\n     *\n     * Setting this property to null deselects any currently-selected item.\n     * Setting this property to an object that is not in the list has no effect.\n     *\n     * TODO: Even if selectionRequired, can still explicitly set selectedItem to null.\n     * TODO: If selectionRequired, leave selection alone?\n     *\n     * @type {object}\n     */\n    get selectedItem() {\n      return this[externalSelectedItemSymbol] || null;\n    }\n    set selectedItem(item) {\n      // See notes at top about internal vs. external copies of this property.\n      const previousSelectedItem = this[internalSelectedItemSymbol];\n      const changed = item !== previousSelectedItem;\n      let index;\n      if (item !== this[externalSelectedItemSymbol]) {\n        // Store item and look up corresponding index.\n        const items = this.items;\n        const hasItems = items && items.length > 0;\n        index = hasItems ? Array.prototype.indexOf.call(items, item) : -1;\n        this[externalSelectedIndexSymbol] = index;\n        if (index < 0) {\n          item = null; // The indicated item isn't actually in `items`.\n        }\n        this[externalSelectedItemSymbol] = item;\n      } else {\n        index = this[externalSelectedIndexSymbol];\n      }\n\n      // Now let super do any work.\n      if ('selectedItem' in base.prototype) { super.selectedItem = item; }\n\n      if (changed) {\n        // The selected item changed.\n        this[internalSelectedItemSymbol] = item;\n\n        if (previousSelectedItem) {\n          // Update selection state of old item.\n          this[symbols.itemSelected](previousSelectedItem, false);\n        }\n        if (item) {\n          // Update selection state to new item.\n          this[symbols.itemSelected](item, true);\n        }\n\n        updatePossibleNavigations(this);\n\n        if (this[symbols.raiseChangeEvents]) {\n          const event = new CustomEvent('selected-item-changed', {\n            detail: {\n              selectedItem: item,\n              value: item // for Polymer binding\n            }\n          });\n          this.dispatchEvent(event);\n        }\n      }\n\n      if (this[internalSelectedIndexSymbol] !== index) {\n        // Update selectedIndex property so it can have its own effects.\n        this.selectedIndex = index;\n      }\n    }\n\n    /**\n     * Select the first item in the list.\n     *\n     * @returns {Boolean} True if the selection changed, false if not.\n     */\n    selectFirst() {\n      if (super.selectFirst) { super.selectFirst(); }\n      return selectIndex(this, 0);\n    }\n\n    /**\n     * True if the list should always have a selection (if it has items).\n     *\n     * @type {boolean}\n     * @default false\n     */\n    get selectionRequired() {\n      return this[selectionRequiredSymbol];\n    }\n    set selectionRequired(selectionRequired) {\n      this[selectionRequiredSymbol] = selectionRequired;\n      if ('selectionRequired' in base.prototype) { super.selectionRequired = selectionRequired; }\n      trackSelectedItem(this);\n    }\n\n    /**\n     * True if selection navigations wrap from last to first, and vice versa.\n     *\n     * @type {boolean}\n     * @default false\n     */\n    get selectionWraps() {\n      return this[selectionWrapsSymbol];\n    }\n    set selectionWraps(value) {\n      this[selectionWrapsSymbol] = String(value) === 'true';\n      if ('selectionWraps' in base.prototype) { super.selectionWraps = value; }\n      updatePossibleNavigations(this);\n    }\n\n    /**\n     * Select the last item in the list.\n     *\n     * @returns {Boolean} True if the selection changed, false if not.\n     */\n    selectLast() {\n      if (super.selectLast) { super.selectLast(); }\n      return selectIndex(this, this.items.length - 1);\n    }\n\n    /**\n     * Select the next item in the list.\n     *\n     * If the list has no selection, the first item will be selected.\n     *\n     * @returns {Boolean} True if the selection changed, false if not.\n     */\n    selectNext() {\n      if (super.selectNext) { super.selectNext(); }\n      return selectIndex(this, this.selectedIndex + 1);\n    }\n\n    /**\n     * Select the previous item in the list.\n     *\n     * If the list has no selection, the last item will be selected.\n     *\n     * @returns {Boolean} True if the selection changed, false if not.\n     */\n    selectPrevious() {\n      if (super.selectPrevious) { super.selectPrevious(); }\n      const newIndex = this.selectedIndex < 0 ?\n        this.items.length - 1 :     // No selection yet; select last item.\n        this.selectedIndex - 1;\n      return selectIndex(this, newIndex);\n    }\n\n    /**\n     * Fires when the canSelectNext property changes in response to internal\n     * component activity.\n     *\n     * @memberof SingleSelection\n     * @event can-select-next-changed\n     */\n\n    /**\n     * Fires when the canSelectPrevious property changes in response to internal\n     * component activity.\n     *\n     * @memberof SingleSelection\n     * @event can-select-previous-changed\n     */\n\n    /**\n     * Fires when the selectedIndex property changes in response to internal\n     * component activity.\n     *\n     * @memberof SingleSelection\n     * @event selected-index-changed\n     * @param {number} detail.selectedIndex The new selected index.\n     */\n\n    /**\n     * Fires when the selectedItem property changes in response to internal\n     * component activity.\n     *\n     * @memberof SingleSelection\n     * @event selected-item-changed\n     * @param {HTMLElement} detail.selectedItem The new selected item.\n     */\n\n  }\n\n  return SingleSelection;\n}\n\n\n// Ensure the given index is within bounds, and select it if it's not already\n// selected.\nfunction selectIndex(element, index) {\n\n  const items = element.items;\n  if (items == null) {\n    // Nothing to select.\n    return false;\n  }\n\n  const count = items.length;\n  const boundedIndex = element.selectionWraps ?\n    // JavaScript mod doesn't handle negative numbers the way we want to wrap.\n    // See http://stackoverflow.com/a/18618250/76472\n    ((index % count) + count) % count :\n\n    // Keep index within bounds of array.\n    Math.max(Math.min(index, count - 1), 0);\n\n  const previousIndex = element.selectedIndex;\n  if (previousIndex !== boundedIndex) {\n    element.selectedIndex = boundedIndex;\n    return true;\n  } else {\n    return false;\n  }\n}\n\n// Following a change in the set of items, or in the value of the\n// `selectionRequired` property, reacquire the selected item. If it's moved,\n// update `selectedIndex`. If it's been removed, and a selection is required,\n// try to select another item.\nfunction trackSelectedItem(element) {\n\n  const items = element.items;\n  const itemCount = items ? items.length : 0;\n\n  const previousSelectedItem = element.selectedItem;\n  if (!previousSelectedItem) {\n    // No item was previously selected.\n    if (element.selectionRequired) {\n      // Select the first item by default.\n      element.selectedIndex = 0;\n    }\n  } else if (itemCount === 0) {\n    // We've lost the selection, and there's nothing left to select.\n    element.selectedItem = null;\n  } else {\n    // Try to find the previously-selected item in the current set of items.\n    const indexInCurrentItems = Array.prototype.indexOf.call(items, previousSelectedItem);\n    const previousSelectedIndex = element.selectedIndex;\n    if (indexInCurrentItems < 0) {\n      // Previously-selected item was removed from the items.\n      // Select the item at the same index (if it exists) or as close as possible.\n      const newSelectedIndex = Math.min(previousSelectedIndex, itemCount - 1);\n      // Select by item, since index may be the same, and we want to raise the\n      // selected-item-changed event.\n      element.selectedItem = items[newSelectedIndex];\n    } else if (indexInCurrentItems !== previousSelectedIndex) {\n      // Previously-selected item still there, but changed position.\n      element.selectedIndex = indexInCurrentItems;\n    }\n  }\n}\n\n// Following a change in selection, report whether it's now possible to\n// go next/previous from the given index.\nfunction updatePossibleNavigations(element) {\n  let canSelectNext;\n  let canSelectPrevious;\n  const items = element.items;\n  if (items == null || items.length === 0) {\n    // No items to select.\n    canSelectNext = false;\n    canSelectPrevious = false;\n  } else if (element.selectionWraps) {\n    // Since there are items, can always go next/previous.\n    canSelectNext = true;\n    canSelectPrevious = true;\n  } else {\n    const index = element.selectedIndex;\n    if (index < 0 && items.length > 0) {\n      // Special case. If there are items but no selection, declare that it's\n      // always possible to go next/previous to create a selection.\n      canSelectNext = true;\n      canSelectPrevious = true;\n    } else {\n      // Normal case: we have an index in a list that has items.\n      canSelectPrevious = (index > 0);\n      canSelectNext = (index < items.length - 1);\n    }\n  }\n  if (element.canSelectNext !== canSelectNext) {\n    element.canSelectNext = canSelectNext;\n  }\n  if (element.canSelectPrevious !== canSelectPrevious) {\n    element.canSelectPrevious = canSelectPrevious;\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./elements/elix-mixins/src/SingleSelectionMixin.js"],"sourceRoot":""}