{"version":3,"sources":["webpack:///elix-mixins.min.js","webpack:///webpack/bootstrap 572c37ea132dffe1245b","webpack:///./elements/elix-mixins/globals.js","webpack:///./elements/elix-mixins/src/microtask.js","webpack:///./elements/elix-mixins/src/SimpleAttributeMixin.js","webpack:///./elements/elix-mixins/src/SimpleTemplateMixin.js","webpack:///./elements/elix-mixins/src/SingleSelectionMixin.js","webpack:///./elements/elix-mixins/src/createSymbol.js","webpack:///./elements/elix-mixins/src/CustomEvent.js","webpack:///./elements/elix-mixins/src/symbols.js"],"names":["modules","__webpack_require__","moduleId","installedModules","exports","module","id","loaded","call","m","c","p","_interopRequireDefault","obj","__esModule","default","_microtask","_microtask2","_SimpleAttributeMixin","_SimpleAttributeMixin2","_SimpleTemplateMixin","_SimpleTemplateMixin2","_SingleSelectionMixin","_SingleSelectionMixin2","_symbols","_symbols2","window","Elix","microtask","SimpleAttributeMixin","SimpleTemplateMixin","SingleSelectionMixin","symbols","callback","callbacks","push","element","textContent","counter","executeCallbacks","length","shift","Object","defineProperty","value","document","createTextNode","observer","MutationObserver","observe","characterData","_classCallCheck","instance","Constructor","TypeError","_possibleConstructorReturn","self","ReferenceError","_inherits","subClass","superClass","prototype","create","constructor","enumerable","writable","configurable","setPrototypeOf","__proto__","base","SimpleAttribute","_base","this","getPrototypeOf","apply","arguments","_createClass","key","attributeName","oldValue","newValue","_get","HTMLElement","attribute","defineProperties","target","props","i","descriptor","protoProps","staticProps","get","object","property","receiver","Function","desc","getOwnPropertyDescriptor","undefined","parent","getter","SimpleTemplate","_this","template","root","attachShadow","mode","innerHTML","className","SingleSelection","selectionRequired","defaults","selectionWraps","itemAdded","item","itemSelected","selectedItem","itemsChanged","trackSelectedItem","updatePossibleNavigations","selected","selectIndex","items","selectedIndex","newIndex","canSelectNextSymbol","set","canSelectNext","changed","_set","raiseChangeEvents","dispatchEvent","_CustomEvent2","canSelectPreviousSymbol","canSelectPrevious","externalSelectedIndexSymbol","index","internalSelectedIndexSymbol","parsedIndex","parseInt","hasItems","externalSelectedItemSymbol","event","detail","internalSelectedItemSymbol","previousSelectedItem","Array","indexOf","selectionRequiredSymbol","selectionWrapsSymbol","String","count","boundedIndex","Math","max","min","previousIndex","itemCount","indexInCurrentItems","previousSelectedIndex","newSelectedIndex","setter","_createSymbol","_createSymbol2","_CustomEvent","createSymbol","description","Symbol","customEventPolyfill","eventName","params","bubbles","cancelable","createEvent","initCustomEvent","originalPreventDefault","preventDefault","e","defaultPrevented","customEventConstructor","Event","CustomEvent"],"mappings":"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","file":"elix-mixins.min.js","sourcesContent":["/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = __webpack_require__(1);\n\n\n/***/ },\n/* 1 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar _microtask = __webpack_require__(2);\n\t\n\tvar _microtask2 = _interopRequireDefault(_microtask);\n\t\n\tvar _SimpleAttributeMixin = __webpack_require__(3);\n\t\n\tvar _SimpleAttributeMixin2 = _interopRequireDefault(_SimpleAttributeMixin);\n\t\n\tvar _SimpleTemplateMixin = __webpack_require__(4);\n\t\n\tvar _SimpleTemplateMixin2 = _interopRequireDefault(_SimpleTemplateMixin);\n\t\n\tvar _SingleSelectionMixin = __webpack_require__(5);\n\t\n\tvar _SingleSelectionMixin2 = _interopRequireDefault(_SingleSelectionMixin);\n\t\n\tvar _symbols = __webpack_require__(8);\n\t\n\tvar _symbols2 = _interopRequireDefault(_symbols);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\twindow.Elix = window.Elix || {}; /*\n\t                                  * This file is transpiled to create an ES5-compatible distribution in which\n\t                                  * the package's main feature(s) are available via the window.Basic global.\n\t                                  * If you're already using ES6 yourself, ignore this file, and instead import\n\t                                  * the source file(s) you want from the src folder.\n\t                                  */\n\t\n\twindow.Elix.microtask = _microtask2.default;\n\twindow.Elix.SimpleAttributeMixin = _SimpleAttributeMixin2.default;\n\twindow.Elix.SimpleTemplateMixin = _SimpleTemplateMixin2.default;\n\twindow.Elix.SingleSelectionMixin = _SingleSelectionMixin2.default;\n\twindow.Elix.symbols = _symbols2.default;\n\n/***/ },\n/* 2 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\texports.default = microtask;\n\t/*\n\t * Microtask helper for IE 11.\n\t *\n\t * Executing a function as a microtask is trivial in browsers that support\n\t * promises, whose then() clauses use microtask timing. IE 11 doesn't support\n\t * promises, but does support MutationObservers, which are also executed as\n\t * microtasks. So this helper uses an MutationObserver to achieve microtask\n\t * timing.\n\t *\n\t * See https://jakearchibald.com/2015/tasks-microtasks-queues-and-schedules/\n\t *\n\t * Inspired by Polymer's async() function.\n\t */\n\t\n\t// The queue of pending callbacks to be executed as microtasks.\n\tvar callbacks = [];\n\t\n\t// Create an element that we will modify to force observable mutations.\n\tvar element = document.createTextNode('');\n\t\n\t// A monotonically-increasing value.\n\tvar counter = 0;\n\t\n\t/**\n\t * Add a callback to the microtask queue.\n\t *\n\t * This uses a MutationObserver so that it works on IE 11.\n\t *\n\t * NOTE: IE 11 may actually use timeout timing with MutationObservers. This\n\t * needs more investigation.\n\t *\n\t * @function microtask\n\t * @param {function} callback\n\t */\n\tfunction microtask(callback) {\n\t  callbacks.push(callback);\n\t  // Force a mutation.\n\t  element.textContent = ++counter;\n\t}\n\t\n\t// Execute any pending callbacks.\n\tfunction executeCallbacks() {\n\t  while (callbacks.length > 0) {\n\t    var callback = callbacks.shift();\n\t    callback();\n\t  }\n\t}\n\t\n\t// Create the observer.\n\tvar observer = new MutationObserver(executeCallbacks);\n\tobserver.observe(element, {\n\t  characterData: true\n\t});\n\n/***/ },\n/* 3 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if (\"value\" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };\n\t\n\texports.default = SimpleAttributeMixin;\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\t/**\n\t * Mixin which adds simplistic mapping of attributes to properties.\n\t *\n\t * @module SimpleAttributeMixin\n\t * @param base {Class} the base class to extend\n\t * @returns {Class} the extended class\n\t */\n\tfunction SimpleAttributeMixin(base) {\n\t\n\t  /**\n\t   * The class prototype added by the mixin.\n\t   */\n\t  var SimpleAttribute = function (_base) {\n\t    _inherits(SimpleAttribute, _base);\n\t\n\t    function SimpleAttribute() {\n\t      _classCallCheck(this, SimpleAttribute);\n\t\n\t      return _possibleConstructorReturn(this, (SimpleAttribute.__proto__ || Object.getPrototypeOf(SimpleAttribute)).apply(this, arguments));\n\t    }\n\t\n\t    _createClass(SimpleAttribute, [{\n\t      key: \"attributeChangedCallback\",\n\t\n\t\n\t      /*\n\t       * Handle a change to the attribute with the given name.\n\t       */\n\t      value: function attributeChangedCallback(attributeName, oldValue, newValue) {\n\t        if (_get(SimpleAttribute.prototype.__proto__ || Object.getPrototypeOf(SimpleAttribute.prototype), \"attributeChangedCallback\", this)) {\n\t          _get(SimpleAttribute.prototype.__proto__ || Object.getPrototypeOf(SimpleAttribute.prototype), \"attributeChangedCallback\", this).call(this);\n\t        }\n\t        // If the attribute name corresponds to a property name, set the property.\n\t        // Ignore standard HTMLElement properties handled by the DOM.\n\t        if (attributeName in this && !(attributeName in HTMLElement.prototype)) {\n\t          this[attributeName] = newValue;\n\t        }\n\t      }\n\t\n\t      /**\n\t       * Set/unset the attribute with the indicated name.\n\t       *\n\t       * This method exists primarily to handle the case where an element wants to\n\t       * set a default property value that should be reflected as an attribute. An\n\t       * important limitation of custom element consturctors is that they cannot\n\t       * set attributes. A call to `reflectAttribute` during the constructor will\n\t       * be deferred until the element is connected to the document.\n\t       *\n\t       * @param {string} attribute - The name of the *attribute* (not property) to set.\n\t       * @param {object} value - The value to set. If null, the attribute will be removed.\n\t       */\n\t\n\t    }, {\n\t      key: \"reflectAttribute\",\n\t      value: function reflectAttribute(attribute, value) {\n\t        // For documentation purposes only\n\t      }\n\t    }]);\n\t\n\t    return SimpleAttribute;\n\t  }(base);\n\t\n\t  return SimpleAttribute;\n\t}\n\n/***/ },\n/* 4 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\texports.default = SimpleTemplateMixin;\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\t/**\n\t * Mixin which adds a simplistic means of cloning a string template into a new\n\t * shadow root.\n\t *\n\t * @module SimpleTemplateMixin\n\t * @param base {Class} the base class to extend\n\t * @returns {Class} the extended class\n\t */\n\tfunction SimpleTemplateMixin(base) {\n\t\n\t  /**\n\t   * The class prototype added by the mixin.\n\t   */\n\t  var SimpleTemplate = function (_base) {\n\t    _inherits(SimpleTemplate, _base);\n\t\n\t    function SimpleTemplate() {\n\t      _classCallCheck(this, SimpleTemplate);\n\t\n\t      var _this = _possibleConstructorReturn(this, (SimpleTemplate.__proto__ || Object.getPrototypeOf(SimpleTemplate)).call(this));\n\t\n\t      var template = _this.template;\n\t      if (template) {\n\t        var root = _this.attachShadow({ mode: 'open' });\n\t        root.innerHTML = template;\n\t      }\n\t      return _this;\n\t    }\n\t\n\t    /**\n\t     * Set/unset the class with the indicated name.\n\t     *\n\t     * This method exists primarily to handle the case where an element wants to\n\t     * set a default property value that should be reflected as as class. An\n\t     * important limitation of custom element consturctors is that they cannot\n\t     * set attributes, including the `class` attribute. A call to\n\t     * `reflectClass` during the constructor will be deferred until the element\n\t     * is connected to the document.\n\t     *\n\t     * @param {string} className - The name of the class to set.\n\t     * @param {object} value - True to set the class, false to remove it.\n\t     */\n\t\n\t\n\t    _createClass(SimpleTemplate, [{\n\t      key: 'reflectClass',\n\t      value: function reflectClass(className, value) {\n\t        // For documentation purposes only\n\t      }\n\t    }]);\n\t\n\t    return SimpleTemplate;\n\t  }(base);\n\t\n\t  return SimpleTemplate;\n\t}\n\n/***/ },\n/* 5 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if (\"value\" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };\n\t\n\tvar _set = function set(object, property, value, receiver) { var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent !== null) { set(parent, property, value, receiver); } } else if (\"value\" in desc && desc.writable) { desc.value = value; } else { var setter = desc.set; if (setter !== undefined) { setter.call(receiver, value); } } return value; };\n\t\n\texports.default = SingleSelectionMixin;\n\t\n\tvar _createSymbol = __webpack_require__(6);\n\t\n\tvar _createSymbol2 = _interopRequireDefault(_createSymbol);\n\t\n\tvar _CustomEvent = __webpack_require__(7);\n\t\n\tvar _CustomEvent2 = _interopRequireDefault(_CustomEvent);\n\t\n\tvar _symbols = __webpack_require__(8);\n\t\n\tvar _symbols2 = _interopRequireDefault(_symbols);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\t// Symbols for private data members on an element.\n\tvar canSelectNextSymbol = (0, _createSymbol2.default)('canSelectNext');\n\tvar canSelectPreviousSymbol = (0, _createSymbol2.default)('canSelectPrevious');\n\tvar selectionRequiredSymbol = (0, _createSymbol2.default)('selectionRequired');\n\tvar selectionWrapsSymbol = (0, _createSymbol2.default)('selectionWraps');\n\t\n\t// We want to expose both selectedIndex and selectedItem as independent\n\t// properties but keep them in sync. This allows a component user to reference\n\t// the selection by whatever means is most natural for their situation.\n\t//\n\t// To efficiently keep these properties in sync, we track \"external\" and\n\t// \"internal\" references for each property:\n\t//\n\t// The external index or item is the one we report to the outside world when\n\t// asked for selection.  When handling a change to index or item, we update the\n\t// external reference as soon as possible, so that if anyone immediately asks\n\t// for the current selection, they will receive a stable answer.\n\t//\n\t// The internal index or item tracks whichever index or item last received the\n\t// full set of processing. Processing includes raising a change event for the\n\t// new value. Once we've begun that processing, we store the new value as the\n\t// internal value to indicate we've handled it.\n\t//\n\tvar externalSelectedIndexSymbol = (0, _createSymbol2.default)('externalSelectedIndex');\n\tvar externalSelectedItemSymbol = (0, _createSymbol2.default)('externalSelectedItem');\n\tvar internalSelectedIndexSymbol = (0, _createSymbol2.default)('internalSelectedIndex');\n\tvar internalSelectedItemSymbol = (0, _createSymbol2.default)('internalSelectedItem');\n\t\n\t/**\n\t * Mixin which adds single-selection semantics for items in a list.\n\t *\n\t * This mixin expects a component to provide an `items` Array or NodeList of\n\t * all elements in the list.\n\t *\n\t * This mixin tracks a single selected item in the list, and provides means to\n\t * get and set that state by item position (`selectedIndex`) or item identity\n\t * (`selectedItem`). The selection can be moved in the list via the methods\n\t * `selectFirst`, `selectLast`, `selectNext`, and `selectPrevious`.\n\t *\n\t * This mixin does not produce any user-visible effects to represent\n\t * selection.\n\t *\n\t * @module SingleSelectionMixin\n\t * @param base {Class} the base class to extend\n\t * @returns {Class} the extended class\n\t */\n\tfunction SingleSelectionMixin(base) {\n\t\n\t  /**\n\t   * The class prototype added by the mixin.\n\t   */\n\t  var SingleSelection = function (_base) {\n\t    _inherits(SingleSelection, _base);\n\t\n\t    function SingleSelection() {\n\t      _classCallCheck(this, SingleSelection);\n\t\n\t      // Set defaults.\n\t      var _this = _possibleConstructorReturn(this, (SingleSelection.__proto__ || Object.getPrototypeOf(SingleSelection)).call(this));\n\t\n\t      if (typeof _this.selectionRequired === 'undefined') {\n\t        _this.selectionRequired = _this[_symbols2.default.defaults].selectionRequired;\n\t      }\n\t      if (typeof _this.selectionWraps === 'undefined') {\n\t        _this.selectionWraps = _this[_symbols2.default.defaults].selectionWraps;\n\t      }\n\t      return _this;\n\t    }\n\t\n\t    /**\n\t     * True if the selection can be moved to the next item, false if not (the\n\t     * selected item is the last item in the list).\n\t     *\n\t     * @type {boolean}\n\t     */\n\t\n\t\n\t    _createClass(SingleSelection, [{\n\t      key: _symbols2.default.itemAdded,\n\t\n\t\n\t      /**\n\t       * Handle a new item being added to the list.\n\t       *\n\t       * The default implementation of this method simply sets the item's\n\t       * selection state to false.\n\t       *\n\t       * @param {HTMLElement} item - the item being added\n\t       */\n\t      value: function value(item) {\n\t        if (_get(SingleSelection.prototype.__proto__ || Object.getPrototypeOf(SingleSelection.prototype), _symbols2.default.itemAdded, this)) {\n\t          _get(SingleSelection.prototype.__proto__ || Object.getPrototypeOf(SingleSelection.prototype), _symbols2.default.itemAdded, this).call(this, item);\n\t        }\n\t        this[_symbols2.default.itemSelected](item, item === this.selectedItem);\n\t      }\n\t    }, {\n\t      key: _symbols2.default.itemsChanged,\n\t      value: function value() {\n\t        if (_get(SingleSelection.prototype.__proto__ || Object.getPrototypeOf(SingleSelection.prototype), _symbols2.default.itemsChanged, this)) {\n\t          _get(SingleSelection.prototype.__proto__ || Object.getPrototypeOf(SingleSelection.prototype), _symbols2.default.itemsChanged, this).call(this);\n\t        }\n\t\n\t        // In case selected item changed position or was removed.\n\t        trackSelectedItem(this);\n\t\n\t        // In case the change in items affected which navigations are possible.\n\t        updatePossibleNavigations(this);\n\t      }\n\t\n\t      /**\n\t       * Apply the indicate selection state to the item.\n\t       *\n\t       * The default implementation of this method does nothing. User-visible\n\t       * effects will typically be handled by other mixins.\n\t       *\n\t       * @param {HTMLElement} item - the item being selected/deselected\n\t       * @param {boolean} selected - true if the item is selected, false if not\n\t       */\n\t\n\t    }, {\n\t      key: _symbols2.default.itemSelected,\n\t      value: function value(item, selected) {\n\t        if (_get(SingleSelection.prototype.__proto__ || Object.getPrototypeOf(SingleSelection.prototype), _symbols2.default.itemSelected, this)) {\n\t          _get(SingleSelection.prototype.__proto__ || Object.getPrototypeOf(SingleSelection.prototype), _symbols2.default.itemSelected, this).call(this, item, selected);\n\t        }\n\t      }\n\t\n\t      /**\n\t       * The index of the item which is currently selected.\n\t       *\n\t       * The setter expects an integer or a string representing an integer.\n\t       *\n\t       * A `selectedIndex` of -1 indicates there is no selection. Setting this\n\t       * property to -1 will remove any existing selection.\n\t       *\n\t       * @type {number}\n\t       */\n\t\n\t    }, {\n\t      key: 'selectFirst',\n\t\n\t\n\t      /**\n\t       * Select the first item in the list.\n\t       *\n\t       * @returns {Boolean} True if the selection changed, false if not.\n\t       */\n\t      value: function selectFirst() {\n\t        if (_get(SingleSelection.prototype.__proto__ || Object.getPrototypeOf(SingleSelection.prototype), 'selectFirst', this)) {\n\t          _get(SingleSelection.prototype.__proto__ || Object.getPrototypeOf(SingleSelection.prototype), 'selectFirst', this).call(this);\n\t        }\n\t        return selectIndex(this, 0);\n\t      }\n\t\n\t      /**\n\t       * True if the list should always have a selection (if it has items).\n\t       *\n\t       * @type {boolean}\n\t       * @default false\n\t       */\n\t\n\t    }, {\n\t      key: 'selectLast',\n\t\n\t\n\t      /**\n\t       * Select the last item in the list.\n\t       *\n\t       * @returns {Boolean} True if the selection changed, false if not.\n\t       */\n\t      value: function selectLast() {\n\t        if (_get(SingleSelection.prototype.__proto__ || Object.getPrototypeOf(SingleSelection.prototype), 'selectLast', this)) {\n\t          _get(SingleSelection.prototype.__proto__ || Object.getPrototypeOf(SingleSelection.prototype), 'selectLast', this).call(this);\n\t        }\n\t        return selectIndex(this, this.items.length - 1);\n\t      }\n\t\n\t      /**\n\t       * Select the next item in the list.\n\t       *\n\t       * If the list has no selection, the first item will be selected.\n\t       *\n\t       * @returns {Boolean} True if the selection changed, false if not.\n\t       */\n\t\n\t    }, {\n\t      key: 'selectNext',\n\t      value: function selectNext() {\n\t        if (_get(SingleSelection.prototype.__proto__ || Object.getPrototypeOf(SingleSelection.prototype), 'selectNext', this)) {\n\t          _get(SingleSelection.prototype.__proto__ || Object.getPrototypeOf(SingleSelection.prototype), 'selectNext', this).call(this);\n\t        }\n\t        return selectIndex(this, this.selectedIndex + 1);\n\t      }\n\t\n\t      /**\n\t       * Select the previous item in the list.\n\t       *\n\t       * If the list has no selection, the last item will be selected.\n\t       *\n\t       * @returns {Boolean} True if the selection changed, false if not.\n\t       */\n\t\n\t    }, {\n\t      key: 'selectPrevious',\n\t      value: function selectPrevious() {\n\t        if (_get(SingleSelection.prototype.__proto__ || Object.getPrototypeOf(SingleSelection.prototype), 'selectPrevious', this)) {\n\t          _get(SingleSelection.prototype.__proto__ || Object.getPrototypeOf(SingleSelection.prototype), 'selectPrevious', this).call(this);\n\t        }\n\t        var newIndex = this.selectedIndex < 0 ? this.items.length - 1 : // No selection yet; select last item.\n\t        this.selectedIndex - 1;\n\t        return selectIndex(this, newIndex);\n\t      }\n\t\n\t      /**\n\t       * Fires when the canSelectNext property changes in response to internal\n\t       * component activity.\n\t       *\n\t       * @memberof SingleSelection\n\t       * @event can-select-next-changed\n\t       */\n\t\n\t      /**\n\t       * Fires when the canSelectPrevious property changes in response to internal\n\t       * component activity.\n\t       *\n\t       * @memberof SingleSelection\n\t       * @event can-select-previous-changed\n\t       */\n\t\n\t      /**\n\t       * Fires when the selectedIndex property changes in response to internal\n\t       * component activity.\n\t       *\n\t       * @memberof SingleSelection\n\t       * @event selected-index-changed\n\t       * @param {number} detail.selectedIndex The new selected index.\n\t       */\n\t\n\t      /**\n\t       * Fires when the selectedItem property changes in response to internal\n\t       * component activity.\n\t       *\n\t       * @memberof SingleSelection\n\t       * @event selected-item-changed\n\t       * @param {HTMLElement} detail.selectedItem The new selected item.\n\t       */\n\t\n\t    }, {\n\t      key: 'canSelectNext',\n\t      get: function get() {\n\t        return this[canSelectNextSymbol];\n\t      },\n\t      set: function set(canSelectNext) {\n\t        var changed = canSelectNext !== this[canSelectNextSymbol];\n\t        this[canSelectNextSymbol] = canSelectNext;\n\t        if ('canSelectNext' in base.prototype) {\n\t          _set(SingleSelection.prototype.__proto__ || Object.getPrototypeOf(SingleSelection.prototype), 'canSelectNext', canSelectNext, this);\n\t        }\n\t        if (this[_symbols2.default.raiseChangeEvents] && changed) {\n\t          this.dispatchEvent(new _CustomEvent2.default('can-select-next-changed'));\n\t        }\n\t      }\n\t\n\t      /**\n\t       * True if the selection can be moved to the previous item, false if not\n\t       * (the selected item is the first one in the list).\n\t       *\n\t       * @type {boolean}\n\t       */\n\t\n\t    }, {\n\t      key: 'canSelectPrevious',\n\t      get: function get() {\n\t        return this[canSelectPreviousSymbol];\n\t      },\n\t      set: function set(canSelectPrevious) {\n\t        var changed = canSelectPrevious !== this[canSelectPreviousSymbol];\n\t        this[canSelectPreviousSymbol] = canSelectPrevious;\n\t        if ('canSelectPrevious' in base.prototype) {\n\t          _set(SingleSelection.prototype.__proto__ || Object.getPrototypeOf(SingleSelection.prototype), 'canSelectPrevious', canSelectPrevious, this);\n\t        }\n\t        if (this[_symbols2.default.raiseChangeEvents] && changed) {\n\t          this.dispatchEvent(new _CustomEvent2.default('can-select-previous-changed'));\n\t        }\n\t      }\n\t    }, {\n\t      key: _symbols2.default.defaults,\n\t      get: function get() {\n\t        var defaults = _get(SingleSelection.prototype.__proto__ || Object.getPrototypeOf(SingleSelection.prototype), _symbols2.default.defaults, this) || {};\n\t        defaults.selectionRequired = false;\n\t        defaults.selectionWraps = false;\n\t        return defaults;\n\t      }\n\t    }, {\n\t      key: 'selectedIndex',\n\t      get: function get() {\n\t        return this[externalSelectedIndexSymbol] != null ? this[externalSelectedIndexSymbol] : -1;\n\t      },\n\t      set: function set(index) {\n\t        // See notes at top about internal vs. external copies of this property.\n\t        var changed = index !== this[internalSelectedIndexSymbol];\n\t        var item = void 0;\n\t        var parsedIndex = parseInt(index);\n\t        if (parsedIndex !== this[externalSelectedIndexSymbol]) {\n\t          // Store the new index and the corresponding item.\n\t          var items = this.items;\n\t          var hasItems = items && items.length > 0;\n\t          if (!(hasItems && parsedIndex >= 0 && parsedIndex < items.length)) {\n\t            parsedIndex = -1; // No item at that index.\n\t          }\n\t          this[externalSelectedIndexSymbol] = parsedIndex;\n\t          item = hasItems && parsedIndex >= 0 ? items[parsedIndex] : null;\n\t          this[externalSelectedItemSymbol] = item;\n\t        } else {\n\t          item = this[externalSelectedItemSymbol];\n\t        }\n\t\n\t        // Now let super do any work.\n\t        if ('selectedIndex' in base.prototype) {\n\t          _set(SingleSelection.prototype.__proto__ || Object.getPrototypeOf(SingleSelection.prototype), 'selectedIndex', index, this);\n\t        }\n\t\n\t        if (changed) {\n\t          // The selected index changed.\n\t          this[internalSelectedIndexSymbol] = parsedIndex;\n\t\n\t          if (this[_symbols2.default.raiseChangeEvents]) {\n\t            var event = new _CustomEvent2.default('selected-index-changed', {\n\t              detail: {\n\t                selectedIndex: parsedIndex,\n\t                value: parsedIndex // for Polymer binding. TODO: Verify still necessary\n\t              }\n\t            });\n\t            this.dispatchEvent(event);\n\t          }\n\t        }\n\t\n\t        if (this[internalSelectedItemSymbol] !== item) {\n\t          // Update selectedItem property so it can have its own effects.\n\t          this.selectedItem = item;\n\t        }\n\t      }\n\t\n\t      /**\n\t       * The currently selected item, or null if there is no selection.\n\t       *\n\t       * Setting this property to null deselects any currently-selected item.\n\t       * Setting this property to an object that is not in the list has no effect.\n\t       *\n\t       * TODO: Even if selectionRequired, can still explicitly set selectedItem to null.\n\t       * TODO: If selectionRequired, leave selection alone?\n\t       *\n\t       * @type {object}\n\t       */\n\t\n\t    }, {\n\t      key: 'selectedItem',\n\t      get: function get() {\n\t        return this[externalSelectedItemSymbol] || null;\n\t      },\n\t      set: function set(item) {\n\t        // See notes at top about internal vs. external copies of this property.\n\t        var previousSelectedItem = this[internalSelectedItemSymbol];\n\t        var changed = item !== previousSelectedItem;\n\t        var index = void 0;\n\t        if (item !== this[externalSelectedItemSymbol]) {\n\t          // Store item and look up corresponding index.\n\t          var items = this.items;\n\t          var hasItems = items && items.length > 0;\n\t          index = hasItems ? Array.prototype.indexOf.call(items, item) : -1;\n\t          this[externalSelectedIndexSymbol] = index;\n\t          if (index < 0) {\n\t            item = null; // The indicated item isn't actually in `items`.\n\t          }\n\t          this[externalSelectedItemSymbol] = item;\n\t        } else {\n\t          index = this[externalSelectedIndexSymbol];\n\t        }\n\t\n\t        // Now let super do any work.\n\t        if ('selectedItem' in base.prototype) {\n\t          _set(SingleSelection.prototype.__proto__ || Object.getPrototypeOf(SingleSelection.prototype), 'selectedItem', item, this);\n\t        }\n\t\n\t        if (changed) {\n\t          // The selected item changed.\n\t          this[internalSelectedItemSymbol] = item;\n\t\n\t          if (previousSelectedItem) {\n\t            // Update selection state of old item.\n\t            this[_symbols2.default.itemSelected](previousSelectedItem, false);\n\t          }\n\t          if (item) {\n\t            // Update selection state to new item.\n\t            this[_symbols2.default.itemSelected](item, true);\n\t          }\n\t\n\t          updatePossibleNavigations(this);\n\t\n\t          if (this[_symbols2.default.raiseChangeEvents]) {\n\t            var event = new _CustomEvent2.default('selected-item-changed', {\n\t              detail: {\n\t                selectedItem: item,\n\t                value: item // for Polymer binding\n\t              }\n\t            });\n\t            this.dispatchEvent(event);\n\t          }\n\t        }\n\t\n\t        if (this[internalSelectedIndexSymbol] !== index) {\n\t          // Update selectedIndex property so it can have its own effects.\n\t          this.selectedIndex = index;\n\t        }\n\t      }\n\t    }, {\n\t      key: 'selectionRequired',\n\t      get: function get() {\n\t        return this[selectionRequiredSymbol];\n\t      },\n\t      set: function set(selectionRequired) {\n\t        this[selectionRequiredSymbol] = selectionRequired;\n\t        if ('selectionRequired' in base.prototype) {\n\t          _set(SingleSelection.prototype.__proto__ || Object.getPrototypeOf(SingleSelection.prototype), 'selectionRequired', selectionRequired, this);\n\t        }\n\t        trackSelectedItem(this);\n\t      }\n\t\n\t      /**\n\t       * True if selection navigations wrap from last to first, and vice versa.\n\t       *\n\t       * @type {boolean}\n\t       * @default false\n\t       */\n\t\n\t    }, {\n\t      key: 'selectionWraps',\n\t      get: function get() {\n\t        return this[selectionWrapsSymbol];\n\t      },\n\t      set: function set(value) {\n\t        this[selectionWrapsSymbol] = String(value) === 'true';\n\t        if ('selectionWraps' in base.prototype) {\n\t          _set(SingleSelection.prototype.__proto__ || Object.getPrototypeOf(SingleSelection.prototype), 'selectionWraps', value, this);\n\t        }\n\t        updatePossibleNavigations(this);\n\t      }\n\t    }]);\n\t\n\t    return SingleSelection;\n\t  }(base);\n\t\n\t  return SingleSelection;\n\t}\n\t\n\t// Ensure the given index is within bounds, and select it if it's not already\n\t// selected.\n\tfunction selectIndex(element, index) {\n\t\n\t  var items = element.items;\n\t  if (items == null) {\n\t    // Nothing to select.\n\t    return false;\n\t  }\n\t\n\t  var count = items.length;\n\t  var boundedIndex = element.selectionWraps ?\n\t  // JavaScript mod doesn't handle negative numbers the way we want to wrap.\n\t  // See http://stackoverflow.com/a/18618250/76472\n\t  (index % count + count) % count :\n\t\n\t  // Keep index within bounds of array.\n\t  Math.max(Math.min(index, count - 1), 0);\n\t\n\t  var previousIndex = element.selectedIndex;\n\t  if (previousIndex !== boundedIndex) {\n\t    element.selectedIndex = boundedIndex;\n\t    return true;\n\t  } else {\n\t    return false;\n\t  }\n\t}\n\t\n\t// Following a change in the set of items, or in the value of the\n\t// `selectionRequired` property, reacquire the selected item. If it's moved,\n\t// update `selectedIndex`. If it's been removed, and a selection is required,\n\t// try to select another item.\n\tfunction trackSelectedItem(element) {\n\t\n\t  var items = element.items;\n\t  var itemCount = items ? items.length : 0;\n\t\n\t  var previousSelectedItem = element.selectedItem;\n\t  if (!previousSelectedItem) {\n\t    // No item was previously selected.\n\t    if (element.selectionRequired) {\n\t      // Select the first item by default.\n\t      element.selectedIndex = 0;\n\t    }\n\t  } else if (itemCount === 0) {\n\t    // We've lost the selection, and there's nothing left to select.\n\t    element.selectedItem = null;\n\t  } else {\n\t    // Try to find the previously-selected item in the current set of items.\n\t    var indexInCurrentItems = Array.prototype.indexOf.call(items, previousSelectedItem);\n\t    var previousSelectedIndex = element.selectedIndex;\n\t    if (indexInCurrentItems < 0) {\n\t      // Previously-selected item was removed from the items.\n\t      // Select the item at the same index (if it exists) or as close as possible.\n\t      var newSelectedIndex = Math.min(previousSelectedIndex, itemCount - 1);\n\t      // Select by item, since index may be the same, and we want to raise the\n\t      // selected-item-changed event.\n\t      element.selectedItem = items[newSelectedIndex];\n\t    } else if (indexInCurrentItems !== previousSelectedIndex) {\n\t      // Previously-selected item still there, but changed position.\n\t      element.selectedIndex = indexInCurrentItems;\n\t    }\n\t  }\n\t}\n\t\n\t// Following a change in selection, report whether it's now possible to\n\t// go next/previous from the given index.\n\tfunction updatePossibleNavigations(element) {\n\t  var canSelectNext = void 0;\n\t  var canSelectPrevious = void 0;\n\t  var items = element.items;\n\t  if (items == null || items.length === 0) {\n\t    // No items to select.\n\t    canSelectNext = false;\n\t    canSelectPrevious = false;\n\t  } else if (element.selectionWraps) {\n\t    // Since there are items, can always go next/previous.\n\t    canSelectNext = true;\n\t    canSelectPrevious = true;\n\t  } else {\n\t    var index = element.selectedIndex;\n\t    if (index < 0 && items.length > 0) {\n\t      // Special case. If there are items but no selection, declare that it's\n\t      // always possible to go next/previous to create a selection.\n\t      canSelectNext = true;\n\t      canSelectPrevious = true;\n\t    } else {\n\t      // Normal case: we have an index in a list that has items.\n\t      canSelectPrevious = index > 0;\n\t      canSelectNext = index < items.length - 1;\n\t    }\n\t  }\n\t  if (element.canSelectNext !== canSelectNext) {\n\t    element.canSelectNext = canSelectNext;\n\t  }\n\t  if (element.canSelectPrevious !== canSelectPrevious) {\n\t    element.canSelectPrevious = canSelectPrevious;\n\t  }\n\t}\n\n/***/ },\n/* 6 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\texports.default = createSymbol;\n\t/**\n\t * Helper function to create a symbol that can be used for associating private\n\t * data with an element.\n\t *\n\t * Mixins and component classes often want to associate private data with an\n\t * element instance, but JavaScript does not have direct support for true\n\t * private properties. One approach is to use the\n\t * [Symbol](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol)\n\t * data type to set and retrieve data on an element.\n\t *\n\t * Unfortunately, the Symbol type is not available in Internet Explorer 11. The\n\t * `createSymbol` helper function exists as a workaround for IE 11. Rather than\n\t * returning a true Symbol, it simply returns an underscore-prefixed string.\n\t *\n\t * Usage:\n\t *\n\t *     const fooSymbol = createSymbol('foo');\n\t *\n\t *     class MyElement extends HTMLElement {\n\t *       get foo() {\n\t *         return this[fooSymbol];\n\t *       }\n\t *       set foo(value) {\n\t *         this[fooSymbol] = value;\n\t *       }\n\t *     }\n\t *\n\t * In IE 11, this sample will \"hide\" data behind an instance property this._foo.\n\t * The use of the underscore is meant to reduce (not eliminate) the potential\n\t * for name conflicts, and discourage (not prevent) external access to this\n\t * data. In modern browsers, the above code will eliminate the potential of\n\t * naming conflicts, and better hide the data behind a real Symbol.\n\t *\n\t * @function createSymbol\n\t * @param {string} description - A string to identify the symbol when debugging\n\t */\n\tfunction createSymbol(description) {\n\t  return typeof Symbol === 'function' ? Symbol(description) : '_' + description;\n\t}\n\n/***/ },\n/* 7 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t/*\n\t * Polyfill for creating CustomEvents for IE 11.\n\t * Inspired by https://github.com/krambuhl/custom-event-polyfill.\n\t */\n\t\n\tvar customEventConstructor = void 0;\n\t\n\tfunction customEventPolyfill(eventName, params) {\n\t  params = params || {\n\t    bubbles: false,\n\t    cancelable: false,\n\t    detail: undefined\n\t  };\n\t  var event = document.createEvent(\"CustomEvent\");\n\t  event.initCustomEvent(eventName, params.bubbles, params.cancelable, params.detail);\n\t  var originalPreventDefault = event.preventDefault;\n\t  event.preventDefault = function () {\n\t    originalPreventDefault.call(this);\n\t    try {\n\t      Object.defineProperty(this, 'defaultPrevented', {\n\t        get: function get() {\n\t          return true;\n\t        }\n\t      });\n\t    } catch (e) {\n\t      this.defaultPrevented = true;\n\t    }\n\t  };\n\t\n\t  return event;\n\t}\n\tObject.setPrototypeOf(customEventPolyfill, window.Event.prototype);\n\t\n\ttry {\n\t  new window.CustomEvent('test');\n\t  customEventConstructor = window.CustomEvent;\n\t} catch (e) {\n\t  customEventConstructor = customEventPolyfill;\n\t}\n\t\n\texports.default = customEventConstructor;\n\n/***/ },\n/* 8 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createSymbol = __webpack_require__(6);\n\t\n\tvar _createSymbol2 = _interopRequireDefault(_createSymbol);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\t/**\n\t * A collection of Symbol objects for standard component properties and methods.\n\t *\n\t * These Symbol objects are used to allow mixins and a component to internally\n\t * communicate, without exposing these properties and methods in the component's\n\t * public API.\n\t *\n\t * To use these Symbol objects in your own component, include this module and\n\t * then create a property or method whose key is the desired Symbol.\n\t *\n\t *     import 'SingleSelectionMixin' from 'elix-mixins/src/SingleSelectionMixin';\n\t *     import 'symbols' from 'elix-mixins/src/symbols';\n\t *\n\t *     class MyElement extends SingleSelectionMixin(HTMLElement) {\n\t *       [symbols.itemSelected](item, selected) {\n\t *         // This will be invoked whenever an item is selected/deselected.\n\t *       }\n\t *     }\n\t *\n\t * @module symbols\n\t */\n\tvar symbols = {\n\t\n\t  /**\n\t   * Symbol for the `defaults` property.\n\t   *\n\t   * This property can be used to set or override defaults that will be applied\n\t   * to a new component instance. When implementing this property, take care to\n\t   * first acquire any defaults defined by the superclass. The standard idiom is\n\t   * as follows:\n\t   *\n\t   *     get [symbols.defaults]() {\n\t   *       const defaults = super[symbols.defaults] || {};\n\t   *       // Set or override default values here\n\t   *       defaults.customProperty = false;\n\t   *       return defaults;\n\t   *     }\n\t   *\n\t   * @var {object} defaults\n\t   */\n\t  defaults: (0, _createSymbol2.default)('defaults'),\n\t\n\t  /**\n\t   * Symbol for the `raiseChangeEvents` property.\n\t   *\n\t   * This property is used by mixins to determine whether they should raise\n\t   * property change events. The standard HTML pattern is to only raise such\n\t   * events in response to direct user interactions. This property can be used\n\t   * to manage events as follows.\n\t   *\n\t   * First, UI event listeners should set this property to `true` at the start\n\t   * of the event handler, then `false` at the end:\n\t   *\n\t   *     this.addEventListener('click', event => {\n\t   *       this[symbols.raiseChangeEvents] = true;\n\t   *       // Do work here, possibly setting properties, like:\n\t   *       this.foo = 'Hello';\n\t   *       this[symbols.raiseChangeEvents] = false;\n\t   *     });\n\t   *\n\t   * Elsewhere, property setters that raise change events should only do so it\n\t   * this property is `true`:\n\t   *\n\t   *     set foo(value) {\n\t   *       // Save foo value here, do any other work.\n\t   *       if (this[symbols.raiseChangeEvents]) {\n\t   *         const event = new CustomEvent('foo-changed');\n\t   *         this.dispatchEvent(event);\n\t   *       }\n\t   *     }\n\t   *\n\t   * In this way, programmatic attempts to set the `foo` property will not\n\t   * trigger the `foo-changed` event, but UI interactions that update that\n\t   * property will cause those events to be raised.\n\t   *\n\t   */\n\t  raiseChangeEvents: (0, _createSymbol2.default)('raiseChangeEvents'),\n\t\n\t  /**\n\t   * Symbol for the `itemAdded` method.\n\t   *\n\t   * This method is invoked when a new item is added to a list.\n\t   *\n\t   * @function itemAdded\n\t   * @param {HTMLElement} item - the item being selected/deselected\n\t   */\n\t  itemAdded: (0, _createSymbol2.default)('itemAdded'),\n\t\n\t  /**\n\t   * Symbol for the `itemsChanged` method.\n\t   *\n\t   * This method is invoked when the underlying contents change. It is also\n\t   * invoked on component initialization – since the items have \"changed\" from\n\t   * being nothing.\n\t   */\n\t  itemsChanged: (0, _createSymbol2.default)('itemsChanged'),\n\t\n\t  /**\n\t   * Symbol for the `itemSelected` method.\n\t   *\n\t   * This method is invoked when an item becomes selected or deselected.\n\t   *\n\t   * @function itemSelected\n\t   * @param {HTMLElement} item - the item being selected/deselected\n\t   * @param {boolean} selected - true if the item is selected, false if not\n\t   */\n\t  itemSelected: (0, _createSymbol2.default)('itemSelected')\n\t\n\t};\n\t\n\texports.default = symbols;\n\n/***/ }\n/******/ ]);\n\n\n// WEBPACK FOOTER //\n// elix-mixins.min.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 572c37ea132dffe1245b","/*\n * This file is transpiled to create an ES5-compatible distribution in which\n * the package's main feature(s) are available via the window.Basic global.\n * If you're already using ES6 yourself, ignore this file, and instead import\n * the source file(s) you want from the src folder.\n */\n\nimport microtask from './src/microtask';\nimport SimpleAttributeMixin from './src/SimpleAttributeMixin';\nimport SimpleTemplateMixin from './src/SimpleTemplateMixin';\nimport SingleSelectionMixin from './src/SingleSelectionMixin';\nimport symbols from './src/symbols';\n\nwindow.Elix = window.Elix || {};\n\nwindow.Elix.microtask = microtask;\nwindow.Elix.SimpleAttributeMixin = SimpleAttributeMixin;\nwindow.Elix.SimpleTemplateMixin = SimpleTemplateMixin;\nwindow.Elix.SingleSelectionMixin = SingleSelectionMixin;\nwindow.Elix.symbols = symbols;\n\n\n\n// WEBPACK FOOTER //\n// ./elements/elix-mixins/globals.js","/*\n * Microtask helper for IE 11.\n *\n * Executing a function as a microtask is trivial in browsers that support\n * promises, whose then() clauses use microtask timing. IE 11 doesn't support\n * promises, but does support MutationObservers, which are also executed as\n * microtasks. So this helper uses an MutationObserver to achieve microtask\n * timing.\n *\n * See https://jakearchibald.com/2015/tasks-microtasks-queues-and-schedules/\n *\n * Inspired by Polymer's async() function.\n */\n\n\n// The queue of pending callbacks to be executed as microtasks.\nconst callbacks = [];\n\n// Create an element that we will modify to force observable mutations.\nconst element = document.createTextNode('');\n\n// A monotonically-increasing value.\nlet counter = 0;\n\n\n/**\n * Add a callback to the microtask queue.\n *\n * This uses a MutationObserver so that it works on IE 11.\n *\n * NOTE: IE 11 may actually use timeout timing with MutationObservers. This\n * needs more investigation.\n *\n * @function microtask\n * @param {function} callback\n */\nexport default function microtask(callback) {\n  callbacks.push(callback);\n  // Force a mutation.\n  element.textContent = ++counter;\n}\n\n\n// Execute any pending callbacks.\nfunction executeCallbacks() {\n  while (callbacks.length > 0) {\n    const callback = callbacks.shift();\n    callback();\n  }\n}\n\n\n// Create the observer.\nconst observer = new MutationObserver(executeCallbacks);\nobserver.observe(element, {\n  characterData: true\n});\n\n\n\n// WEBPACK FOOTER //\n// ./elements/elix-mixins/src/microtask.js","/**\n * Mixin which adds simplistic mapping of attributes to properties.\n *\n * @module SimpleAttributeMixin\n * @param base {Class} the base class to extend\n * @returns {Class} the extended class\n */\nexport default function SimpleAttributeMixin(base) {\n\n  /**\n   * The class prototype added by the mixin.\n   */\n  class SimpleAttribute extends base {\n    \n    /*\n     * Handle a change to the attribute with the given name.\n     */\n    attributeChangedCallback(attributeName, oldValue, newValue) {\n  \t  if (super.attributeChangedCallback) { super.attributeChangedCallback(); }\n  \t  // If the attribute name corresponds to a property name, set the property.\n  \t  // Ignore standard HTMLElement properties handled by the DOM.\n  \t  if (attributeName in this && !(attributeName in HTMLElement.prototype)) {\n          this[attributeName] = newValue;\n  \t  }\n    }\n\n    /**\n     * Set/unset the attribute with the indicated name.\n     *\n     * This method exists primarily to handle the case where an element wants to\n     * set a default property value that should be reflected as an attribute. An\n     * important limitation of custom element consturctors is that they cannot\n     * set attributes. A call to `reflectAttribute` during the constructor will\n     * be deferred until the element is connected to the document.\n     *\n     * @param {string} attribute - The name of the *attribute* (not property) to set.\n     * @param {object} value - The value to set. If null, the attribute will be removed.\n     */\n    reflectAttribute(attribute, value) {\n      // For documentation purposes only\n    }\n\n  }\n\n  return SimpleAttribute;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./elements/elix-mixins/src/SimpleAttributeMixin.js","/**\n * Mixin which adds a simplistic means of cloning a string template into a new\n * shadow root.\n *\n * @module SimpleTemplateMixin\n * @param base {Class} the base class to extend\n * @returns {Class} the extended class\n */\nexport default function SimpleTemplateMixin(base) {\n\n  /**\n   * The class prototype added by the mixin.\n   */\n  class SimpleTemplate extends base {\n\n    constructor() {\n\t    super();\n\t    const template = this.template;\n\t    if (template) {\n        const root = this.attachShadow({ mode: 'open' });\n        root.innerHTML = template;\n\t    }\n    }\n\n    /**\n     * Set/unset the class with the indicated name.\n     *\n     * This method exists primarily to handle the case where an element wants to\n     * set a default property value that should be reflected as as class. An\n     * important limitation of custom element consturctors is that they cannot\n     * set attributes, including the `class` attribute. A call to\n     * `reflectClass` during the constructor will be deferred until the element\n     * is connected to the document.\n     *\n     * @param {string} className - The name of the class to set.\n     * @param {object} value - True to set the class, false to remove it.\n     */\n    reflectClass(className, value) {\n      // For documentation purposes only\n    }\n\n  }\n\n  return SimpleTemplate;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./elements/elix-mixins/src/SimpleTemplateMixin.js","import createSymbol from './createSymbol';\nimport CustomEvent from './CustomEvent';\nimport symbols from './symbols';\n\n\n// Symbols for private data members on an element.\nconst canSelectNextSymbol = createSymbol('canSelectNext');\nconst canSelectPreviousSymbol = createSymbol('canSelectPrevious');\nconst selectionRequiredSymbol = createSymbol('selectionRequired');\nconst selectionWrapsSymbol = createSymbol('selectionWraps');\n\n// We want to expose both selectedIndex and selectedItem as independent\n// properties but keep them in sync. This allows a component user to reference\n// the selection by whatever means is most natural for their situation.\n//\n// To efficiently keep these properties in sync, we track \"external\" and\n// \"internal\" references for each property:\n//\n// The external index or item is the one we report to the outside world when\n// asked for selection.  When handling a change to index or item, we update the\n// external reference as soon as possible, so that if anyone immediately asks\n// for the current selection, they will receive a stable answer.\n//\n// The internal index or item tracks whichever index or item last received the\n// full set of processing. Processing includes raising a change event for the\n// new value. Once we've begun that processing, we store the new value as the\n// internal value to indicate we've handled it.\n//\nconst externalSelectedIndexSymbol = createSymbol('externalSelectedIndex');\nconst externalSelectedItemSymbol = createSymbol('externalSelectedItem');\nconst internalSelectedIndexSymbol = createSymbol('internalSelectedIndex');\nconst internalSelectedItemSymbol = createSymbol('internalSelectedItem');\n\n\n/**\n * Mixin which adds single-selection semantics for items in a list.\n *\n * This mixin expects a component to provide an `items` Array or NodeList of\n * all elements in the list.\n *\n * This mixin tracks a single selected item in the list, and provides means to\n * get and set that state by item position (`selectedIndex`) or item identity\n * (`selectedItem`). The selection can be moved in the list via the methods\n * `selectFirst`, `selectLast`, `selectNext`, and `selectPrevious`.\n *\n * This mixin does not produce any user-visible effects to represent\n * selection.\n *\n * @module SingleSelectionMixin\n * @param base {Class} the base class to extend\n * @returns {Class} the extended class\n */\nexport default function SingleSelectionMixin(base) {\n\n  /**\n   * The class prototype added by the mixin.\n   */\n  class SingleSelection extends base {\n\n    constructor() {\n      super();\n      // Set defaults.\n      if (typeof this.selectionRequired === 'undefined') {\n        this.selectionRequired = this[symbols.defaults].selectionRequired;\n      }\n      if (typeof this.selectionWraps === 'undefined') {\n        this.selectionWraps = this[symbols.defaults].selectionWraps;\n      }\n    }\n\n    /**\n     * True if the selection can be moved to the next item, false if not (the\n     * selected item is the last item in the list).\n     *\n     * @type {boolean}\n     */\n    get canSelectNext() {\n      return this[canSelectNextSymbol];\n    }\n    set canSelectNext(canSelectNext) {\n      const changed = canSelectNext !== this[canSelectNextSymbol];\n      this[canSelectNextSymbol] = canSelectNext;\n      if ('canSelectNext' in base.prototype) { super.canSelectNext = canSelectNext; }\n      if (this[symbols.raiseChangeEvents] && changed) {\n        this.dispatchEvent(new CustomEvent('can-select-next-changed'));\n      }\n    }\n\n    /**\n     * True if the selection can be moved to the previous item, false if not\n     * (the selected item is the first one in the list).\n     *\n     * @type {boolean}\n     */\n    get canSelectPrevious() {\n      return this[canSelectPreviousSymbol];\n    }\n    set canSelectPrevious(canSelectPrevious) {\n      const changed = canSelectPrevious !== this[canSelectPreviousSymbol];\n      this[canSelectPreviousSymbol] = canSelectPrevious;\n      if ('canSelectPrevious' in base.prototype) { super.canSelectPrevious = canSelectPrevious; }\n      if (this[symbols.raiseChangeEvents] && changed) {\n        this.dispatchEvent(new CustomEvent('can-select-previous-changed'));\n      }\n    }\n\n    get [symbols.defaults]() {\n      const defaults = super[symbols.defaults] || {};\n      defaults.selectionRequired = false;\n      defaults.selectionWraps = false;\n      return defaults;\n    }\n\n    /**\n     * Handle a new item being added to the list.\n     *\n     * The default implementation of this method simply sets the item's\n     * selection state to false.\n     *\n     * @param {HTMLElement} item - the item being added\n     */\n    [symbols.itemAdded](item) {\n      if (super[symbols.itemAdded]) { super[symbols.itemAdded](item); }\n      this[symbols.itemSelected](item, item === this.selectedItem);\n    }\n\n    [symbols.itemsChanged]() {\n      if (super[symbols.itemsChanged]) { super[symbols.itemsChanged](); }\n\n      // In case selected item changed position or was removed.\n      trackSelectedItem(this);\n\n      // In case the change in items affected which navigations are possible.\n      updatePossibleNavigations(this);\n    }\n\n    /**\n     * Apply the indicate selection state to the item.\n     *\n     * The default implementation of this method does nothing. User-visible\n     * effects will typically be handled by other mixins.\n     *\n     * @param {HTMLElement} item - the item being selected/deselected\n     * @param {boolean} selected - true if the item is selected, false if not\n     */\n    [symbols.itemSelected](item, selected) {\n      if (super[symbols.itemSelected]) { super[symbols.itemSelected](item, selected); }\n    }\n\n    /**\n     * The index of the item which is currently selected.\n     *\n     * The setter expects an integer or a string representing an integer.\n     *\n     * A `selectedIndex` of -1 indicates there is no selection. Setting this\n     * property to -1 will remove any existing selection.\n     *\n     * @type {number}\n     */\n    get selectedIndex() {\n      return this[externalSelectedIndexSymbol] != null ?\n        this[externalSelectedIndexSymbol] :\n        -1;\n    }\n    set selectedIndex(index) {\n      // See notes at top about internal vs. external copies of this property.\n      const changed = index !== this[internalSelectedIndexSymbol];\n      let item;\n      let parsedIndex = parseInt(index);\n      if (parsedIndex !== this[externalSelectedIndexSymbol]) {\n        // Store the new index and the corresponding item.\n        const items = this.items;\n        const hasItems = items && items.length > 0;\n        if (!(hasItems && parsedIndex >= 0 && parsedIndex < items.length)) {\n          parsedIndex = -1; // No item at that index.\n        }\n        this[externalSelectedIndexSymbol] = parsedIndex;\n        item = hasItems && parsedIndex >= 0 ? items[parsedIndex] : null;\n        this[externalSelectedItemSymbol] = item;\n      } else {\n        item = this[externalSelectedItemSymbol];\n      }\n\n      // Now let super do any work.\n      if ('selectedIndex' in base.prototype) { super.selectedIndex = index; }\n\n      if (changed) {\n        // The selected index changed.\n        this[internalSelectedIndexSymbol] = parsedIndex;\n\n        if (this[symbols.raiseChangeEvents]) {\n          const event = new CustomEvent('selected-index-changed', {\n            detail: {\n              selectedIndex: parsedIndex,\n              value: parsedIndex // for Polymer binding. TODO: Verify still necessary\n            }\n          });\n          this.dispatchEvent(event);\n        }\n      }\n\n      if (this[internalSelectedItemSymbol] !== item) {\n        // Update selectedItem property so it can have its own effects.\n        this.selectedItem = item;\n      }\n    }\n\n    /**\n     * The currently selected item, or null if there is no selection.\n     *\n     * Setting this property to null deselects any currently-selected item.\n     * Setting this property to an object that is not in the list has no effect.\n     *\n     * TODO: Even if selectionRequired, can still explicitly set selectedItem to null.\n     * TODO: If selectionRequired, leave selection alone?\n     *\n     * @type {object}\n     */\n    get selectedItem() {\n      return this[externalSelectedItemSymbol] || null;\n    }\n    set selectedItem(item) {\n      // See notes at top about internal vs. external copies of this property.\n      const previousSelectedItem = this[internalSelectedItemSymbol];\n      const changed = item !== previousSelectedItem;\n      let index;\n      if (item !== this[externalSelectedItemSymbol]) {\n        // Store item and look up corresponding index.\n        const items = this.items;\n        const hasItems = items && items.length > 0;\n        index = hasItems ? Array.prototype.indexOf.call(items, item) : -1;\n        this[externalSelectedIndexSymbol] = index;\n        if (index < 0) {\n          item = null; // The indicated item isn't actually in `items`.\n        }\n        this[externalSelectedItemSymbol] = item;\n      } else {\n        index = this[externalSelectedIndexSymbol];\n      }\n\n      // Now let super do any work.\n      if ('selectedItem' in base.prototype) { super.selectedItem = item; }\n\n      if (changed) {\n        // The selected item changed.\n        this[internalSelectedItemSymbol] = item;\n\n        if (previousSelectedItem) {\n          // Update selection state of old item.\n          this[symbols.itemSelected](previousSelectedItem, false);\n        }\n        if (item) {\n          // Update selection state to new item.\n          this[symbols.itemSelected](item, true);\n        }\n\n        updatePossibleNavigations(this);\n\n        if (this[symbols.raiseChangeEvents]) {\n          const event = new CustomEvent('selected-item-changed', {\n            detail: {\n              selectedItem: item,\n              value: item // for Polymer binding\n            }\n          });\n          this.dispatchEvent(event);\n        }\n      }\n\n      if (this[internalSelectedIndexSymbol] !== index) {\n        // Update selectedIndex property so it can have its own effects.\n        this.selectedIndex = index;\n      }\n    }\n\n    /**\n     * Select the first item in the list.\n     *\n     * @returns {Boolean} True if the selection changed, false if not.\n     */\n    selectFirst() {\n      if (super.selectFirst) { super.selectFirst(); }\n      return selectIndex(this, 0);\n    }\n\n    /**\n     * True if the list should always have a selection (if it has items).\n     *\n     * @type {boolean}\n     * @default false\n     */\n    get selectionRequired() {\n      return this[selectionRequiredSymbol];\n    }\n    set selectionRequired(selectionRequired) {\n      this[selectionRequiredSymbol] = selectionRequired;\n      if ('selectionRequired' in base.prototype) { super.selectionRequired = selectionRequired; }\n      trackSelectedItem(this);\n    }\n\n    /**\n     * True if selection navigations wrap from last to first, and vice versa.\n     *\n     * @type {boolean}\n     * @default false\n     */\n    get selectionWraps() {\n      return this[selectionWrapsSymbol];\n    }\n    set selectionWraps(value) {\n      this[selectionWrapsSymbol] = String(value) === 'true';\n      if ('selectionWraps' in base.prototype) { super.selectionWraps = value; }\n      updatePossibleNavigations(this);\n    }\n\n    /**\n     * Select the last item in the list.\n     *\n     * @returns {Boolean} True if the selection changed, false if not.\n     */\n    selectLast() {\n      if (super.selectLast) { super.selectLast(); }\n      return selectIndex(this, this.items.length - 1);\n    }\n\n    /**\n     * Select the next item in the list.\n     *\n     * If the list has no selection, the first item will be selected.\n     *\n     * @returns {Boolean} True if the selection changed, false if not.\n     */\n    selectNext() {\n      if (super.selectNext) { super.selectNext(); }\n      return selectIndex(this, this.selectedIndex + 1);\n    }\n\n    /**\n     * Select the previous item in the list.\n     *\n     * If the list has no selection, the last item will be selected.\n     *\n     * @returns {Boolean} True if the selection changed, false if not.\n     */\n    selectPrevious() {\n      if (super.selectPrevious) { super.selectPrevious(); }\n      const newIndex = this.selectedIndex < 0 ?\n        this.items.length - 1 :     // No selection yet; select last item.\n        this.selectedIndex - 1;\n      return selectIndex(this, newIndex);\n    }\n\n    /**\n     * Fires when the canSelectNext property changes in response to internal\n     * component activity.\n     *\n     * @memberof SingleSelection\n     * @event can-select-next-changed\n     */\n\n    /**\n     * Fires when the canSelectPrevious property changes in response to internal\n     * component activity.\n     *\n     * @memberof SingleSelection\n     * @event can-select-previous-changed\n     */\n\n    /**\n     * Fires when the selectedIndex property changes in response to internal\n     * component activity.\n     *\n     * @memberof SingleSelection\n     * @event selected-index-changed\n     * @param {number} detail.selectedIndex The new selected index.\n     */\n\n    /**\n     * Fires when the selectedItem property changes in response to internal\n     * component activity.\n     *\n     * @memberof SingleSelection\n     * @event selected-item-changed\n     * @param {HTMLElement} detail.selectedItem The new selected item.\n     */\n\n  }\n\n  return SingleSelection;\n}\n\n\n// Ensure the given index is within bounds, and select it if it's not already\n// selected.\nfunction selectIndex(element, index) {\n\n  const items = element.items;\n  if (items == null) {\n    // Nothing to select.\n    return false;\n  }\n\n  const count = items.length;\n  const boundedIndex = element.selectionWraps ?\n    // JavaScript mod doesn't handle negative numbers the way we want to wrap.\n    // See http://stackoverflow.com/a/18618250/76472\n    ((index % count) + count) % count :\n\n    // Keep index within bounds of array.\n    Math.max(Math.min(index, count - 1), 0);\n\n  const previousIndex = element.selectedIndex;\n  if (previousIndex !== boundedIndex) {\n    element.selectedIndex = boundedIndex;\n    return true;\n  } else {\n    return false;\n  }\n}\n\n// Following a change in the set of items, or in the value of the\n// `selectionRequired` property, reacquire the selected item. If it's moved,\n// update `selectedIndex`. If it's been removed, and a selection is required,\n// try to select another item.\nfunction trackSelectedItem(element) {\n\n  const items = element.items;\n  const itemCount = items ? items.length : 0;\n\n  const previousSelectedItem = element.selectedItem;\n  if (!previousSelectedItem) {\n    // No item was previously selected.\n    if (element.selectionRequired) {\n      // Select the first item by default.\n      element.selectedIndex = 0;\n    }\n  } else if (itemCount === 0) {\n    // We've lost the selection, and there's nothing left to select.\n    element.selectedItem = null;\n  } else {\n    // Try to find the previously-selected item in the current set of items.\n    const indexInCurrentItems = Array.prototype.indexOf.call(items, previousSelectedItem);\n    const previousSelectedIndex = element.selectedIndex;\n    if (indexInCurrentItems < 0) {\n      // Previously-selected item was removed from the items.\n      // Select the item at the same index (if it exists) or as close as possible.\n      const newSelectedIndex = Math.min(previousSelectedIndex, itemCount - 1);\n      // Select by item, since index may be the same, and we want to raise the\n      // selected-item-changed event.\n      element.selectedItem = items[newSelectedIndex];\n    } else if (indexInCurrentItems !== previousSelectedIndex) {\n      // Previously-selected item still there, but changed position.\n      element.selectedIndex = indexInCurrentItems;\n    }\n  }\n}\n\n// Following a change in selection, report whether it's now possible to\n// go next/previous from the given index.\nfunction updatePossibleNavigations(element) {\n  let canSelectNext;\n  let canSelectPrevious;\n  const items = element.items;\n  if (items == null || items.length === 0) {\n    // No items to select.\n    canSelectNext = false;\n    canSelectPrevious = false;\n  } else if (element.selectionWraps) {\n    // Since there are items, can always go next/previous.\n    canSelectNext = true;\n    canSelectPrevious = true;\n  } else {\n    const index = element.selectedIndex;\n    if (index < 0 && items.length > 0) {\n      // Special case. If there are items but no selection, declare that it's\n      // always possible to go next/previous to create a selection.\n      canSelectNext = true;\n      canSelectPrevious = true;\n    } else {\n      // Normal case: we have an index in a list that has items.\n      canSelectPrevious = (index > 0);\n      canSelectNext = (index < items.length - 1);\n    }\n  }\n  if (element.canSelectNext !== canSelectNext) {\n    element.canSelectNext = canSelectNext;\n  }\n  if (element.canSelectPrevious !== canSelectPrevious) {\n    element.canSelectPrevious = canSelectPrevious;\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./elements/elix-mixins/src/SingleSelectionMixin.js","/**\n * Helper function to create a symbol that can be used for associating private\n * data with an element.\n *\n * Mixins and component classes often want to associate private data with an\n * element instance, but JavaScript does not have direct support for true\n * private properties. One approach is to use the\n * [Symbol](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol)\n * data type to set and retrieve data on an element.\n *\n * Unfortunately, the Symbol type is not available in Internet Explorer 11. The\n * `createSymbol` helper function exists as a workaround for IE 11. Rather than\n * returning a true Symbol, it simply returns an underscore-prefixed string.\n *\n * Usage:\n *\n *     const fooSymbol = createSymbol('foo');\n *\n *     class MyElement extends HTMLElement {\n *       get foo() {\n *         return this[fooSymbol];\n *       }\n *       set foo(value) {\n *         this[fooSymbol] = value;\n *       }\n *     }\n *\n * In IE 11, this sample will \"hide\" data behind an instance property this._foo.\n * The use of the underscore is meant to reduce (not eliminate) the potential\n * for name conflicts, and discourage (not prevent) external access to this\n * data. In modern browsers, the above code will eliminate the potential of\n * naming conflicts, and better hide the data behind a real Symbol.\n *\n * @function createSymbol\n * @param {string} description - A string to identify the symbol when debugging\n */\nexport default function createSymbol(description) {\n  return typeof Symbol === 'function' ?\n    Symbol(description) :\n    `_${description}`;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./elements/elix-mixins/src/createSymbol.js","/*\n * Polyfill for creating CustomEvents for IE 11.\n * Inspired by https://github.com/krambuhl/custom-event-polyfill.\n */\n\nlet customEventConstructor;\n\nfunction customEventPolyfill(eventName, params) {\n  params = params || {\n    bubbles: false,\n    cancelable: false,\n    detail: undefined\n  };\n  const event = document.createEvent(\"CustomEvent\");\n  event.initCustomEvent(eventName, params.bubbles, params.cancelable, params.detail);\n  const originalPreventDefault = event.preventDefault;\n  event.preventDefault = function() {\n    originalPreventDefault.call(this);\n    try {\n      Object.defineProperty(this, 'defaultPrevented', {\n        get: function () {\n          return true;\n        }\n      });\n    } catch(e) {\n      this.defaultPrevented = true;\n    }\n  };\n\n  return event;\n}\nObject.setPrototypeOf(customEventPolyfill, window.Event.prototype);\n\ntry {\n  new window.CustomEvent('test');\n  customEventConstructor = window.CustomEvent;\n} catch(e) {\n  customEventConstructor = customEventPolyfill;\n}\n\nexport default customEventConstructor;\n\n\n\n// WEBPACK FOOTER //\n// ./elements/elix-mixins/src/CustomEvent.js","import createSymbol from './createSymbol';\n\n/**\n * A collection of Symbol objects for standard component properties and methods.\n *\n * These Symbol objects are used to allow mixins and a component to internally\n * communicate, without exposing these properties and methods in the component's\n * public API.\n *\n * To use these Symbol objects in your own component, include this module and\n * then create a property or method whose key is the desired Symbol.\n *\n *     import 'SingleSelectionMixin' from 'elix-mixins/src/SingleSelectionMixin';\n *     import 'symbols' from 'elix-mixins/src/symbols';\n *\n *     class MyElement extends SingleSelectionMixin(HTMLElement) {\n *       [symbols.itemSelected](item, selected) {\n *         // This will be invoked whenever an item is selected/deselected.\n *       }\n *     }\n *\n * @module symbols\n */\nconst symbols = {\n\n  /**\n   * Symbol for the `defaults` property.\n   *\n   * This property can be used to set or override defaults that will be applied\n   * to a new component instance. When implementing this property, take care to\n   * first acquire any defaults defined by the superclass. The standard idiom is\n   * as follows:\n   *\n   *     get [symbols.defaults]() {\n   *       const defaults = super[symbols.defaults] || {};\n   *       // Set or override default values here\n   *       defaults.customProperty = false;\n   *       return defaults;\n   *     }\n   *\n   * @var {object} defaults\n   */\n  defaults: createSymbol('defaults'),\n\n  /**\n   * Symbol for the `raiseChangeEvents` property.\n   *\n   * This property is used by mixins to determine whether they should raise\n   * property change events. The standard HTML pattern is to only raise such\n   * events in response to direct user interactions. This property can be used\n   * to manage events as follows.\n   *\n   * First, UI event listeners should set this property to `true` at the start\n   * of the event handler, then `false` at the end:\n   *\n   *     this.addEventListener('click', event => {\n   *       this[symbols.raiseChangeEvents] = true;\n   *       // Do work here, possibly setting properties, like:\n   *       this.foo = 'Hello';\n   *       this[symbols.raiseChangeEvents] = false;\n   *     });\n   *\n   * Elsewhere, property setters that raise change events should only do so it\n   * this property is `true`:\n   *\n   *     set foo(value) {\n   *       // Save foo value here, do any other work.\n   *       if (this[symbols.raiseChangeEvents]) {\n   *         const event = new CustomEvent('foo-changed');\n   *         this.dispatchEvent(event);\n   *       }\n   *     }\n   *\n   * In this way, programmatic attempts to set the `foo` property will not\n   * trigger the `foo-changed` event, but UI interactions that update that\n   * property will cause those events to be raised.\n   *\n   */\n  raiseChangeEvents: createSymbol('raiseChangeEvents'),\n\n  /**\n   * Symbol for the `itemAdded` method.\n   *\n   * This method is invoked when a new item is added to a list.\n   *\n   * @function itemAdded\n   * @param {HTMLElement} item - the item being selected/deselected\n   */\n  itemAdded: createSymbol('itemAdded'),\n\n  /**\n   * Symbol for the `itemsChanged` method.\n   *\n   * This method is invoked when the underlying contents change. It is also\n   * invoked on component initialization – since the items have \"changed\" from\n   * being nothing.\n   */\n  itemsChanged: createSymbol('itemsChanged'),\n\n  /**\n   * Symbol for the `itemSelected` method.\n   *\n   * This method is invoked when an item becomes selected or deselected.\n   *\n   * @function itemSelected\n   * @param {HTMLElement} item - the item being selected/deselected\n   * @param {boolean} selected - true if the item is selected, false if not\n   */\n  itemSelected: createSymbol('itemSelected')\n\n};\n\nexport default symbols;\n\n\n\n// WEBPACK FOOTER //\n// ./elements/elix-mixins/src/symbols.js"],"sourceRoot":""}