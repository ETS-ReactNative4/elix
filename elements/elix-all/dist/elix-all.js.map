{"version":3,"sources":["webpack:///webpack/bootstrap 31002e73621440f52e52","webpack:///./elements/elix-all/globals.js","webpack:///./elements/elix-simple-element/globals.js","webpack:///./elements/elix-simple-element/src/SimpleElement.js","webpack:///./elements/elix-mixins/src/SimpleAttributeMixin.js","webpack:///./elements/elix-mixins/src/SimpleTemplateMixin.js","webpack:///./elements/elix-mixins/globals.js"],"names":["simpleElement","componentMixins","webComponents","window","Elix","SimpleElement","shadowRoot","getElementById","textContent","value","HTMLElement","customElements","define","SimpleAttributeMixin","base","SimpleAttribute","attributeName","oldValue","newValue","prototype","attribute","SimpleTemplateMixin","SimpleTemplate","template","root","attachShadow","mode","innerHTML","className"],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,uBAAe;AACf;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;;;;;;;;;;;;;;;AC3BA;;KAAYA,a;;AACZ;;KAAYC,e;;AACZ;;KAAYC,a;;;;;;;;;;ACNZ;;;;;;AAEAC,QAAOC,IAAP,GAAcD,OAAOC,IAAP,IAAe,EAA7B,C,CATA;;;;;;;AAUAD,QAAOC,IAAP,CAAYC,aAAZ,2B;;;;;;;;;;;;;;ACVA;;;;AACA;;;;;;;;;;;;AAGA;;;;;;;;;KASMA,a;;;;;;;;;;;;;AAEJ;;;;;;yBAMe;AACb,cAAO,KAAKC,UAAL,CAAgBC,cAAhB,CAA+B,UAA/B,EAA2CC,WAAlD;AACD,M;uBACYC,K,EAAO;AAClB,YAAKH,UAAL,CAAgBC,cAAhB,CAA+B,UAA/B,EAA2CC,WAA3C,GAAyDC,KAAzD;AACD;;;yBAMc;AACb;AACD;;;yBAN+B;AAC9B,cAAO,CAAC,UAAD,CAAP;AACD;;;;GAjByB,mCAAoB,oCAAqBC,WAArB,CAApB,C;;AAwB5BC,gBAAeC,MAAf,CAAsB,qBAAtB,EAA6CP,aAA7C;mBACeA,a;;;;;;;;;;;;;;;;mBC/BSQ,oB;;;;;;;;AAPxB;;;;;;;AAOe,UAASA,oBAAT,CAA8BC,IAA9B,EAAoC;;AAEjD;;;AAFiD,OAK3CC,eAL2C;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;;AAO/C;;;AAP+C,gDAUtBC,aAVsB,EAUPC,QAVO,EAUGC,QAVH,EAUa;AAC3D,8IAAoC;AAAE;AAAmC;AACzE;AACA;AACA,aAAIF,iBAAiB,IAAjB,IAAyB,EAAEA,iBAAiBN,YAAYS,SAA/B,CAA7B,EAAwE;AACnE,gBAAKH,aAAL,IAAsBE,QAAtB;AACJ;AACD;;AAED;;;;;;;;;;;;;AAnB+C;AAAA;AAAA,wCA+B9BE,SA/B8B,EA+BnBX,KA/BmB,EA+BZ;AACjC;AACD;AAjC8C;;AAAA;AAAA,KAKnBK,IALmB;;AAqCjD,UAAOC,eAAP;AACD,E;;;;;;;;;;;;;;mBCrCuBM,mB;;;;;;;;AARxB;;;;;;;;AAQe,UAASA,mBAAT,CAA6BP,IAA7B,EAAmC;;AAEhD;;;AAFgD,OAK1CQ,cAL0C;AAAA;;AAO9C,+BAAc;AAAA;;AAAA;;AAEb,WAAMC,WAAW,MAAKA,QAAtB;AACA,WAAIA,QAAJ,EAAc;AACX,aAAMC,OAAO,MAAKC,YAAL,CAAkB,EAAEC,MAAM,MAAR,EAAlB,CAAb;AACAF,cAAKG,SAAL,GAAiBJ,QAAjB;AACF;AANY;AAOb;;AAED;;;;;;;;;;;;;;;AAhB8C;AAAA;AAAA,oCA6BjCK,SA7BiC,EA6BtBnB,KA7BsB,EA6Bf;AAC7B;AACD;AA/B6C;;AAAA;AAAA,KAKnBK,IALmB;;AAmChD,UAAOQ,cAAP;AACD,E;;;;;;;;ACrCD;;;;AACA;;;;;;AARA;;;;;;;AAUAnB,QAAOC,IAAP,GAAcD,OAAOC,IAAP,IAAe,EAA7B;;AAEAD,QAAOC,IAAP,CAAYS,oBAAZ;AACAV,QAAOC,IAAP,CAAYiB,mBAAZ,iC","file":"elix-all.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 31002e73621440f52e52","/*\n * This file is transpiled to create an ES5-compatible distribution of all\n * components in the project. If you're already using ES6 yourself, ignore this\n * file, and instead import the source file(s) you want from the specific\n * package you want.\n */\n\n// Import all the globals from each package.\n// We tell jshint to ignore the fact that we're not actually using them here.\n/* jshint ignore:start */\n\nimport * as simpleElement from '../elix-simple-element/globals';\nimport * as componentMixins from '../elix-mixins/globals';\nimport * as webComponents from '../elix-all/globals';\n\n/* jshint ignore:end */\n\n\n\n// WEBPACK FOOTER //\n// ./elements/elix-all/globals.js","/*\n * This file is transpiled to create an ES5-compatible distribution in which\n * the package's main feature(s) are available via the window.Elix global.\n * If you're already using ES6 yourself, ignore this file, and instead import\n * the source file(s) you want from the src folder.\n */\n\nimport SimpleElement from './src/SimpleElement';\n\nwindow.Elix = window.Elix || {};\nwindow.Elix.SimpleElement = SimpleElement;\n\n\n\n// WEBPACK FOOTER //\n// ./elements/elix-simple-element/globals.js","import SimpleAttributeMixin from '../../elix-mixins/src/SimpleAttributeMixin';\nimport SimpleTemplateMixin from '../../elix-mixins/src/SimpleTemplateMixin';\n\n\n/**\n * A simple element used to demonstrate the build and documentation process.\n *\n * [Live demo](http://elix.org/elix/elements/elix-simple-element/)\n *\n * @module SimpleElement\n * @mixes SimpleAttributeMixin\n * @mixes SimpleTemplateMixin\n */\nclass SimpleElement extends SimpleTemplateMixin(SimpleAttributeMixin(HTMLElement)) {\n\n  /**\n   * Specifies the greeting.\n   *\n   * @type {string}\n   * @default greeting\n   */\n  get greeting() {\n    return this.shadowRoot.getElementById('greeting').textContent;\n  }\n  set greeting(value) {\n    this.shadowRoot.getElementById('greeting').textContent = value;\n  }\n\n  static get observedAttributes() {\n    return ['greeting'];\n  }\n\n  get template() {\n    return `<span id=\"greeting\">Hello</span>, <slot></slot>.`;\n  }\n}\n\ncustomElements.define('elix-simple-element', SimpleElement);\nexport default SimpleElement;\n\n\n\n// WEBPACK FOOTER //\n// ./elements/elix-simple-element/src/SimpleElement.js","/**\n * Mixin which adds simplistic mapping of attributes to properties.\n *\n * @module SimpleAttributeMixin\n * @param base {Class} the base class to extend\n * @returns {Class} the extended class\n */\nexport default function SimpleAttributeMixin(base) {\n\n  /**\n   * The class prototype added by the mixin.\n   */\n  class SimpleAttribute extends base {\n    \n    /*\n     * Handle a change to the attribute with the given name.\n     */\n    attributeChangedCallback(attributeName, oldValue, newValue) {\n  \t  if (super.attributeChangedCallback) { super.attributeChangedCallback(); }\n  \t  // If the attribute name corresponds to a property name, set the property.\n  \t  // Ignore standard HTMLElement properties handled by the DOM.\n  \t  if (attributeName in this && !(attributeName in HTMLElement.prototype)) {\n          this[attributeName] = newValue;\n  \t  }\n    }\n\n    /**\n     * Set/unset the attribute with the indicated name.\n     *\n     * This method exists primarily to handle the case where an element wants to\n     * set a default property value that should be reflected as an attribute. An\n     * important limitation of custom element consturctors is that they cannot\n     * set attributes. A call to `reflectAttribute` during the constructor will\n     * be deferred until the element is connected to the document.\n     *\n     * @param {string} attribute - The name of the *attribute* (not property) to set.\n     * @param {object} value - The value to set. If null, the attribute will be removed.\n     */\n    reflectAttribute(attribute, value) {\n      // For documentation purposes only\n    }\n\n  }\n\n  return SimpleAttribute;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./elements/elix-mixins/src/SimpleAttributeMixin.js","/**\n * Mixin which adds a simplistic means of cloning a string template into a new\n * shadow root.\n *\n * @module SimpleTemplateMixin\n * @param base {Class} the base class to extend\n * @returns {Class} the extended class\n */\nexport default function SimpleTemplateMixin(base) {\n\n  /**\n   * The class prototype added by the mixin.\n   */\n  class SimpleTemplate extends base {\n\n    constructor() {\n\t    super();\n\t    const template = this.template;\n\t    if (template) {\n        const root = this.attachShadow({ mode: 'open' });\n        root.innerHTML = template;\n\t    }\n    }\n\n    /**\n     * Set/unset the class with the indicated name.\n     *\n     * This method exists primarily to handle the case where an element wants to\n     * set a default property value that should be reflected as as class. An\n     * important limitation of custom element consturctors is that they cannot\n     * set attributes, including the `class` attribute. A call to\n     * `reflectClass` during the constructor will be deferred until the element\n     * is connected to the document.\n     *\n     * @param {string} className - The name of the class to set.\n     * @param {object} value - True to set the class, false to remove it.\n     */\n    reflectClass(className, value) {\n      // For documentation purposes only\n    }\n\n  }\n\n  return SimpleTemplate;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./elements/elix-mixins/src/SimpleTemplateMixin.js","/*\n * This file is transpiled to create an ES5-compatible distribution in which\n * the package's main feature(s) are available via the window.Basic global.\n * If you're already using ES6 yourself, ignore this file, and instead import\n * the source file(s) you want from the src folder.\n */\n\nimport SimpleAttributeMixin from './src/SimpleAttributeMixin';\nimport SimpleTemplateMixin from './src/SimpleTemplateMixin';\n\nwindow.Elix = window.Elix || {};\n\nwindow.Elix.SimpleAttributeMixin = SimpleAttributeMixin;\nwindow.Elix.SimpleTemplateMixin = SimpleTemplateMixin;\n\n\n\n// WEBPACK FOOTER //\n// ./elements/elix-mixins/globals.js"],"sourceRoot":""}