{"version":3,"sources":["webpack:///elix-all.min.js","webpack:///webpack/bootstrap 9167c200a6046a24ef0b","webpack:///./elements/elix-all/globals.js","webpack:///./elements/elix-mixins/globals.js","webpack:///./elements/elix-mixins/src/SelectionAriaMixin.js","webpack:///./elements/elix-mixins/src/symbols.js","webpack:///./elements/elix-mixins/src/Symbol.js","webpack:///./elements/elix-mixins/src/ShadowTemplateMixin.js","webpack:///./elements/elix-mixins/src/SingleSelectionMixin.js"],"names":["modules","__webpack_require__","moduleId","installedModules","exports","module","id","loaded","call","m","c","p","_interopRequireWildcard","obj","__esModule","newObj","key","Object","prototype","hasOwnProperty","default","_globals","_globals2","e","Error","code","_globals3","_interopRequireDefault","_microtask","_microtask2","_SelectionAriaMixin","_SelectionAriaMixin2","_ShadowTemplateMixin","_ShadowTemplateMixin2","_SingleSelectionMixin","_SingleSelectionMixin2","_Symbol2","_Symbol3","_symbols","_symbols2","window","Elix","microtask","SelectionAriaMixin","ShadowTemplateMixin","SingleSelectionMixin","Symbol","symbols","_classCallCheck","instance","Constructor","TypeError","_possibleConstructorReturn","self","ReferenceError","_inherits","subClass","superClass","create","constructor","value","enumerable","writable","configurable","setPrototypeOf","__proto__","defineProperty","_createClass","defineProperties","target","props","i","length","descriptor","protoProps","staticProps","_set","set","object","property","receiver","desc","getOwnPropertyDescriptor","undefined","parent","getPrototypeOf","setter","_get","get","Function","getter","base","SelectionAria","_base","this","apply","arguments","getAttribute","defaults","role","setAttribute","itemAdded","item","itemRole","baseId","idCount","itemSelected","selected","itemId","removeAttribute","content","contentChanged","getItemText","goDown","goEnd","goLeft","goRight","goStart","goUp","itemsChanged","keydown","orientation","raiseChangeEvents","shadowCreated","template","uniqueString","description","count","symbolFunction","ShadowTemplate","_this","tag","localName","mapTagToTemplate","console","warn","templateText","document","createElement","innerHTML","ShadyCSS","prepareTemplate","root","attachShadow","mode","clone","importNode","appendChild","applyStyle","SingleSelection","selectionRequired","selectionWraps","selectedItem","trackSelectedItem","updatePossibleNavigations","selectIndex","items","selectedIndex","newIndex","canSelectNextSymbol","canSelectNext","changed","dispatchEvent","CustomEvent","canSelectPreviousSymbol","canSelectPrevious","externalSelectedIndexSymbol","index","internalSelectedIndexSymbol","parsedIndex","parseInt","hasItems","externalSelectedItemSymbol","event","detail","internalSelectedItemSymbol","previousSelectedItem","Array","indexOf","selectionRequiredSymbol","parsed","String","selectionWrapsSymbol","element","boundedIndex","Math","max","min","previousIndex","itemCount","indexInCurrentItems","previousSelectedIndex","newSelectedIndex"],"mappings":"CAAS,SAAUA,GCInB,QAAAC,GAAAC,GAGA,GAAAC,EAAAD,GACA,MAAAC,GAAAD,GAAAE,OAGA,IAAAC,GAAAF,EAAAD,IACAE,WACAE,GAAAJ,EACAK,QAAA,EAUA,OANAP,GAAAE,GAAAM,KAAAH,EAAAD,QAAAC,IAAAD,QAAAH,GAGAI,EAAAE,QAAA,EAGAF,EAAAD,QAvBA,GAAAD,KAqCA,OATAF,GAAAQ,EAAAT,EAGAC,EAAAS,EAAAP,EAGAF,EAAAU,EAAA,GAGAV,EAAA,KDMM,SAASI,EAAQD,EAASH,GAE/BI,EAAOD,QAAUH,EAAoB,IAKhC,SAASI,EAAQD,EAASH,GAE/B,YAcA,SAASW,GAAwBC,GAAO,GAAIA,GAAOA,EAAIC,WAAc,MAAOD,EAAc,IAAIE,KAAa,IAAW,MAAPF,EAAe,IAAK,GAAIG,KAAOH,GAAWI,OAAOC,UAAUC,eAAeX,KAAKK,EAAKG,KAAMD,EAAOC,GAAOH,EAAIG,GAAgC,OAAtBD,GAAOK,QAAUP,EAAYE,EExDnQ,GAAAM,GAAApB,EAAA,GACAqB,GF6CWV,EAAwBS,GE7CnCpB,GAAA,cAAAsB,GAAA,GAAAC,OAAA,sDAAAD,GAAAE,KAAA,mBAAAF,OACAG,GFgDed,EAAwBU,GEhDvCrB,EAAA,GFoDcW,GAAwBc,IAMhC,SAASrB,EAAQD,EAASH,GAE/B,YA0BA,SAAS0B,GAAuBd,GAAO,MAAOA,IAAOA,EAAIC,WAAaD,GAAQO,QAASP,GG5FxF,GAAAe,GAAA3B,GAAA,cAAAsB,GAAA,GAAAC,OAAA,6CAAAD,GAAAE,KAAA,mBAAAF,MHsEKM,EAAcF,EAAuBC,GGrE1CE,EAAA7B,EAAA,GHyEK8B,EAAuBJ,EAAuBG,GGxEnDE,EAAA/B,EAAA,GH4EKgC,EAAwBN,EAAuBK,GG3EpDE,EAAAjC,EAAA,GH+EKkC,EAAyBR,EAAuBO,GG9ErDE,EAAAnC,EAAA,GHkFKoC,EAAWV,EAAuBS,GGjFvCE,EAAArC,EAAA,GHqFKsC,EAAYZ,EAAuBW,EGnFxCE,QAAOC,KAAOD,OAAOC,SAErBD,OAAOC,KAAKC,UAAZb,EAAAT,QACAoB,OAAOC,KAAKE,mBAAZZ,EAAAX,QACAoB,OAAOC,KAAKG,oBAAZX,EAAAb,QACAoB,OAAOC,KAAKI,qBAAZV,EAAAf,QACAoB,OAAOC,KAAKK,OAAZT,EAAAjB,QACAoB,OAAOC,KAAKM,QAAZR,EAAAnB,SHkGM,SAASf,EAAQD,EAASH,GAE/B,YA+GA,SAAS0B,GAAuBd,GAAO,MAAOA,IAAOA,EAAIC,WAAaD,GAAQO,QAASP,GAEvF,QAASmC,GAAgBC,EAAUC,GAAe,KAAMD,YAAoBC,IAAgB,KAAM,IAAIC,WAAU,qCAEhH,QAASC,GAA2BC,EAAM7C,GAAQ,IAAK6C,EAAQ,KAAM,IAAIC,gBAAe,4DAAgE,QAAO9C,GAAyB,gBAATA,IAAqC,kBAATA,GAA8B6C,EAAP7C,EAElO,QAAS+C,GAAUC,EAAUC,GAAc,GAA0B,kBAAfA,IAA4C,OAAfA,EAAuB,KAAM,IAAIN,WAAU,iEAAoEM,GAAeD,GAAStC,UAAYD,OAAOyC,OAAOD,GAAcA,EAAWvC,WAAayC,aAAeC,MAAOJ,EAAUK,YAAY,EAAOC,UAAU,EAAMC,cAAc,KAAeN,IAAYxC,OAAO+C,eAAiB/C,OAAO+C,eAAeR,EAAUC,GAAcD,EAASS,UAAYR,GAnHjexC,OAAOiD,eAAe9D,EAAS,cAC7BwD,OAAO,GAGT,IAAIO,GAAe,WAAc,QAASC,GAAiBC,EAAQC,GAAS,IAAK,GAAIC,GAAI,EAAGA,EAAID,EAAME,OAAQD,IAAK,CAAE,GAAIE,GAAaH,EAAMC,EAAIE,GAAWZ,WAAaY,EAAWZ,aAAc,EAAOY,EAAWV,cAAe,EAAU,SAAWU,KAAYA,EAAWX,UAAW,GAAM7C,OAAOiD,eAAeG,EAAQI,EAAWzD,IAAKyD,IAAiB,MAAO,UAAUvB,EAAawB,EAAYC,GAAiJ,MAA9HD,IAAYN,EAAiBlB,EAAYhC,UAAWwD,GAAiBC,GAAaP,EAAiBlB,EAAayB,GAAqBzB,MAE5hB0B,EAAO,QAASC,GAAIC,EAAQC,EAAUnB,EAAOoB,GAAY,GAAIC,GAAOhE,OAAOiE,yBAAyBJ,EAAQC,EAAW,IAAaI,SAATF,EAAoB,CAAE,GAAIG,GAASnE,OAAOoE,eAAeP,EAAwB,QAAXM,GAAmBP,EAAIO,EAAQL,EAAUnB,EAAOoB,OAAoB,IAAI,SAAWC,IAAQA,EAAKnB,SAAYmB,EAAKrB,MAAQA,MAAc,CAAE,GAAI0B,GAASL,EAAKJ,GAAoBM,UAAXG,GAAwBA,EAAO9E,KAAKwE,EAAUpB,GAAY,MAAOA,IAEta2B,EAAO,QAASC,GAAIV,EAAQC,EAAUC,GAA2B,OAAXF,IAAiBA,EAASW,SAASvE,UAAW,IAAI+D,GAAOhE,OAAOiE,yBAAyBJ,EAAQC,EAAW,IAAaI,SAATF,EAAoB,CAAE,GAAIG,GAASnE,OAAOoE,eAAeP,EAAS,OAAe,QAAXM,EAAmB,OAAkCI,EAAIJ,EAAQL,EAAUC,GAAoB,GAAI,SAAWC,GAAQ,MAAOA,GAAKrB,KAAgB,IAAI8B,GAAST,EAAKO,GAAK,IAAeL,SAAXO,EAA4C,MAAOA,GAAOlF,KAAKwE,GAE5d5E,GAAQgB,QI3FM,SAAUuE,GAAM,GAKvBC,GALuB,SAAAC,GAAA,QAAAD,KAAA,MAAA5C,GAAA8C,KAAAF,GAAAxC,EAAA0C,MAAAF,EAAA3B,WAAAhD,OAAAoE,eAAAO,IAAAG,MAAAD,KAAAE,YAAA,MAAAzC,GAAAqC,EAAAC,GAAA1B,EAAAyB,IAAA5E,IAAA,oBAAA4C,MAAA,WAQzB2B,EAAAK,EAAA1E,UAAA+C,WAAAhD,OAAAoE,eAAAO,EAAA1E,WAAA,oBAAA4E,OAA+BP,EAAAK,EAAA1E,UAAA+C,WAAAhD,OAAAoE,eAAAO,EAAA1E,WAAA,oBAAA4E,MAAAtF,KAAAsF,MAGE,MAA7BA,KAAKG,aAAa,SAAmBH,KAAKvD,EAAAnB,QAAQ8E,UAAUC,MAC9DL,KAAKM,aAAa,OAAQN,KAAKvD,EAAAnB,QAAQ8E,UAAUC,SAZ1BnF,IAuB1BuB,EAAAnB,QAAQiF,UAvBkBzC,MAAA,SAuBP0C,GAkBlB,GAjBAf,EAAAK,EAAA1E,UAAA+C,WAAAhD,OAAAoE,eAAAO,EAAA1E,WAAUqB,EAAAnB,QAAQiF,UAAlBP,OAAgCP,EAAAK,EAAA1E,UAAA+C,WAAAhD,OAAAoE,eAAAO,EAAA1E,WAAMqB,EAAAnB,QAAQiF,UAAdP,MAAAtF,KAAAsF,KAAyBQ,GAEpDA,EAAKL,aAAa,SAErBK,EAAKF,aAAa,OAAQN,KAAKvD,EAAAnB,QAAQ8E,UAAUK,WAa9CD,EAAKhG,GAAI,CACZ,GAAMkG,GAASV,KAAKxF,GAChB,IAAMwF,KAAKxF,GAAK,SAChB,SACJgG,GAAKhG,GAAKkG,EAASC,QA7CIzF,IAiD1BuB,EAAAnB,QAAQsF,aAjDkB9C,MAAA,SAiDJ0C,EAAMK,GAC3BpB,EAAAK,EAAA1E,UAAA+C,WAAAhD,OAAAoE,eAAAO,EAAA1E,WAAUqB,EAAAnB,QAAQsF,aAAlBZ,OAAmCP,EAAAK,EAAA1E,UAAA+C,WAAAhD,OAAAoE,eAAAO,EAAA1E,WAAMqB,EAAAnB,QAAQsF,aAAdZ,MAAAtF,KAAAsF,KAA4BQ,EAAMK,GACrEL,EAAKF,aAAa,gBAAiBO,EACnC,IAAMC,GAASN,EAAKhG,EAChBsG,IAAUD,GACZb,KAAKM,aAAa,wBAAyBQ,MAtDpB5F,IAgBtBuB,EAAAnB,QAAQ8E,SAhBcV,IAAA,WAiBzB,GAAMU,GAAWX,EAAAK,EAAA1E,UAAA+C,WAAAhD,OAAAoE,eAAAO,EAAA1E,WAAMqB,EAAAnB,QAAQ8E,SAAdJ,SAGjB,OAFAI,GAASC,KAAO,UAChBD,EAASK,SAAW,SACbL,KApBkBlF,IAAA,eAAAwE,IAAA,WA2DzB,MAAAD,GAAAK,EAAA1E,UAAA+C,WAAAhD,OAAAoE,eAAAO,EAAA1E,WAAA,eAAA4E,OA3DyBjB,IAAA,SA6DVyB,GACX,gBAAkBX,GAAKzE,WAAa0D,EAAAgB,EAAA1E,UAAA+C,WAAAhD,OAAAoE,eAAAO,EAAA1E,WAAA,eAAqBoF,EAArBR,MAC5B,MAARQ,GAEFR,KAAKe,gBAAgB,6BAjEEjB,GAKDD,EAkE5B,OAAOC,GAjHT,IAAAtD,GAAArC,EAAA,GJsOKsC,EAAYZ,EAAuBW,GIlOpCmE,EAAU,GJqRR,SAASpG,EAAQD,EAASH,GAE/B,YAUA,SAAS0B,GAAuBd,GAAO,MAAOA,IAAOA,EAAIC,WAAaD,GAAQO,QAASP,GARvFI,OAAOiD,eAAe9D,EAAS,cAC7BwD,OAAO,GK9RV,IAAAxB,GAAAnC,EAAA,GLmSKoC,EAAWV,EAAuBS,GK1QjCW,GAWJ+D,SAAS,EAAAzE,EAAAjB,SAAO,WAUhB2F,gBAAgB,EAAA1E,EAAAjB,SAAO,kBAmBvB8E,UAAU,EAAA7D,EAAAjB,SAAO,YAWjB4F,aAAa,EAAA3E,EAAAjB,SAAO,WASpB6F,QAAQ,EAAA5E,EAAAjB,SAAO,UAUf8F,OAAO,EAAA7E,EAAAjB,SAAO,SASd+F,QAAQ,EAAA9E,EAAAjB,SAAO,UASfgG,SAAS,EAAA/E,EAAAjB,SAAO,WAUhBiG,SAAS,EAAAhF,EAAAjB,SAAO,WAShBkG,MAAM,EAAAjF,EAAAjB,SAAO,QAUbiF,WAAW,EAAAhE,EAAAjB,SAAO,aAWlBmG,cAAc,EAAAlF,EAAAjB,SAAO,gBAWrBsF,cAAc,EAAArE,EAAAjB,SAAO,gBAUrBoG,SAAS,EAAAnF,EAAAjB,SAAO,WAWhBqG,aAAa,EAAApF,EAAAjB,SAAO,eA+CpBsG,mBAAmB,EAAArF,EAAAjB,SAAO,qBAW1BuG,eAAe,EAAAtF,EAAAjB,SAAO,iBAStBwG,UAAU,EAAAvF,EAAAjB,SAAO,YLuSlBhB,GAAQgB,QKpSM2B,GLwST,SAAS1C,EAAQD,GAEtB,YMtiBD,SAASyH,GAAaC,GACpB,UAAWA,EAAcC,INuiB1B9G,OAAOiD,eAAe9D,EAAS,cAC7BwD,OAAO,GM3iBV,IAAImE,GAAQ,EAMNC,EAA0C,kBAAlBxF,QAAOM,OACnCN,OAAOM,OACP+E,CNklBDzH,GAAQgB,QM5iBM4G,GNgjBT,SAAS3H,EAAQD,EAASH,GAE/B,YAgBA,SAAS0B,GAAuBd,GAAO,MAAOA,IAAOA,EAAIC,WAAaD,GAAQO,QAASP,GAEvF,QAASmC,GAAgBC,EAAUC,GAAe,KAAMD,YAAoBC,IAAgB,KAAM,IAAIC,WAAU,qCAEhH,QAASC,GAA2BC,EAAM7C,GAAQ,IAAK6C,EAAQ,KAAM,IAAIC,gBAAe,4DAAgE,QAAO9C,GAAyB,gBAATA,IAAqC,kBAATA,GAA8B6C,EAAP7C,EAElO,QAAS+C,GAAUC,EAAUC,GAAc,GAA0B,kBAAfA,IAA4C,OAAfA,EAAuB,KAAM,IAAIN,WAAU,iEAAoEM,GAAeD,GAAStC,UAAYD,OAAOyC,OAAOD,GAAcA,EAAWvC,WAAayC,aAAeC,MAAOJ,EAAUK,YAAY,EAAOC,UAAU,EAAMC,cAAc,KAAeN,IAAYxC,OAAO+C,eAAiB/C,OAAO+C,eAAeR,EAAUC,GAAcD,EAASS,UAAYR,GOhlBnd,QAASb,GAAoB+C,GAAM,GAK1CsC,GAL0C,SAAApC,GAW9C,QAAAoC,KAAcjF,EAAA8C,KAAAmC,EAAA,IAAAC,GAAA9E,EAAA0C,MAAAmC,EAAAhE,WAAAhD,OAAAoE,eAAA4C,IAAAzH,KAAAsF,OAGNqC,EAAMD,EAAKE,UACbR,EAAWS,EAAiBF,EAGhC,KAAKP,EAAU,CAKb,GADAA,EAAWM,EAAK3F,EAAAnB,QAAQwG,WACnBA,EAEH,MADAU,SAAQC,KAAR,2FACAnF,EAAA8E,EAGF,IAAwB,gBAAbN,GAAuB,CAEhC,GAAMY,GAAeZ,CACrBA,GAAWa,SAASC,cAAc,YAClCd,EAASe,UAAYH,EAGnBhG,OAAOoG,UAETpG,OAAOoG,SAASC,gBAAgBjB,EAAUO,GAI5CE,EAAiBF,GAAOP,EAI1B,GAAMkB,GAAOZ,EAAKa,cAAeC,KAAM,SACjCC,EAAQR,SAASS,WAAWtB,EAASd,SAAS,EAnCxC,OAoCZgC,GAAKK,YAAYF,GAGbf,EAAK3F,EAAAnB,QAAQuG,gBACfO,EAAK3F,EAAAnB,QAAQuG,iBAxCHO,EAXgC,MAAA3E,GAAA0E,EAAApC,GAAA1B,EAAA8D,IAAAjH,IAAA,oBAAA4C,MAAA,WAwD5C2B,EAAA0C,EAAA/G,UAAA+C,WAAAhD,OAAAoE,eAAA4C,EAAA/G,WAAA,oBAAA4E,OAA+BP,EAAA0C,EAAA/G,UAAA+C,WAAAhD,OAAAoE,eAAA4C,EAAA/G,WAAA,oBAAA4E,MAAAtF,KAAAsF,MAC3BtD,OAAOoG,UACTpG,OAAOoG,SAASQ,WAAWtD,UA1DemC,GAKnBtC,EA2D7B,OAAOsC,GP4fRhH,OAAOiD,eAAe9D,EAAS,cAC7BwD,OAAO,GAGT,IAAIO,GAAe,WAAc,QAASC,GAAiBC,EAAQC,GAAS,IAAK,GAAIC,GAAI,EAAGA,EAAID,EAAME,OAAQD,IAAK,CAAE,GAAIE,GAAaH,EAAMC,EAAIE,GAAWZ,WAAaY,EAAWZ,aAAc,EAAOY,EAAWV,cAAe,EAAU,SAAWU,KAAYA,EAAWX,UAAW,GAAM7C,OAAOiD,eAAeG,EAAQI,EAAWzD,IAAKyD,IAAiB,MAAO,UAAUvB,EAAawB,EAAYC,GAAiJ,MAA9HD,IAAYN,EAAiBlB,EAAYhC,UAAWwD,GAAiBC,GAAaP,EAAiBlB,EAAayB,GAAqBzB,MAE5hBqC,EAAO,QAASC,GAAIV,EAAQC,EAAUC,GAA2B,OAAXF,IAAiBA,EAASW,SAASvE,UAAW,IAAI+D,GAAOhE,OAAOiE,yBAAyBJ,EAAQC,EAAW,IAAaI,SAATF,EAAoB,CAAE,GAAIG,GAASnE,OAAOoE,eAAeP,EAAS,OAAe,QAAXM,EAAmB,OAAkCI,EAAIJ,EAAQL,EAAUC,GAAoB,GAAI,SAAWC,GAAQ,MAAOA,GAAKrB,KAAgB,IAAI8B,GAAST,EAAKO,GAAK,IAAeL,SAAXO,EAA4C,MAAOA,GAAOlF,KAAKwE,GAE5d5E,GAAQgB,QOpkBewB,CAvCxB,IAAAN,GAAArC,EAAA,GP+mBKsC,EAAYZ,EAAuBW,GOrmBlC+F,MPiuBA,SAAShI,EAAQD,EAASH,GAE/B,YAsBA,SAAS0B,GAAuBd,GAAO,MAAOA,IAAOA,EAAIC,WAAaD,GAAQO,QAASP,GAEvF,QAASmC,GAAgBC,EAAUC,GAAe,KAAMD,YAAoBC,IAAgB,KAAM,IAAIC,WAAU,qCAEhH,QAASC,GAA2BC,EAAM7C,GAAQ,IAAK6C,EAAQ,KAAM,IAAIC,gBAAe,4DAAgE,QAAO9C,GAAyB,gBAATA,IAAqC,kBAATA,GAA8B6C,EAAP7C,EAElO,QAAS+C,GAAUC,EAAUC,GAAc,GAA0B,kBAAfA,IAA4C,OAAfA,EAAuB,KAAM,IAAIN,WAAU,iEAAoEM,GAAeD,GAAStC,UAAYD,OAAOyC,OAAOD,GAAcA,EAAWvC,WAAayC,aAAeC,MAAOJ,EAAUK,YAAY,EAAOC,UAAU,EAAMC,cAAc,KAAeN,IAAYxC,OAAO+C,eAAiB/C,OAAO+C,eAAeR,EAAUC,GAAcD,EAASS,UAAYR,GQttBnd,QAASZ,GAAqB8C,GAAM,GAK3C0D,GAL2C,SAAAxD,GAO/C,QAAAwD,KAAcrG,EAAA8C,KAAAuD,EAAA,IAAAnB,GAAA9E,EAAA0C,MAAAuD,EAAApF,WAAAhD,OAAAoE,eAAAgE,IAAA7I,KAAAsF,MAAA,OAG0B,mBAA3BoC,GAAKoB,oBACdpB,EAAKoB,kBAAoBpB,EAAK3F,EAAAnB,QAAQ8E,UAAUoD,mBAEf,mBAAxBpB,GAAKqB,iBACdrB,EAAKqB,eAAiBrB,EAAK3F,EAAAnB,QAAQ8E,UAAUqD,gBAPnCrB,EAPiC,MAAA3E,GAAA8F,EAAAxD,GAAA1B,EAAAkF,IAAArI,IAqE9CuB,EAAAnB,QAAQiF,UArEsCzC,MAAA,SAqE3B0C,GAClBf,EAAA8D,EAAAnI,UAAA+C,WAAAhD,OAAAoE,eAAAgE,EAAAnI,WAAUqB,EAAAnB,QAAQiF,UAAlBP,OAAgCP,EAAA8D,EAAAnI,UAAA+C,WAAAhD,OAAAoE,eAAAgE,EAAAnI,WAAMqB,EAAAnB,QAAQiF,UAAdP,MAAAtF,KAAAsF,KAAyBQ,GACzDR,KAAKvD,EAAAnB,QAAQsF,cAAcJ,EAAMA,IAASR,KAAK0D,iBAvEFxI,IA0E9CuB,EAAAnB,QAAQmG,aA1EsC3D,MAAA,WA2E7C2B,EAAA8D,EAAAnI,UAAA+C,WAAAhD,OAAAoE,eAAAgE,EAAAnI,WAAUqB,EAAAnB,QAAQmG,aAAlBzB,OAAmCP,EAAA8D,EAAAnI,UAAA+C,WAAAhD,OAAAoE,eAAAgE,EAAAnI,WAAMqB,EAAAnB,QAAQmG,aAAdzB,MAAAtF,KAAAsF,MAGnC2D,EAAkB3D,MAGlB4D,EAA0B5D,SAjFmB9E,IA6F9CuB,EAAAnB,QAAQsF,aA7FsC9C,MAAA,SA6FxB0C,EAAMK,GAC3BpB,EAAA8D,EAAAnI,UAAA+C,WAAAhD,OAAAoE,eAAAgE,EAAAnI,WAAUqB,EAAAnB,QAAQsF,aAAlBZ,OAAmCP,EAAA8D,EAAAnI,UAAA+C,WAAAhD,OAAAoE,eAAAgE,EAAAnI,WAAMqB,EAAAnB,QAAQsF,aAAdZ,MAAAtF,KAAAsF,KAA4BQ,EAAMK,MA9FxB3F,IAAA,cAAA4C,MAAA,WAsO7C,MADA2B,GAAA8D,EAAAnI,UAAA+C,WAAAhD,OAAAoE,eAAAgE,EAAAnI,WAAA,cAAA4E,OAAyBP,EAAA8D,EAAAnI,UAAA+C,WAAAhD,OAAAoE,eAAAgE,EAAAnI,WAAA,cAAA4E,MAAAtF,KAAAsF,MAClB6D,EAAY7D,KAAM,MAtOoB9E,IAAA,aAAA4C,MAAA,WAgS7C,MADA2B,GAAA8D,EAAAnI,UAAA+C,WAAAhD,OAAAoE,eAAAgE,EAAAnI,WAAA,aAAA4E,OAAwBP,EAAA8D,EAAAnI,UAAA+C,WAAAhD,OAAAoE,eAAAgE,EAAAnI,WAAA,aAAA4E,MAAAtF,KAAAsF,MACjB6D,EAAY7D,KAAMA,KAAK8D,MAAMpF,OAAS,MAhSAxD,IAAA,aAAA4C,MAAA,WA4S7C,MADA2B,GAAA8D,EAAAnI,UAAA+C,WAAAhD,OAAAoE,eAAAgE,EAAAnI,WAAA,aAAA4E,OAAwBP,EAAA8D,EAAAnI,UAAA+C,WAAAhD,OAAAoE,eAAAgE,EAAAnI,WAAA,aAAA4E,MAAAtF,KAAAsF,MACjB6D,EAAY7D,KAAMA,KAAK+D,cAAgB,MA5SD7I,IAAA,iBAAA4C,MAAA,WAuT7C2B,EAAA8D,EAAAnI,UAAA+C,WAAAhD,OAAAoE,eAAAgE,EAAAnI,WAAA,iBAAA4E,OAA4BP,EAAA8D,EAAAnI,UAAA+C,WAAAhD,OAAAoE,eAAAgE,EAAAnI,WAAA,iBAAA4E,MAAAtF,KAAAsF,KAC5B,IAAMgE,GAAWhE,KAAK+D,cAAgB,EACpC/D,KAAK8D,MAAMpF,OAAS,EACpBsB,KAAK+D,cAAgB,CACvB,OAAOF,GAAY7D,KAAMgE,MA3ToB9I,IAAA,gBAAAwE,IAAA,WAyB7C,MAAOM,MAAKiE,IAzBiClF,IAAA,SA2B7BmF,GAChB,GAAMC,GAAUD,IAAkBlE,KAAKiE,EACvCjE,MAAKiE,GAAuBC,EACxB,iBAAmBrE,GAAKzE,WAAa0D,EAAAyE,EAAAnI,UAAA+C,WAAAhD,OAAAoE,eAAAgE,EAAAnI,WAAA,gBAAsB8I,EAAtBlE,MACrCA,KAAKvD,EAAAnB,QAAQsG,oBAAsBuC,GACrCnE,KAAKoE,cAAc,GAAIC,aAAY,+BAhCQnJ,IAAA,oBAAAwE,IAAA,WA2C7C,MAAOM,MAAKsE,IA3CiCvF,IAAA,SA6CzBwF,GACpB,GAAMJ,GAAUI,IAAsBvE,KAAKsE,EAC3CtE,MAAKsE,GAA2BC,EAC5B,qBAAuB1E,GAAKzE,WAAa0D,EAAAyE,EAAAnI,UAAA+C,WAAAhD,OAAAoE,eAAAgE,EAAAnI,WAAA,oBAA0BmJ,EAA1BvE,MACzCA,KAAKvD,EAAAnB,QAAQsG,oBAAsBuC,GACrCnE,KAAKoE,cAAc,GAAIC,aAAY,mCAlDQnJ,IAsD1CuB,EAAAnB,QAAQ8E,SAtDkCV,IAAA,WAuD7C,GAAMU,GAAWX,EAAA8D,EAAAnI,UAAA+C,WAAAhD,OAAAoE,eAAAgE,EAAAnI,WAAMqB,EAAAnB,QAAQ8E,SAAdJ,SAGjB,OAFAI,GAASoD,mBAAoB,EAC7BpD,EAASqD,gBAAiB,EACnBrD,KA1DsClF,IAAA,gBAAAwE,IAAA,WA4G7C,MAA4C,OAArCM,KAAKwE,GACVxE,KAAKwE,IACL,GA9G2CzF,IAAA,SAgH7B0F,GAEhB,GAAMN,GAAUM,IAAUzE,KAAK0E,GAC3BlE,SACAmE,EAAcC,SAASH,EAC3B,IAAIE,IAAgB3E,KAAKwE,GAA8B,CAErD,GAAMV,GAAQ9D,KAAK8D,MACbe,EAAWf,GAASA,EAAMpF,OAAS,CACnCmG,IAAYF,GAAe,GAAKA,EAAcb,EAAMpF,SACxDiG,GAAc,GAEhB3E,KAAKwE,GAA+BG,EACpCnE,EAAOqE,GAAYF,GAAe,EAAIb,EAAMa,GAAe,KAC3D3E,KAAK8E,GAA8BtE,MAEnCA,GAAOR,KAAK8E,EAMd,IAFI,iBAAmBjF,GAAKzE,WAAa0D,EAAAyE,EAAAnI,UAAA+C,WAAAhD,OAAAoE,eAAAgE,EAAAnI,WAAA,gBAAsBqJ,EAAtBzE,MAErCmE,IAEFnE,KAAK0E,GAA+BC,EAEhC3E,KAAKvD,EAAAnB,QAAQsG,oBAAoB,CACnC,GAAMmD,GAAQ,GAAIV,aAAY,0BAC5BW,QACEjB,cAAeY,EACf7G,MAAO6G,IAGX3E,MAAKoE,cAAcW,GAInB/E,KAAKiF,KAAgCzE,IAEvCR,KAAK0D,aAAelD,MAvJuBtF,IAAA,eAAAwE,IAAA,WAuK7C,MAAOM,MAAK8E,IAA+B,MAvKE/F,IAAA,SAyK9ByB,GAEf,GAAM0E,GAAuBlF,KAAKiF,GAC5Bd,EAAU3D,IAAS0E,EACrBT,QACJ,IAAIjE,IAASR,KAAK8E,GAA6B,CAE7C,GAAMhB,GAAQ9D,KAAK8D,MACbe,EAAWf,GAASA,EAAMpF,OAAS,CACzC+F,GAAQI,EAAWM,MAAM/J,UAAUgK,QAAQ1K,KAAKoJ,EAAOtD,IAAQ,EAC/DR,KAAKwE,GAA+BC,EAChCA,EAAQ,IACVjE,EAAO,MAETR,KAAK8E,GAA8BtE,MAEnCiE,GAAQzE,KAAKwE,EAMf,IAFI,gBAAkB3E,GAAKzE,WAAa0D,EAAAyE,EAAAnI,UAAA+C,WAAAhD,OAAAoE,eAAAgE,EAAAnI,WAAA,eAAqBoF,EAArBR,MAEpCmE,IAEFnE,KAAKiF,GAA8BzE,EAE/B0E,GAEFlF,KAAKvD,EAAAnB,QAAQsF,cAAcsE,GAAsB,GAE/C1E,GAEFR,KAAKvD,EAAAnB,QAAQsF,cAAcJ,GAAM,GAGnCoD,EAA0B5D,MAEtBA,KAAKvD,EAAAnB,QAAQsG,oBAAoB,CACnC,GAAMmD,GAAQ,GAAIV,aAAY,yBAC5BW,QACEtB,aAAclD,EACd1C,MAAO0C,IAGXR,MAAKoE,cAAcW,GAInB/E,KAAK0E,KAAiCD,IAExCzE,KAAK+D,cAAgBU,MA3NsBvJ,IAAA,oBAAAwE,IAAA,WAgP7C,MAAOM,MAAKqF,IAhPiCtG,IAAA,SAkPzByE,GACpB,GAAM8B,GAAuC,SAA9BC,OAAO/B,GAChBW,EAAUmB,IAAWtF,KAAKqF,EAGhC,IAFArF,KAAKqF,GAA2BC,EAC5B,qBAAuBzF,GAAKzE,WAAa0D,EAAAyE,EAAAnI,UAAA+C,WAAAhD,OAAAoE,eAAAgE,EAAAnI,WAAA,oBAA0BoI,EAA1BxD,MACzCmE,EAAS,CACX,GAAInE,KAAKvD,EAAAnB,QAAQsG,mBAAoB,CACnC,GAAMmD,GAAQ,GAAIV,aAAY,6BAC9BrE,MAAKoE,cAAcW,GAEjBvB,GACFG,EAAkB3D,UA7PuB9E,IAAA,iBAAAwE,IAAA,WAyQ7C,MAAOM,MAAKwF,IAzQiCzG,IAAA,SA2Q5B0E,GACjB,GAAM6B,GAAoC,SAA3BC,OAAO9B,GAChBU,EAAUmB,IAAWtF,KAAKwF,EAGhC,IAFAxF,KAAKwF,GAAwBF,EACzB,kBAAoBzF,GAAKzE,WAAa0D,EAAAyE,EAAAnI,UAAA+C,WAAAhD,OAAAoE,eAAAgE,EAAAnI,WAAA,iBAAuBqI,EAAvBzD,MACtCmE,EAAS,CACX,GAAInE,KAAKvD,EAAAnB,QAAQsG,mBAAoB,CACnC,GAAMmD,GAAQ,GAAIV,aAAY,0BAC9BrE,MAAKoE,cAAcW,GAErBnB,EAA0B5D,WArRiBuD,GAKnB1D,EA6V9B,OAAO0D,GAMT,QAASM,GAAY4B,EAAShB,GAE5B,GAAMX,GAAQ2B,EAAQ3B,KACtB,IAAa,MAATA,EAEF,OAAO,CAGT,IAAM7B,GAAQ6B,EAAMpF,OACdgH,EAAeD,EAAQhC,gBAGzBgB,EAAQxC,EAASA,GAASA,EAG5B0D,KAAKC,IAAID,KAAKE,IAAIpB,EAAOxC,EAAQ,GAAI,GAEjC6D,EAAgBL,EAAQ1B,aAC9B,OAAI+B,KAAkBJ,IACpBD,EAAQ1B,cAAgB2B,GACjB,GAUX,QAAS/B,GAAkB8B,GAEzB,GAAM3B,GAAQ2B,EAAQ3B,MAChBiC,EAAYjC,EAAQA,EAAMpF,OAAS,EAEnCwG,EAAuBO,EAAQ/B,YACrC,IAAKwB,EAME,GAAkB,IAAda,EAETN,EAAQ/B,aAAe,SAClB,CAEL,GAAMsC,GAAsBb,MAAM/J,UAAUgK,QAAQ1K,KAAKoJ,EAAOoB,GAC1De,EAAwBR,EAAQ1B,aACtC,IAAIiC,EAAsB,EAAG,CAG3B,GAAME,GAAmBP,KAAKE,IAAII,EAAuBF,EAAY,EAGrEN,GAAQ/B,aAAeI,EAAMoC,OACpBF,KAAwBC,IAEjCR,EAAQ1B,cAAgBiC,OApBtBP,GAAQjC,oBAEViC,EAAQ1B,cAAgB,GAyB9B,QAASH,GAA0B6B,GACjC,GAAIvB,UACAK,SACET,EAAQ2B,EAAQ3B,KACtB,IAAa,MAATA,GAAkC,IAAjBA,EAAMpF,OAEzBwF,GAAgB,EAChBK,GAAoB,MACf,IAAIkB,EAAQhC,eAEjBS,GAAgB,EAChBK,GAAoB,MACf,CACL,GAAME,GAAQgB,EAAQ1B,aAClBU,GAAQ,GAAKX,EAAMpF,OAAS,GAG9BwF,GAAgB,EAChBK,GAAoB,IAGpBA,EAAqBE,EAAQ,EAC7BP,EAAiBO,EAAQX,EAAMpF,OAAS,GAGxC+G,EAAQvB,gBAAkBA,IAC5BuB,EAAQvB,cAAgBA,GAEtBuB,EAAQlB,oBAAsBA,IAChCkB,EAAQlB,kBAAoBA,GRsP/BpJ,OAAOiD,eAAe9D,EAAS,cAC7BwD,OAAO,GAGT,IAAIO,GAAe,WAAc,QAASC,GAAiBC,EAAQC,GAAS,IAAK,GAAIC,GAAI,EAAGA,EAAID,EAAME,OAAQD,IAAK,CAAE,GAAIE,GAAaH,EAAMC,EAAIE,GAAWZ,WAAaY,EAAWZ,aAAc,EAAOY,EAAWV,cAAe,EAAU,SAAWU,KAAYA,EAAWX,UAAW,GAAM7C,OAAOiD,eAAeG,EAAQI,EAAWzD,IAAKyD,IAAiB,MAAO,UAAUvB,EAAawB,EAAYC,GAAiJ,MAA9HD,IAAYN,EAAiBlB,EAAYhC,UAAWwD,GAAiBC,GAAaP,EAAiBlB,EAAayB,GAAqBzB,MAE5hBqC,EAAO,QAASC,GAAIV,EAAQC,EAAUC,GAA2B,OAAXF,IAAiBA,EAASW,SAASvE,UAAW,IAAI+D,GAAOhE,OAAOiE,yBAAyBJ,EAAQC,EAAW,IAAaI,SAATF,EAAoB,CAAE,GAAIG,GAASnE,OAAOoE,eAAeP,EAAS,OAAe,QAAXM,EAAmB,OAAkCI,EAAIJ,EAAQL,EAAUC,GAAoB,GAAI,SAAWC,GAAQ,MAAOA,GAAKrB,KAAgB,IAAI8B,GAAST,EAAKO,GAAK,IAAeL,SAAXO,EAA4C,MAAOA,GAAOlF,KAAKwE,IAExdJ,EAAO,QAASC,GAAIC,EAAQC,EAAUnB,EAAOoB,GAAY,GAAIC,GAAOhE,OAAOiE,yBAAyBJ,EAAQC,EAAW,IAAaI,SAATF,EAAoB,CAAE,GAAIG,GAASnE,OAAOoE,eAAeP,EAAwB,QAAXM,GAAmBP,EAAIO,EAAQL,EAAUnB,EAAOoB,OAAoB,IAAI,SAAWC,IAAQA,EAAKnB,SAAYmB,EAAKrB,MAAQA,MAAc,CAAE,GAAI0B,GAASL,EAAKJ,GAAoBM,UAAXG,GAAwBA,EAAO9E,KAAKwE,EAAUpB,GAAY,MAAOA,GAE1axD,GAAQgB,QQtsBeyB,CAnDxB,IAAAT,GAAAnC,EAAA,GR6vBKoC,EAAWV,EAAuBS,GQ5vBvCE,EAAArC,EAAA,GRgwBKsC,EAAYZ,EAAuBW,GQ5vBlCyH,GAAsB,EAAA1H,EAAAjB,SAAO,iBAC7BgJ,GAA0B,EAAA/H,EAAAjB,SAAO,qBACjC+J,GAA0B,EAAA9I,EAAAjB,SAAO,qBACjCkK,GAAuB,EAAAjJ,EAAAjB,SAAO,kBAmB9BkJ,GAA8B,EAAAjI,EAAAjB,SAAO,yBACrCwJ,GAA6B,EAAAvI,EAAAjB,SAAO,wBACpCoJ,GAA8B,EAAAnI,EAAAjB,SAAO,yBACrC2J,GAA6B,EAAA1I,EAAAjB,SAAO","file":"elix-all.min.js","sourcesContent":["/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = __webpack_require__(1);\n\n\n/***/ },\n/* 1 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar _globals = __webpack_require__(1);\n\t\n\tvar all = _interopRequireWildcard(_globals);\n\t\n\tvar _globals2 = __webpack_require__(!(function webpackMissingModule() { var e = new Error(\"Cannot find module \\\"../elix-list-box/globals\\\"\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()));\n\t\n\tvar listBox = _interopRequireWildcard(_globals2);\n\t\n\tvar _globals3 = __webpack_require__(2);\n\t\n\tvar mixins = _interopRequireWildcard(_globals3);\n\t\n\tfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\n/***/ },\n/* 2 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar _microtask = __webpack_require__(!(function webpackMissingModule() { var e = new Error(\"Cannot find module \\\"./src/microtask\\\"\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()));\n\t\n\tvar _microtask2 = _interopRequireDefault(_microtask);\n\t\n\tvar _SelectionAriaMixin = __webpack_require__(3);\n\t\n\tvar _SelectionAriaMixin2 = _interopRequireDefault(_SelectionAriaMixin);\n\t\n\tvar _ShadowTemplateMixin = __webpack_require__(6);\n\t\n\tvar _ShadowTemplateMixin2 = _interopRequireDefault(_ShadowTemplateMixin);\n\t\n\tvar _SingleSelectionMixin = __webpack_require__(7);\n\t\n\tvar _SingleSelectionMixin2 = _interopRequireDefault(_SingleSelectionMixin);\n\t\n\tvar _Symbol2 = __webpack_require__(5);\n\t\n\tvar _Symbol3 = _interopRequireDefault(_Symbol2);\n\t\n\tvar _symbols = __webpack_require__(4);\n\t\n\tvar _symbols2 = _interopRequireDefault(_symbols);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\t/*\n\t * This file is transpiled to create an ES5-compatible distribution in which\n\t * the package's main feature(s) are available via the window.Elix global.\n\t * If you're already using ES6 yourself, ignore this file, and instead import\n\t * the source file(s) you want from the src folder.\n\t */\n\t\n\twindow.Elix = window.Elix || {};\n\t\n\twindow.Elix.microtask = _microtask2.default;\n\twindow.Elix.SelectionAriaMixin = _SelectionAriaMixin2.default;\n\twindow.Elix.ShadowTemplateMixin = _ShadowTemplateMixin2.default;\n\twindow.Elix.SingleSelectionMixin = _SingleSelectionMixin2.default;\n\twindow.Elix.Symbol = _Symbol3.default;\n\twindow.Elix.symbols = _symbols2.default;\n\n/***/ },\n/* 3 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _set = function set(object, property, value, receiver) { var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent !== null) { set(parent, property, value, receiver); } } else if (\"value\" in desc && desc.writable) { desc.value = value; } else { var setter = desc.set; if (setter !== undefined) { setter.call(receiver, value); } } return value; };\n\t\n\tvar _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if (\"value\" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };\n\t\n\texports.default = function (base) {\n\t\n\t  /**\n\t   * The class prototype added by the mixin.\n\t   */\n\t  var SelectionAria = function (_base) {\n\t    _inherits(SelectionAria, _base);\n\t\n\t    function SelectionAria() {\n\t      _classCallCheck(this, SelectionAria);\n\t\n\t      return _possibleConstructorReturn(this, (SelectionAria.__proto__ || Object.getPrototypeOf(SelectionAria)).apply(this, arguments));\n\t    }\n\t\n\t    _createClass(SelectionAria, [{\n\t      key: 'connectedCallback',\n\t      value: function connectedCallback() {\n\t        if (_get(SelectionAria.prototype.__proto__ || Object.getPrototypeOf(SelectionAria.prototype), 'connectedCallback', this)) {\n\t          _get(SelectionAria.prototype.__proto__ || Object.getPrototypeOf(SelectionAria.prototype), 'connectedCallback', this).call(this);\n\t        }\n\t\n\t        // Set default ARIA role for the overall component.\n\t        if (this.getAttribute('role') == null && this[_symbols2.default.defaults].role) {\n\t          this.setAttribute('role', this[_symbols2.default.defaults].role);\n\t        }\n\t      }\n\t    }, {\n\t      key: _symbols2.default.itemAdded,\n\t      value: function value(item) {\n\t        if (_get(SelectionAria.prototype.__proto__ || Object.getPrototypeOf(SelectionAria.prototype), _symbols2.default.itemAdded, this)) {\n\t          _get(SelectionAria.prototype.__proto__ || Object.getPrototypeOf(SelectionAria.prototype), _symbols2.default.itemAdded, this).call(this, item);\n\t        }\n\t\n\t        if (!item.getAttribute('role')) {\n\t          // Assign a default ARIA role for an individual item.\n\t          item.setAttribute('role', this[_symbols2.default.defaults].itemRole);\n\t        }\n\t\n\t        // Ensure each item has an ID so we can set aria-activedescendant on the\n\t        // overall list whenever the selection changes.\n\t        //\n\t        // The ID will take the form of a base ID plus a unique integer. The base\n\t        // ID will be incorporate the component's own ID. E.g., if a component has\n\t        // ID \"foo\", then its items will have IDs that look like \"_fooOption1\". If\n\t        // the compnent has no ID itself, its items will get IDs that look like\n\t        // \"_option1\". Item IDs are prefixed with an underscore to differentiate\n\t        // them from manually-assigned IDs, and to minimize the potential for ID\n\t        // conflicts.\n\t        if (!item.id) {\n\t          var baseId = this.id ? \"_\" + this.id + \"Option\" : \"_option\";\n\t          item.id = baseId + idCount++;\n\t        }\n\t      }\n\t    }, {\n\t      key: _symbols2.default.itemSelected,\n\t      value: function value(item, selected) {\n\t        if (_get(SelectionAria.prototype.__proto__ || Object.getPrototypeOf(SelectionAria.prototype), _symbols2.default.itemSelected, this)) {\n\t          _get(SelectionAria.prototype.__proto__ || Object.getPrototypeOf(SelectionAria.prototype), _symbols2.default.itemSelected, this).call(this, item, selected);\n\t        }\n\t        item.setAttribute('aria-selected', selected);\n\t        var itemId = item.id;\n\t        if (itemId && selected) {\n\t          this.setAttribute('aria-activedescendant', itemId);\n\t        }\n\t      }\n\t    }, {\n\t      key: _symbols2.default.defaults,\n\t      get: function get() {\n\t        var defaults = _get(SelectionAria.prototype.__proto__ || Object.getPrototypeOf(SelectionAria.prototype), _symbols2.default.defaults, this) || {};\n\t        defaults.role = 'listbox';\n\t        defaults.itemRole = 'option';\n\t        return defaults;\n\t      }\n\t    }, {\n\t      key: 'selectedItem',\n\t      get: function get() {\n\t        return _get(SelectionAria.prototype.__proto__ || Object.getPrototypeOf(SelectionAria.prototype), 'selectedItem', this);\n\t      },\n\t      set: function set(item) {\n\t        if ('selectedItem' in base.prototype) {\n\t          _set(SelectionAria.prototype.__proto__ || Object.getPrototypeOf(SelectionAria.prototype), 'selectedItem', item, this);\n\t        }\n\t        if (item == null) {\n\t          // Selection was removed.\n\t          this.removeAttribute('aria-activedescendant');\n\t        }\n\t      }\n\t    }]);\n\t\n\t    return SelectionAria;\n\t  }(base);\n\t\n\t  return SelectionAria;\n\t};\n\t\n\tvar _symbols = __webpack_require__(4);\n\t\n\tvar _symbols2 = _interopRequireDefault(_symbols);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\t// Used to assign unique IDs to item elements without IDs.\n\tvar idCount = 0;\n\t\n\t/**\n\t * Mixin which treats the selected item in a list as the active item in ARIA\n\t * accessibility terms.\n\t *\n\t * Handling ARIA selection state properly is actually quite complex:\n\t *\n\t * * The items in the list need to be indicated as possible items via an ARIA\n\t *   `role` attribute value such as \"option\".\n\t * * The selected item need to be marked as selected by setting the item's\n\t *   `aria-selected` attribute to true *and* the other items need be marked as\n\t *   *not* selected by setting `aria-selected` to false.\n\t * * The outermost element with the keyboard focus needs to have attributes\n\t *   set on it so that the selection is knowable at the list level via the\n\t *   `aria-activedescendant` attribute.\n\t * * Use of `aria-activedescendant` in turn requires that all items in the\n\t *   list have ID attributes assigned to them.\n\t *\n\t * This mixin tries to address all of the above requirements. To that end,\n\t * this mixin will assign generated IDs to any item that doesn't already have\n\t * an ID.\n\t *\n\t * ARIA relies on elements to provide `role` attributes. This mixin will apply\n\t * a default role of \"listbox\" on the outer list if it doesn't already have an\n\t * explicit role. Similarly, this mixin will apply a default role of \"option\"\n\t * to any list item that does not already have a role specified.\n\t *\n\t * This mixin expects a set of members that manage the state of the selection:\n\t * `[symbols.itemSelected]`, `[symbols.itemAdded]`, and `selectedItem`. You can\n\t * supply these yourself, or do so via\n\t * [SingleSelectionMixin](SingleSelectionMixin.md).\n\t *\n\t * @module\n\t * @param base {Class} the base class to extend\n\t * @returns {Class} the extended class\n\t */\n\n/***/ },\n/* 4 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _Symbol2 = __webpack_require__(5);\n\t\n\tvar _Symbol3 = _interopRequireDefault(_Symbol2);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\t/**\n\t * A collection of (potentially polyfilled) Symbol objects for standard\n\t * component properties and methods.\n\t *\n\t * These Symbol objects are used to allow mixins and a component to internally\n\t * communicate, without exposing these properties and methods in the component's\n\t * public API.\n\t *\n\t * To use these Symbol objects in your own component, include this module and\n\t * then create a property or method whose key is the desired Symbol.\n\t *\n\t *     import 'SingleSelectionMixin' from 'elix-mixins/src/SingleSelectionMixin';\n\t *     import 'symbols' from 'elix-mixins/src/symbols';\n\t *\n\t *     class MyElement extends SingleSelectionMixin(HTMLElement) {\n\t *       [symbols.itemSelected](item, selected) {\n\t *         // This will be invoked whenever an item is selected/deselected.\n\t *       }\n\t *     }\n\t *\n\t * @module symbols\n\t */\n\tvar symbols = {\n\t\n\t  /**\n\t   * Symbols for the `content` property.\n\t   *\n\t   * This property returns the component's content -- however the component\n\t   * wants to define that. This could, for example, return the component's\n\t   * distributed children.\n\t   *\n\t   * @type {HTMLElement[]}\n\t   */\n\t  content: (0, _Symbol3.default)('content'),\n\t\n\t  /**\n\t   * Symbol for the `contentChanged` method.\n\t   *\n\t   * For components that define a `content` property, this method should be\n\t   * invoked when that property changes.\n\t   *\n\t   * @function contentChanged\n\t   */\n\t  contentChanged: (0, _Symbol3.default)('contentChanged'),\n\t\n\t  /**\n\t   * Symbol for the `defaults` property.\n\t   *\n\t   * This property can be used to set or override defaults that will be applied\n\t   * to a new component instance. When implementing this property, take care to\n\t   * first acquire any defaults defined by the superclass. The standard idiom is\n\t   * as follows:\n\t   *\n\t   *     get [symbols.defaults]() {\n\t   *       const defaults = super[symbols.defaults] || {};\n\t   *       // Set or override default values here\n\t   *       defaults.customProperty = false;\n\t   *       return defaults;\n\t   *     }\n\t   *\n\t   * @var {object} defaults\n\t   */\n\t  defaults: (0, _Symbol3.default)('defaults'),\n\t\n\t  /**\n\t   * Symbol for the `getItemText` method.\n\t   *\n\t   * This method can be applied to an item to return its text.\n\t   *\n\t   * @function getText\n\t   * @param {HTMLElement} item - the item to extract text from\n\t   * @returns {string} - the text of the item\n\t   */\n\t  getItemText: (0, _Symbol3.default)('getText'),\n\t\n\t  /**\n\t   * Symbol for the `goDown` method.\n\t   *\n\t   * This method is invoked when the user wants to go/navigate down.\n\t   *\n\t   * @function goDown\n\t   */\n\t  goDown: (0, _Symbol3.default)('goDown'),\n\t\n\t  /**\n\t   * Symbol for the `goEnd` method.\n\t   *\n\t   * This method is invoked when the user wants to go/navigate to the end (e.g.,\n\t   * of a list).\n\t   *\n\t   * @function goEnd\n\t   */\n\t  goEnd: (0, _Symbol3.default)('goEnd'),\n\t\n\t  /**\n\t   * Symbol for the `goLeft` method.\n\t   *\n\t   * This method is invoked when the user wants to go/navigate left.\n\t   *\n\t   * @function goLeft\n\t   */\n\t  goLeft: (0, _Symbol3.default)('goLeft'),\n\t\n\t  /**\n\t   * Symbol for the `goRight` method.\n\t   *\n\t   * This method is invoked when the user wants to go/navigate right.\n\t   *\n\t   * @function goRight\n\t   */\n\t  goRight: (0, _Symbol3.default)('goRight'),\n\t\n\t  /**\n\t   * Symbol for the `goStart` method.\n\t   *\n\t   * This method is invoked when the user wants to go/navigate to the start\n\t   * (e.g., of a list).\n\t   *\n\t   * @function goStart\n\t   */\n\t  goStart: (0, _Symbol3.default)('goStart'),\n\t\n\t  /**\n\t   * Symbol for the `goUp` method.\n\t   *\n\t   * This method is invoked when the user wants to go/navigate up.\n\t   *\n\t   * @function goUp\n\t   */\n\t  goUp: (0, _Symbol3.default)('goUp'),\n\t\n\t  /**\n\t   * Symbol for the `itemAdded` method.\n\t   *\n\t   * This method is invoked when a new item is added to a list.\n\t   *\n\t   * @function itemAdded\n\t   * @param {HTMLElement} item - the item being selected/deselected\n\t   */\n\t  itemAdded: (0, _Symbol3.default)('itemAdded'),\n\t\n\t  /**\n\t   * Symbol for the `itemsChanged` method.\n\t   *\n\t   * This method is invoked when the underlying contents change. It is also\n\t   * invoked on component initialization – since the items have \"changed\" from\n\t   * being nothing.\n\t   *\n\t   * @function itemsChanged\n\t   */\n\t  itemsChanged: (0, _Symbol3.default)('itemsChanged'),\n\t\n\t  /**\n\t   * Symbol for the `itemSelected` method.\n\t   *\n\t   * This method is invoked when an item becomes selected or deselected.\n\t   *\n\t   * @function itemSelected\n\t   * @param {HTMLElement} item - the item being selected/deselected\n\t   * @param {boolean} selected - true if the item is selected, false if not\n\t   */\n\t  itemSelected: (0, _Symbol3.default)('itemSelected'),\n\t\n\t  /**\n\t   * Symbol for the `keydown` method.\n\t   *\n\t   * This method is invoked when an element receives a `keydown` event.\n\t   *\n\t   * @function keydown\n\t   * @param {KeyboardEvent} event - the event being processed\n\t   */\n\t  keydown: (0, _Symbol3.default)('keydown'),\n\t\n\t  /**\n\t   * Indicates the general horizontal and/or vertical orientation of the\n\t   * component. This may affect both presentation and behavior (e.g., of\n\t   * keyboard navigation).\n\t   *\n\t   * Accepted values are \"horizontal\", \"vertical\", or \"both\" (the default).\n\t   *\n\t   * @type {string}\n\t   */\n\t  orientation: (0, _Symbol3.default)('orientation'),\n\t\n\t  /**\n\t   * Symbol for the `raiseChangeEvents` property.\n\t   *\n\t   * This property is used by mixins to determine whether they should raise\n\t   * property change events. The standard HTML pattern is to only raise such\n\t   * events in response to direct user interactions. For a detailed discussion\n\t   * of this point, see the Gold Standard checklist item for\n\t   * [Propery Change Events](https://github.com/webcomponents/gold-standard/wiki/Property%20Change%20Events).\n\t   *\n\t   * The above article describes a pattern for using a flag to track whether\n\t   * work is being performed in response to internal component activity, and\n\t   * whether the component should therefore raise property change events.\n\t   * This `raiseChangeEvents` symbol is a shared flag used for that purpose by\n\t   * all Elix mixins and components. Sharing this flag ensures that internal\n\t   * activity (e.g., a UI event listener) in one mixin can signal other mixins\n\t   * handling affected properties to raise change events.\n\t   *\n\t   * All UI event listeners (and other forms of internal handlers, such as\n\t   * timeouts and async network handlers) should set `raiseChangeEvents` to\n\t   * `true` at the start of the event handler, then `false` at the end:\n\t   *\n\t   *     this.addEventListener('click', event => {\n\t   *       this[symbols.raiseChangeEvents] = true;\n\t   *       // Do work here, possibly setting properties, like:\n\t   *       this.foo = 'Hello';\n\t   *       this[symbols.raiseChangeEvents] = false;\n\t   *     });\n\t   *\n\t   * Elsewhere, property setters that raise change events should only do so it\n\t   * this property is `true`:\n\t   *\n\t   *     set foo(value) {\n\t   *       // Save foo value here, do any other work.\n\t   *       if (this[symbols.raiseChangeEvents]) {\n\t   *         const event = new CustomEvent('foo-changed');\n\t   *         this.dispatchEvent(event);\n\t   *       }\n\t   *     }\n\t   *\n\t   * In this way, programmatic attempts to set the `foo` property will not\n\t   * trigger the `foo-changed` event, but UI interactions that update that\n\t   * property will cause those events to be raised.\n\t   *\n\t   * @var {boolean} raiseChangeEvents\n\t   */\n\t  raiseChangeEvents: (0, _Symbol3.default)('raiseChangeEvents'),\n\t\n\t  /**\n\t   * Symbol for the `shadowCreated` method.\n\t   *\n\t   * This method is invoked when the component's shadow root has been attached\n\t   * and populated. Other code can handle this method to perform initialization\n\t   * that depends upon the existence of a populated shadow subtree.\n\t   *\n\t   * @function shadowCreated\n\t   */\n\t  shadowCreated: (0, _Symbol3.default)('shadowCreated'),\n\t\n\t  /**\n\t   * Symbol for the `template` property.\n\t   *\n\t   * This property returns a component's template.\n\t   *\n\t   * @type {string|HTMLTemplateElement}\n\t   */\n\t  template: (0, _Symbol3.default)('template')\n\t};\n\t\n\texports.default = symbols;\n\n/***/ },\n/* 5 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t/* The number of fake symbols we've served up */\n\tvar count = 0;\n\t\n\tfunction uniqueString(description) {\n\t  return '_' + description + count++;\n\t}\n\t\n\tvar symbolFunction = typeof window.Symbol === 'function' ? window.Symbol : uniqueString;\n\t\n\t/**\n\t * Polyfill for ES6 symbol class.\n\t *\n\t * Mixins and component classes often want to associate private data with an\n\t * element instance, but JavaScript does not have direct support for true\n\t * private properties. One approach is to use the\n\t * [Symbol](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol)\n\t * data type to set and retrieve data on an element.\n\t *\n\t * Unfortunately, the Symbol type is not available in Internet Explorer 11. In\n\t * lieu of returning a true Symbol, this polyfill returns a different string\n\t * each time it is called.\n\t *\n\t * Usage:\n\t *\n\t *     const fooSymbol = Symbol('foo');\n\t *\n\t *     class MyElement extends HTMLElement {\n\t *       get foo() {\n\t *         return this[fooSymbol];\n\t *       }\n\t *       set foo(value) {\n\t *         this[fooSymbol] = value;\n\t *       }\n\t *     }\n\t *\n\t * In IE 11, this sample will \"hide\" data behind an instance property that looks\n\t * like this._foo0. The underscore is meant to reduce (not eliminate) potential\n\t * accidental access, and the unique number at the end is mean to avoid (not\n\t * eliminate) naming conflicts.\n\t *\n\t * @function Symbol\n\t * @param {string} description - A string to identify the symbol when debugging\n\t * @returns {Symbol|string} — A Symbol (in ES6 browsers) or unique string ID (in\n\t * ES5).\n\t */\n\texports.default = symbolFunction;\n\n/***/ },\n/* 6 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if (\"value\" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };\n\t\n\texports.default = ShadowTemplateMixin;\n\t\n\tvar _symbols = __webpack_require__(4);\n\t\n\tvar _symbols2 = _interopRequireDefault(_symbols);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\t// A cache of processed templates.\n\t//\n\t// We maintain this as a map keyed by element tag (localName). We could store\n\t// an element's processed template on its element prototype. One scenario that\n\t// wouldn't support would be registration of the same constructor under multiple\n\t// tag names, which was a (perhaps theoretical) use case for Custom Elements.\n\t//\n\tvar mapTagToTemplate = {};\n\t\n\t/**\n\t * Mixin which adds stamping a template into a Shadow DOM subtree upon component\n\t * instantiation.\n\t *\n\t * To use this mixin, define a `template` property as a string or HTML\n\t * `<template>` element:\n\t *\n\t *     class MyElement extends ShadowTemplateMixin(HTMLElement) {\n\t *       get [symbols.template]() {\n\t *         return `Hello, <em>world</em>.`;\n\t *       }\n\t *     }\n\t *\n\t * When your component class is instantiated, a shadow root will be created on\n\t * the instance, and the contents of the template will be cloned into the\n\t * shadow root. If your component does not define a `template` property, this\n\t * mixin has no effect.\n\t *\n\t * For the time being, this extension retains support for Shadow DOM v0. That\n\t * will eventually be deprecated as browsers (and the Shadow DOM polyfill)\n\t * implement Shadow DOM v1.\n\t *\n\t * @module ShadowTemplateMixin\n\t * @param base {Class} the base class to extend\n\t * @returns {Class} the extended class\n\t */\n\tfunction ShadowTemplateMixin(base) {\n\t\n\t  /**\n\t   * The class prototype added by the mixin.\n\t   */\n\t  var ShadowTemplate = function (_base) {\n\t    _inherits(ShadowTemplate, _base);\n\t\n\t    /*\n\t     * If the component defines a template, a shadow root will be created on the\n\t     * component instance, and the template stamped into it.\n\t     */\n\t    function ShadowTemplate() {\n\t      _classCallCheck(this, ShadowTemplate);\n\t\n\t      var _this = _possibleConstructorReturn(this, (ShadowTemplate.__proto__ || Object.getPrototypeOf(ShadowTemplate)).call(this));\n\t\n\t      var tag = _this.localName;\n\t      var template = mapTagToTemplate[tag];\n\t\n\t      // See if we've already processed a template for this tag.\n\t      if (!template) {\n\t        // This is the first time we've created an instance of this tag.\n\t\n\t        // Get the template and perform initial processing.\n\t        template = _this[_symbols2.default.template];\n\t        if (!template) {\n\t          console.warn('ShadowTemplateMixin expects a component to define a property called [symbols.template].');\n\t          return _possibleConstructorReturn(_this);\n\t        }\n\t\n\t        if (typeof template === 'string') {\n\t          // Upgrade plain string to real template.\n\t          var templateText = template;\n\t          template = document.createElement('template');\n\t          template.innerHTML = templateText;\n\t        }\n\t\n\t        if (window.ShadyCSS) {\n\t          // Let the CSS polyfill do its own initialization.\n\t          window.ShadyCSS.prepareTemplate(template, tag);\n\t        }\n\t\n\t        // Store this for the next time we create the same type of element.\n\t        mapTagToTemplate[tag] = template;\n\t      }\n\t\n\t      // Stamp the template into a new shadow root.\n\t      var root = _this.attachShadow({ mode: 'open' });\n\t      var clone = document.importNode(template.content, true);\n\t      root.appendChild(clone);\n\t\n\t      /* Let the component know the shadow tree has been populated. */\n\t      if (_this[_symbols2.default.shadowCreated]) {\n\t        _this[_symbols2.default.shadowCreated]();\n\t      }\n\t      return _this;\n\t    }\n\t\n\t    _createClass(ShadowTemplate, [{\n\t      key: 'connectedCallback',\n\t      value: function connectedCallback() {\n\t        if (_get(ShadowTemplate.prototype.__proto__ || Object.getPrototypeOf(ShadowTemplate.prototype), 'connectedCallback', this)) {\n\t          _get(ShadowTemplate.prototype.__proto__ || Object.getPrototypeOf(ShadowTemplate.prototype), 'connectedCallback', this).call(this);\n\t        }\n\t        if (window.ShadyCSS) {\n\t          window.ShadyCSS.applyStyle(this);\n\t        }\n\t      }\n\t    }]);\n\t\n\t    return ShadowTemplate;\n\t  }(base);\n\t\n\t  return ShadowTemplate;\n\t}\n\n/***/ },\n/* 7 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if (\"value\" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };\n\t\n\tvar _set = function set(object, property, value, receiver) { var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent !== null) { set(parent, property, value, receiver); } } else if (\"value\" in desc && desc.writable) { desc.value = value; } else { var setter = desc.set; if (setter !== undefined) { setter.call(receiver, value); } } return value; };\n\t\n\texports.default = SingleSelectionMixin;\n\t\n\tvar _Symbol2 = __webpack_require__(5);\n\t\n\tvar _Symbol3 = _interopRequireDefault(_Symbol2);\n\t\n\tvar _symbols = __webpack_require__(4);\n\t\n\tvar _symbols2 = _interopRequireDefault(_symbols);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\t// Symbols for private data members on an element.\n\tvar canSelectNextSymbol = (0, _Symbol3.default)('canSelectNext');\n\tvar canSelectPreviousSymbol = (0, _Symbol3.default)('canSelectPrevious');\n\tvar selectionRequiredSymbol = (0, _Symbol3.default)('selectionRequired');\n\tvar selectionWrapsSymbol = (0, _Symbol3.default)('selectionWraps');\n\t\n\t// We want to expose both selectedIndex and selectedItem as independent\n\t// properties but keep them in sync. This allows a component user to reference\n\t// the selection by whatever means is most natural for their situation.\n\t//\n\t// To efficiently keep these properties in sync, we track \"external\" and\n\t// \"internal\" references for each property:\n\t//\n\t// The external index or item is the one we report to the outside world when\n\t// asked for selection.  When handling a change to index or item, we update the\n\t// external reference as soon as possible, so that if anyone immediately asks\n\t// for the current selection, they will receive a stable answer.\n\t//\n\t// The internal index or item tracks whichever index or item last received the\n\t// full set of processing. Processing includes raising a change event for the\n\t// new value. Once we've begun that processing, we store the new value as the\n\t// internal value to indicate we've handled it.\n\t//\n\tvar externalSelectedIndexSymbol = (0, _Symbol3.default)('externalSelectedIndex');\n\tvar externalSelectedItemSymbol = (0, _Symbol3.default)('externalSelectedItem');\n\tvar internalSelectedIndexSymbol = (0, _Symbol3.default)('internalSelectedIndex');\n\tvar internalSelectedItemSymbol = (0, _Symbol3.default)('internalSelectedItem');\n\t\n\t/**\n\t * Mixin which adds single-selection semantics for items in a list.\n\t *\n\t * This mixin expects a component to provide an `items` Array or NodeList of\n\t * all elements in the list.\n\t *\n\t * This mixin tracks a single selected item in the list, and provides means to\n\t * get and set that state by item position (`selectedIndex`) or item identity\n\t * (`selectedItem`). The selection can be moved in the list via the methods\n\t * `selectFirst`, `selectLast`, `selectNext`, and `selectPrevious`.\n\t *\n\t * This mixin does not produce any user-visible effects to represent\n\t * selection.\n\t *\n\t * @module SingleSelectionMixin\n\t * @param base {Class} the base class to extend\n\t * @returns {Class} the extended class\n\t */\n\tfunction SingleSelectionMixin(base) {\n\t\n\t  /**\n\t   * The class prototype added by the mixin.\n\t   */\n\t  var SingleSelection = function (_base) {\n\t    _inherits(SingleSelection, _base);\n\t\n\t    function SingleSelection() {\n\t      _classCallCheck(this, SingleSelection);\n\t\n\t      // Set defaults.\n\t      var _this = _possibleConstructorReturn(this, (SingleSelection.__proto__ || Object.getPrototypeOf(SingleSelection)).call(this));\n\t\n\t      if (typeof _this.selectionRequired === 'undefined') {\n\t        _this.selectionRequired = _this[_symbols2.default.defaults].selectionRequired;\n\t      }\n\t      if (typeof _this.selectionWraps === 'undefined') {\n\t        _this.selectionWraps = _this[_symbols2.default.defaults].selectionWraps;\n\t      }\n\t      return _this;\n\t    }\n\t\n\t    /**\n\t     * True if the selection can be moved to the next item, false if not (the\n\t     * selected item is the last item in the list).\n\t     *\n\t     * @type {boolean}\n\t     */\n\t\n\t\n\t    _createClass(SingleSelection, [{\n\t      key: _symbols2.default.itemAdded,\n\t\n\t\n\t      /**\n\t       * Handle a new item being added to the list.\n\t       *\n\t       * The default implementation of this method simply sets the item's\n\t       * selection state to false.\n\t       *\n\t       * @param {HTMLElement} item - the item being added\n\t       */\n\t      value: function value(item) {\n\t        if (_get(SingleSelection.prototype.__proto__ || Object.getPrototypeOf(SingleSelection.prototype), _symbols2.default.itemAdded, this)) {\n\t          _get(SingleSelection.prototype.__proto__ || Object.getPrototypeOf(SingleSelection.prototype), _symbols2.default.itemAdded, this).call(this, item);\n\t        }\n\t        this[_symbols2.default.itemSelected](item, item === this.selectedItem);\n\t      }\n\t    }, {\n\t      key: _symbols2.default.itemsChanged,\n\t      value: function value() {\n\t        if (_get(SingleSelection.prototype.__proto__ || Object.getPrototypeOf(SingleSelection.prototype), _symbols2.default.itemsChanged, this)) {\n\t          _get(SingleSelection.prototype.__proto__ || Object.getPrototypeOf(SingleSelection.prototype), _symbols2.default.itemsChanged, this).call(this);\n\t        }\n\t\n\t        // In case selected item changed position or was removed.\n\t        trackSelectedItem(this);\n\t\n\t        // In case the change in items affected which navigations are possible.\n\t        updatePossibleNavigations(this);\n\t      }\n\t\n\t      /**\n\t       * Apply the indicate selection state to the item.\n\t       *\n\t       * The default implementation of this method does nothing. User-visible\n\t       * effects will typically be handled by other mixins.\n\t       *\n\t       * @param {HTMLElement} item - the item being selected/deselected\n\t       * @param {boolean} selected - true if the item is selected, false if not\n\t       */\n\t\n\t    }, {\n\t      key: _symbols2.default.itemSelected,\n\t      value: function value(item, selected) {\n\t        if (_get(SingleSelection.prototype.__proto__ || Object.getPrototypeOf(SingleSelection.prototype), _symbols2.default.itemSelected, this)) {\n\t          _get(SingleSelection.prototype.__proto__ || Object.getPrototypeOf(SingleSelection.prototype), _symbols2.default.itemSelected, this).call(this, item, selected);\n\t        }\n\t      }\n\t\n\t      /**\n\t       * The index of the item which is currently selected.\n\t       *\n\t       * The setter expects an integer or a string representing an integer.\n\t       *\n\t       * A `selectedIndex` of -1 indicates there is no selection. Setting this\n\t       * property to -1 will remove any existing selection.\n\t       *\n\t       * @type {number}\n\t       */\n\t\n\t    }, {\n\t      key: 'selectFirst',\n\t\n\t\n\t      /**\n\t       * Select the first item in the list.\n\t       *\n\t       * @returns {Boolean} True if the selection changed, false if not.\n\t       */\n\t      value: function selectFirst() {\n\t        if (_get(SingleSelection.prototype.__proto__ || Object.getPrototypeOf(SingleSelection.prototype), 'selectFirst', this)) {\n\t          _get(SingleSelection.prototype.__proto__ || Object.getPrototypeOf(SingleSelection.prototype), 'selectFirst', this).call(this);\n\t        }\n\t        return selectIndex(this, 0);\n\t      }\n\t\n\t      /**\n\t       * True if the list should always have a selection (if it has items).\n\t       *\n\t       * @type {boolean}\n\t       * @default false\n\t       */\n\t\n\t    }, {\n\t      key: 'selectLast',\n\t\n\t\n\t      /**\n\t       * Select the last item in the list.\n\t       *\n\t       * @returns {Boolean} True if the selection changed, false if not.\n\t       */\n\t      value: function selectLast() {\n\t        if (_get(SingleSelection.prototype.__proto__ || Object.getPrototypeOf(SingleSelection.prototype), 'selectLast', this)) {\n\t          _get(SingleSelection.prototype.__proto__ || Object.getPrototypeOf(SingleSelection.prototype), 'selectLast', this).call(this);\n\t        }\n\t        return selectIndex(this, this.items.length - 1);\n\t      }\n\t\n\t      /**\n\t       * Select the next item in the list.\n\t       *\n\t       * If the list has no selection, the first item will be selected.\n\t       *\n\t       * @returns {Boolean} True if the selection changed, false if not.\n\t       */\n\t\n\t    }, {\n\t      key: 'selectNext',\n\t      value: function selectNext() {\n\t        if (_get(SingleSelection.prototype.__proto__ || Object.getPrototypeOf(SingleSelection.prototype), 'selectNext', this)) {\n\t          _get(SingleSelection.prototype.__proto__ || Object.getPrototypeOf(SingleSelection.prototype), 'selectNext', this).call(this);\n\t        }\n\t        return selectIndex(this, this.selectedIndex + 1);\n\t      }\n\t\n\t      /**\n\t       * Select the previous item in the list.\n\t       *\n\t       * If the list has no selection, the last item will be selected.\n\t       *\n\t       * @returns {Boolean} True if the selection changed, false if not.\n\t       */\n\t\n\t    }, {\n\t      key: 'selectPrevious',\n\t      value: function selectPrevious() {\n\t        if (_get(SingleSelection.prototype.__proto__ || Object.getPrototypeOf(SingleSelection.prototype), 'selectPrevious', this)) {\n\t          _get(SingleSelection.prototype.__proto__ || Object.getPrototypeOf(SingleSelection.prototype), 'selectPrevious', this).call(this);\n\t        }\n\t        var newIndex = this.selectedIndex < 0 ? this.items.length - 1 : // No selection yet; select last item.\n\t        this.selectedIndex - 1;\n\t        return selectIndex(this, newIndex);\n\t      }\n\t\n\t      /**\n\t       * Fires when the canSelectNext property changes in response to internal\n\t       * component activity.\n\t       *\n\t       * @memberof SingleSelection\n\t       * @event can-select-next-changed\n\t       */\n\t\n\t      /**\n\t       * Fires when the canSelectPrevious property changes in response to internal\n\t       * component activity.\n\t       *\n\t       * @memberof SingleSelection\n\t       * @event can-select-previous-changed\n\t       */\n\t\n\t      /**\n\t       * Fires when the selectedIndex property changes in response to internal\n\t       * component activity.\n\t       *\n\t       * @memberof SingleSelection\n\t       * @event selected-index-changed\n\t       * @param {number} detail.selectedIndex The new selected index.\n\t       */\n\t\n\t      /**\n\t       * Fires when the selectedItem property changes in response to internal\n\t       * component activity.\n\t       *\n\t       * @memberof SingleSelection\n\t       * @event selected-item-changed\n\t       * @param {HTMLElement} detail.selectedItem The new selected item.\n\t       */\n\t\n\t    }, {\n\t      key: 'canSelectNext',\n\t      get: function get() {\n\t        return this[canSelectNextSymbol];\n\t      },\n\t      set: function set(canSelectNext) {\n\t        var changed = canSelectNext !== this[canSelectNextSymbol];\n\t        this[canSelectNextSymbol] = canSelectNext;\n\t        if ('canSelectNext' in base.prototype) {\n\t          _set(SingleSelection.prototype.__proto__ || Object.getPrototypeOf(SingleSelection.prototype), 'canSelectNext', canSelectNext, this);\n\t        }\n\t        if (this[_symbols2.default.raiseChangeEvents] && changed) {\n\t          this.dispatchEvent(new CustomEvent('can-select-next-changed'));\n\t        }\n\t      }\n\t\n\t      /**\n\t       * True if the selection can be moved to the previous item, false if not\n\t       * (the selected item is the first one in the list).\n\t       *\n\t       * @type {boolean}\n\t       */\n\t\n\t    }, {\n\t      key: 'canSelectPrevious',\n\t      get: function get() {\n\t        return this[canSelectPreviousSymbol];\n\t      },\n\t      set: function set(canSelectPrevious) {\n\t        var changed = canSelectPrevious !== this[canSelectPreviousSymbol];\n\t        this[canSelectPreviousSymbol] = canSelectPrevious;\n\t        if ('canSelectPrevious' in base.prototype) {\n\t          _set(SingleSelection.prototype.__proto__ || Object.getPrototypeOf(SingleSelection.prototype), 'canSelectPrevious', canSelectPrevious, this);\n\t        }\n\t        if (this[_symbols2.default.raiseChangeEvents] && changed) {\n\t          this.dispatchEvent(new CustomEvent('can-select-previous-changed'));\n\t        }\n\t      }\n\t    }, {\n\t      key: _symbols2.default.defaults,\n\t      get: function get() {\n\t        var defaults = _get(SingleSelection.prototype.__proto__ || Object.getPrototypeOf(SingleSelection.prototype), _symbols2.default.defaults, this) || {};\n\t        defaults.selectionRequired = false;\n\t        defaults.selectionWraps = false;\n\t        return defaults;\n\t      }\n\t    }, {\n\t      key: 'selectedIndex',\n\t      get: function get() {\n\t        return this[externalSelectedIndexSymbol] != null ? this[externalSelectedIndexSymbol] : -1;\n\t      },\n\t      set: function set(index) {\n\t        // See notes at top about internal vs. external copies of this property.\n\t        var changed = index !== this[internalSelectedIndexSymbol];\n\t        var item = void 0;\n\t        var parsedIndex = parseInt(index);\n\t        if (parsedIndex !== this[externalSelectedIndexSymbol]) {\n\t          // Store the new index and the corresponding item.\n\t          var items = this.items;\n\t          var hasItems = items && items.length > 0;\n\t          if (!(hasItems && parsedIndex >= 0 && parsedIndex < items.length)) {\n\t            parsedIndex = -1; // No item at that index.\n\t          }\n\t          this[externalSelectedIndexSymbol] = parsedIndex;\n\t          item = hasItems && parsedIndex >= 0 ? items[parsedIndex] : null;\n\t          this[externalSelectedItemSymbol] = item;\n\t        } else {\n\t          item = this[externalSelectedItemSymbol];\n\t        }\n\t\n\t        // Now let super do any work.\n\t        if ('selectedIndex' in base.prototype) {\n\t          _set(SingleSelection.prototype.__proto__ || Object.getPrototypeOf(SingleSelection.prototype), 'selectedIndex', index, this);\n\t        }\n\t\n\t        if (changed) {\n\t          // The selected index changed.\n\t          this[internalSelectedIndexSymbol] = parsedIndex;\n\t\n\t          if (this[_symbols2.default.raiseChangeEvents]) {\n\t            var event = new CustomEvent('selected-index-changed', {\n\t              detail: {\n\t                selectedIndex: parsedIndex,\n\t                value: parsedIndex // for Polymer binding. TODO: Verify still necessary\n\t              }\n\t            });\n\t            this.dispatchEvent(event);\n\t          }\n\t        }\n\t\n\t        if (this[internalSelectedItemSymbol] !== item) {\n\t          // Update selectedItem property so it can have its own effects.\n\t          this.selectedItem = item;\n\t        }\n\t      }\n\t\n\t      /**\n\t       * The currently selected item, or null if there is no selection.\n\t       *\n\t       * Setting this property to null deselects any currently-selected item.\n\t       * Setting this property to an object that is not in the list has no effect.\n\t       *\n\t       * TODO: Even if selectionRequired, can still explicitly set selectedItem to null.\n\t       * TODO: If selectionRequired, leave selection alone?\n\t       *\n\t       * @type {object}\n\t       */\n\t\n\t    }, {\n\t      key: 'selectedItem',\n\t      get: function get() {\n\t        return this[externalSelectedItemSymbol] || null;\n\t      },\n\t      set: function set(item) {\n\t        // See notes at top about internal vs. external copies of this property.\n\t        var previousSelectedItem = this[internalSelectedItemSymbol];\n\t        var changed = item !== previousSelectedItem;\n\t        var index = void 0;\n\t        if (item !== this[externalSelectedItemSymbol]) {\n\t          // Store item and look up corresponding index.\n\t          var items = this.items;\n\t          var hasItems = items && items.length > 0;\n\t          index = hasItems ? Array.prototype.indexOf.call(items, item) : -1;\n\t          this[externalSelectedIndexSymbol] = index;\n\t          if (index < 0) {\n\t            item = null; // The indicated item isn't actually in `items`.\n\t          }\n\t          this[externalSelectedItemSymbol] = item;\n\t        } else {\n\t          index = this[externalSelectedIndexSymbol];\n\t        }\n\t\n\t        // Now let super do any work.\n\t        if ('selectedItem' in base.prototype) {\n\t          _set(SingleSelection.prototype.__proto__ || Object.getPrototypeOf(SingleSelection.prototype), 'selectedItem', item, this);\n\t        }\n\t\n\t        if (changed) {\n\t          // The selected item changed.\n\t          this[internalSelectedItemSymbol] = item;\n\t\n\t          if (previousSelectedItem) {\n\t            // Update selection state of old item.\n\t            this[_symbols2.default.itemSelected](previousSelectedItem, false);\n\t          }\n\t          if (item) {\n\t            // Update selection state to new item.\n\t            this[_symbols2.default.itemSelected](item, true);\n\t          }\n\t\n\t          updatePossibleNavigations(this);\n\t\n\t          if (this[_symbols2.default.raiseChangeEvents]) {\n\t            var event = new CustomEvent('selected-item-changed', {\n\t              detail: {\n\t                selectedItem: item,\n\t                value: item // for Polymer binding\n\t              }\n\t            });\n\t            this.dispatchEvent(event);\n\t          }\n\t        }\n\t\n\t        if (this[internalSelectedIndexSymbol] !== index) {\n\t          // Update selectedIndex property so it can have its own effects.\n\t          this.selectedIndex = index;\n\t        }\n\t      }\n\t    }, {\n\t      key: 'selectionRequired',\n\t      get: function get() {\n\t        return this[selectionRequiredSymbol];\n\t      },\n\t      set: function set(selectionRequired) {\n\t        var parsed = String(selectionRequired) === 'true';\n\t        var changed = parsed !== this[selectionRequiredSymbol];\n\t        this[selectionRequiredSymbol] = parsed;\n\t        if ('selectionRequired' in base.prototype) {\n\t          _set(SingleSelection.prototype.__proto__ || Object.getPrototypeOf(SingleSelection.prototype), 'selectionRequired', selectionRequired, this);\n\t        }\n\t        if (changed) {\n\t          if (this[_symbols2.default.raiseChangeEvents]) {\n\t            var event = new CustomEvent('selection-required-changed');\n\t            this.dispatchEvent(event);\n\t          }\n\t          if (selectionRequired) {\n\t            trackSelectedItem(this);\n\t          }\n\t        }\n\t      }\n\t\n\t      /**\n\t       * True if selection navigations wrap from last to first, and vice versa.\n\t       *\n\t       * @type {boolean}\n\t       * @default false\n\t       */\n\t\n\t    }, {\n\t      key: 'selectionWraps',\n\t      get: function get() {\n\t        return this[selectionWrapsSymbol];\n\t      },\n\t      set: function set(selectionWraps) {\n\t        var parsed = String(selectionWraps) === 'true';\n\t        var changed = parsed !== this[selectionWrapsSymbol];\n\t        this[selectionWrapsSymbol] = parsed;\n\t        if ('selectionWraps' in base.prototype) {\n\t          _set(SingleSelection.prototype.__proto__ || Object.getPrototypeOf(SingleSelection.prototype), 'selectionWraps', selectionWraps, this);\n\t        }\n\t        if (changed) {\n\t          if (this[_symbols2.default.raiseChangeEvents]) {\n\t            var event = new CustomEvent('selection-wraps-changed');\n\t            this.dispatchEvent(event);\n\t          }\n\t          updatePossibleNavigations(this);\n\t        }\n\t      }\n\t    }]);\n\t\n\t    return SingleSelection;\n\t  }(base);\n\t\n\t  return SingleSelection;\n\t}\n\t\n\t// Ensure the given index is within bounds, and select it if it's not already\n\t// selected.\n\tfunction selectIndex(element, index) {\n\t\n\t  var items = element.items;\n\t  if (items == null) {\n\t    // Nothing to select.\n\t    return false;\n\t  }\n\t\n\t  var count = items.length;\n\t  var boundedIndex = element.selectionWraps ?\n\t  // JavaScript mod doesn't handle negative numbers the way we want to wrap.\n\t  // See http://stackoverflow.com/a/18618250/76472\n\t  (index % count + count) % count :\n\t\n\t  // Keep index within bounds of array.\n\t  Math.max(Math.min(index, count - 1), 0);\n\t\n\t  var previousIndex = element.selectedIndex;\n\t  if (previousIndex !== boundedIndex) {\n\t    element.selectedIndex = boundedIndex;\n\t    return true;\n\t  } else {\n\t    return false;\n\t  }\n\t}\n\t\n\t// Following a change in the set of items, or in the value of the\n\t// `selectionRequired` property, reacquire the selected item. If it's moved,\n\t// update `selectedIndex`. If it's been removed, and a selection is required,\n\t// try to select another item.\n\tfunction trackSelectedItem(element) {\n\t\n\t  var items = element.items;\n\t  var itemCount = items ? items.length : 0;\n\t\n\t  var previousSelectedItem = element.selectedItem;\n\t  if (!previousSelectedItem) {\n\t    // No item was previously selected.\n\t    if (element.selectionRequired) {\n\t      // Select the first item by default.\n\t      element.selectedIndex = 0;\n\t    }\n\t  } else if (itemCount === 0) {\n\t    // We've lost the selection, and there's nothing left to select.\n\t    element.selectedItem = null;\n\t  } else {\n\t    // Try to find the previously-selected item in the current set of items.\n\t    var indexInCurrentItems = Array.prototype.indexOf.call(items, previousSelectedItem);\n\t    var previousSelectedIndex = element.selectedIndex;\n\t    if (indexInCurrentItems < 0) {\n\t      // Previously-selected item was removed from the items.\n\t      // Select the item at the same index (if it exists) or as close as possible.\n\t      var newSelectedIndex = Math.min(previousSelectedIndex, itemCount - 1);\n\t      // Select by item, since index may be the same, and we want to raise the\n\t      // selected-item-changed event.\n\t      element.selectedItem = items[newSelectedIndex];\n\t    } else if (indexInCurrentItems !== previousSelectedIndex) {\n\t      // Previously-selected item still there, but changed position.\n\t      element.selectedIndex = indexInCurrentItems;\n\t    }\n\t  }\n\t}\n\t\n\t// Following a change in selection, report whether it's now possible to\n\t// go next/previous from the given index.\n\tfunction updatePossibleNavigations(element) {\n\t  var canSelectNext = void 0;\n\t  var canSelectPrevious = void 0;\n\t  var items = element.items;\n\t  if (items == null || items.length === 0) {\n\t    // No items to select.\n\t    canSelectNext = false;\n\t    canSelectPrevious = false;\n\t  } else if (element.selectionWraps) {\n\t    // Since there are items, can always go next/previous.\n\t    canSelectNext = true;\n\t    canSelectPrevious = true;\n\t  } else {\n\t    var index = element.selectedIndex;\n\t    if (index < 0 && items.length > 0) {\n\t      // Special case. If there are items but no selection, declare that it's\n\t      // always possible to go next/previous to create a selection.\n\t      canSelectNext = true;\n\t      canSelectPrevious = true;\n\t    } else {\n\t      // Normal case: we have an index in a list that has items.\n\t      canSelectPrevious = index > 0;\n\t      canSelectNext = index < items.length - 1;\n\t    }\n\t  }\n\t  if (element.canSelectNext !== canSelectNext) {\n\t    element.canSelectNext = canSelectNext;\n\t  }\n\t  if (element.canSelectPrevious !== canSelectPrevious) {\n\t    element.canSelectPrevious = canSelectPrevious;\n\t  }\n\t}\n\n/***/ }\n/******/ ]);\n\n\n// WEBPACK FOOTER //\n// elix-all.min.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 9167c200a6046a24ef0b","/*\n * This file is transpiled to create an ES5-compatible distribution of all\n * components in the project. If you're already using ES6 yourself, ignore this\n * file, and instead import the source file(s) you want from the specific\n * package you want.\n */\n\n// Import all the globals from each package.\n// We tell jshint to ignore the fact that we're not actually using them here.\n/* jshint ignore:start */\n\nimport * as all from '../elix-all/globals';\nimport * as listBox from '../elix-list-box/globals';\nimport * as mixins from '../elix-mixins/globals';\n\n/* jshint ignore:end */\n\n\n\n// WEBPACK FOOTER //\n// ./elements/elix-all/globals.js","/*\n * This file is transpiled to create an ES5-compatible distribution in which\n * the package's main feature(s) are available via the window.Elix global.\n * If you're already using ES6 yourself, ignore this file, and instead import\n * the source file(s) you want from the src folder.\n */\n\nimport microtask from './src/microtask';\nimport SelectionAriaMixin from './src/SelectionAriaMixin';\nimport ShadowTemplateMixin from './src/ShadowTemplateMixin';\nimport SingleSelectionMixin from './src/SingleSelectionMixin';\nimport Symbol from './src/Symbol';\nimport symbols from './src/symbols';\n\nwindow.Elix = window.Elix || {};\n\nwindow.Elix.microtask = microtask;\nwindow.Elix.SelectionAriaMixin = SelectionAriaMixin;\nwindow.Elix.ShadowTemplateMixin = ShadowTemplateMixin;\nwindow.Elix.SingleSelectionMixin = SingleSelectionMixin;\nwindow.Elix.Symbol = Symbol;\nwindow.Elix.symbols = symbols;\n\n\n\n// WEBPACK FOOTER //\n// ./elements/elix-mixins/globals.js","import symbols from './symbols';\n\n\n// Used to assign unique IDs to item elements without IDs.\nlet idCount = 0;\n\n\n/**\n * Mixin which treats the selected item in a list as the active item in ARIA\n * accessibility terms.\n *\n * Handling ARIA selection state properly is actually quite complex:\n *\n * * The items in the list need to be indicated as possible items via an ARIA\n *   `role` attribute value such as \"option\".\n * * The selected item need to be marked as selected by setting the item's\n *   `aria-selected` attribute to true *and* the other items need be marked as\n *   *not* selected by setting `aria-selected` to false.\n * * The outermost element with the keyboard focus needs to have attributes\n *   set on it so that the selection is knowable at the list level via the\n *   `aria-activedescendant` attribute.\n * * Use of `aria-activedescendant` in turn requires that all items in the\n *   list have ID attributes assigned to them.\n *\n * This mixin tries to address all of the above requirements. To that end,\n * this mixin will assign generated IDs to any item that doesn't already have\n * an ID.\n *\n * ARIA relies on elements to provide `role` attributes. This mixin will apply\n * a default role of \"listbox\" on the outer list if it doesn't already have an\n * explicit role. Similarly, this mixin will apply a default role of \"option\"\n * to any list item that does not already have a role specified.\n *\n * This mixin expects a set of members that manage the state of the selection:\n * `[symbols.itemSelected]`, `[symbols.itemAdded]`, and `selectedItem`. You can\n * supply these yourself, or do so via\n * [SingleSelectionMixin](SingleSelectionMixin.md).\n *\n * @module\n * @param base {Class} the base class to extend\n * @returns {Class} the extended class\n */\nexport default function (base) {\n\n  /**\n   * The class prototype added by the mixin.\n   */\n  class SelectionAria extends base {\n\n    connectedCallback() {\n      if (super.connectedCallback) { super.connectedCallback(); }\n\n      // Set default ARIA role for the overall component.\n      if (this.getAttribute('role') == null && this[symbols.defaults].role) {\n        this.setAttribute('role', this[symbols.defaults].role);\n      }\n    }\n\n    get [symbols.defaults]() {\n      const defaults = super[symbols.defaults] || {};\n      defaults.role = 'listbox';\n      defaults.itemRole = 'option';\n      return defaults;\n    }\n\n    [symbols.itemAdded](item) {\n      if (super[symbols.itemAdded]) { super[symbols.itemAdded](item); }\n\n      if (!item.getAttribute('role')) {\n        // Assign a default ARIA role for an individual item.\n        item.setAttribute('role', this[symbols.defaults].itemRole);\n      }\n\n      // Ensure each item has an ID so we can set aria-activedescendant on the\n      // overall list whenever the selection changes.\n      //\n      // The ID will take the form of a base ID plus a unique integer. The base\n      // ID will be incorporate the component's own ID. E.g., if a component has\n      // ID \"foo\", then its items will have IDs that look like \"_fooOption1\". If\n      // the compnent has no ID itself, its items will get IDs that look like\n      // \"_option1\". Item IDs are prefixed with an underscore to differentiate\n      // them from manually-assigned IDs, and to minimize the potential for ID\n      // conflicts.\n      if (!item.id) {\n        const baseId = this.id ?\n            \"_\" + this.id + \"Option\" :\n            \"_option\";\n        item.id = baseId + idCount++;\n      }\n    }\n\n    [symbols.itemSelected](item, selected) {\n      if (super[symbols.itemSelected]) { super[symbols.itemSelected](item, selected); }\n      item.setAttribute('aria-selected', selected);\n      const itemId = item.id;\n      if (itemId && selected) {\n        this.setAttribute('aria-activedescendant', itemId);\n      }\n    }\n\n    get selectedItem() {\n      return super.selectedItem;\n    }\n    set selectedItem(item) {\n      if ('selectedItem' in base.prototype) { super.selectedItem = item; }\n      if (item == null) {\n        // Selection was removed.\n        this.removeAttribute('aria-activedescendant');\n      }\n    }\n\n  }\n\n  return SelectionAria;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./elements/elix-mixins/src/SelectionAriaMixin.js","import Symbol from './Symbol';\n\n\n/**\n * A collection of (potentially polyfilled) Symbol objects for standard\n * component properties and methods.\n *\n * These Symbol objects are used to allow mixins and a component to internally\n * communicate, without exposing these properties and methods in the component's\n * public API.\n *\n * To use these Symbol objects in your own component, include this module and\n * then create a property or method whose key is the desired Symbol.\n *\n *     import 'SingleSelectionMixin' from 'elix-mixins/src/SingleSelectionMixin';\n *     import 'symbols' from 'elix-mixins/src/symbols';\n *\n *     class MyElement extends SingleSelectionMixin(HTMLElement) {\n *       [symbols.itemSelected](item, selected) {\n *         // This will be invoked whenever an item is selected/deselected.\n *       }\n *     }\n *\n * @module symbols\n */\nconst symbols = {\n\n  /**\n   * Symbols for the `content` property.\n   *\n   * This property returns the component's content -- however the component\n   * wants to define that. This could, for example, return the component's\n   * distributed children.\n   *\n   * @type {HTMLElement[]}\n   */\n  content: Symbol('content'),\n\n  /**\n   * Symbol for the `contentChanged` method.\n   *\n   * For components that define a `content` property, this method should be\n   * invoked when that property changes.\n   *\n   * @function contentChanged\n   */\n  contentChanged: Symbol('contentChanged'),\n\n  /**\n   * Symbol for the `defaults` property.\n   *\n   * This property can be used to set or override defaults that will be applied\n   * to a new component instance. When implementing this property, take care to\n   * first acquire any defaults defined by the superclass. The standard idiom is\n   * as follows:\n   *\n   *     get [symbols.defaults]() {\n   *       const defaults = super[symbols.defaults] || {};\n   *       // Set or override default values here\n   *       defaults.customProperty = false;\n   *       return defaults;\n   *     }\n   *\n   * @var {object} defaults\n   */\n  defaults: Symbol('defaults'),\n\n  /**\n   * Symbol for the `getItemText` method.\n   *\n   * This method can be applied to an item to return its text.\n   *\n   * @function getText\n   * @param {HTMLElement} item - the item to extract text from\n   * @returns {string} - the text of the item\n   */\n  getItemText: Symbol('getText'),\n\n  /**\n   * Symbol for the `goDown` method.\n   *\n   * This method is invoked when the user wants to go/navigate down.\n   *\n   * @function goDown\n   */\n  goDown: Symbol('goDown'),\n\n  /**\n   * Symbol for the `goEnd` method.\n   *\n   * This method is invoked when the user wants to go/navigate to the end (e.g.,\n   * of a list).\n   *\n   * @function goEnd\n   */\n  goEnd: Symbol('goEnd'),\n\n  /**\n   * Symbol for the `goLeft` method.\n   *\n   * This method is invoked when the user wants to go/navigate left.\n   *\n   * @function goLeft\n   */\n  goLeft: Symbol('goLeft'),\n\n  /**\n   * Symbol for the `goRight` method.\n   *\n   * This method is invoked when the user wants to go/navigate right.\n   *\n   * @function goRight\n   */\n  goRight: Symbol('goRight'),\n\n  /**\n   * Symbol for the `goStart` method.\n   *\n   * This method is invoked when the user wants to go/navigate to the start\n   * (e.g., of a list).\n   *\n   * @function goStart\n   */\n  goStart: Symbol('goStart'),\n\n  /**\n   * Symbol for the `goUp` method.\n   *\n   * This method is invoked when the user wants to go/navigate up.\n   *\n   * @function goUp\n   */\n  goUp: Symbol('goUp'),\n\n  /**\n   * Symbol for the `itemAdded` method.\n   *\n   * This method is invoked when a new item is added to a list.\n   *\n   * @function itemAdded\n   * @param {HTMLElement} item - the item being selected/deselected\n   */\n  itemAdded: Symbol('itemAdded'),\n\n  /**\n   * Symbol for the `itemsChanged` method.\n   *\n   * This method is invoked when the underlying contents change. It is also\n   * invoked on component initialization – since the items have \"changed\" from\n   * being nothing.\n   *\n   * @function itemsChanged\n   */\n  itemsChanged: Symbol('itemsChanged'),\n\n  /**\n   * Symbol for the `itemSelected` method.\n   *\n   * This method is invoked when an item becomes selected or deselected.\n   *\n   * @function itemSelected\n   * @param {HTMLElement} item - the item being selected/deselected\n   * @param {boolean} selected - true if the item is selected, false if not\n   */\n  itemSelected: Symbol('itemSelected'),\n\n  /**\n   * Symbol for the `keydown` method.\n   *\n   * This method is invoked when an element receives a `keydown` event.\n   *\n   * @function keydown\n   * @param {KeyboardEvent} event - the event being processed\n   */\n  keydown: Symbol('keydown'),\n\n  /**\n   * Indicates the general horizontal and/or vertical orientation of the\n   * component. This may affect both presentation and behavior (e.g., of\n   * keyboard navigation).\n   *\n   * Accepted values are \"horizontal\", \"vertical\", or \"both\" (the default).\n   *\n   * @type {string}\n   */\n  orientation: Symbol('orientation'),\n\n  /**\n   * Symbol for the `raiseChangeEvents` property.\n   *\n   * This property is used by mixins to determine whether they should raise\n   * property change events. The standard HTML pattern is to only raise such\n   * events in response to direct user interactions. For a detailed discussion\n   * of this point, see the Gold Standard checklist item for\n   * [Propery Change Events](https://github.com/webcomponents/gold-standard/wiki/Property%20Change%20Events).\n   *\n   * The above article describes a pattern for using a flag to track whether\n   * work is being performed in response to internal component activity, and\n   * whether the component should therefore raise property change events.\n   * This `raiseChangeEvents` symbol is a shared flag used for that purpose by\n   * all Elix mixins and components. Sharing this flag ensures that internal\n   * activity (e.g., a UI event listener) in one mixin can signal other mixins\n   * handling affected properties to raise change events.\n   *\n   * All UI event listeners (and other forms of internal handlers, such as\n   * timeouts and async network handlers) should set `raiseChangeEvents` to\n   * `true` at the start of the event handler, then `false` at the end:\n   *\n   *     this.addEventListener('click', event => {\n   *       this[symbols.raiseChangeEvents] = true;\n   *       // Do work here, possibly setting properties, like:\n   *       this.foo = 'Hello';\n   *       this[symbols.raiseChangeEvents] = false;\n   *     });\n   *\n   * Elsewhere, property setters that raise change events should only do so it\n   * this property is `true`:\n   *\n   *     set foo(value) {\n   *       // Save foo value here, do any other work.\n   *       if (this[symbols.raiseChangeEvents]) {\n   *         const event = new CustomEvent('foo-changed');\n   *         this.dispatchEvent(event);\n   *       }\n   *     }\n   *\n   * In this way, programmatic attempts to set the `foo` property will not\n   * trigger the `foo-changed` event, but UI interactions that update that\n   * property will cause those events to be raised.\n   *\n   * @var {boolean} raiseChangeEvents\n   */\n  raiseChangeEvents: Symbol('raiseChangeEvents'),\n\n  /**\n   * Symbol for the `shadowCreated` method.\n   *\n   * This method is invoked when the component's shadow root has been attached\n   * and populated. Other code can handle this method to perform initialization\n   * that depends upon the existence of a populated shadow subtree.\n   *\n   * @function shadowCreated\n   */\n  shadowCreated: Symbol('shadowCreated'),\n\n  /**\n   * Symbol for the `template` property.\n   *\n   * This property returns a component's template.\n   *\n   * @type {string|HTMLTemplateElement}\n   */\n  template: Symbol('template')\n};\n\nexport default symbols;\n\n\n\n// WEBPACK FOOTER //\n// ./elements/elix-mixins/src/symbols.js","/* The number of fake symbols we've served up */\nlet count = 0;\n\nfunction uniqueString(description) {\n  return `_${description}${count++}`;\n}\n\nconst symbolFunction = typeof window.Symbol === 'function' ?\n  window.Symbol :\n  uniqueString;\n\n/**\n * Polyfill for ES6 symbol class.\n *\n * Mixins and component classes often want to associate private data with an\n * element instance, but JavaScript does not have direct support for true\n * private properties. One approach is to use the\n * [Symbol](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol)\n * data type to set and retrieve data on an element.\n *\n * Unfortunately, the Symbol type is not available in Internet Explorer 11. In\n * lieu of returning a true Symbol, this polyfill returns a different string\n * each time it is called.\n *\n * Usage:\n *\n *     const fooSymbol = Symbol('foo');\n *\n *     class MyElement extends HTMLElement {\n *       get foo() {\n *         return this[fooSymbol];\n *       }\n *       set foo(value) {\n *         this[fooSymbol] = value;\n *       }\n *     }\n *\n * In IE 11, this sample will \"hide\" data behind an instance property that looks\n * like this._foo0. The underscore is meant to reduce (not eliminate) potential\n * accidental access, and the unique number at the end is mean to avoid (not\n * eliminate) naming conflicts.\n *\n * @function Symbol\n * @param {string} description - A string to identify the symbol when debugging\n * @returns {Symbol|string} — A Symbol (in ES6 browsers) or unique string ID (in\n * ES5).\n */\nexport default symbolFunction;\n\n\n\n// WEBPACK FOOTER //\n// ./elements/elix-mixins/src/Symbol.js","import symbols from '../src/symbols';\n\n\n// A cache of processed templates.\n//\n// We maintain this as a map keyed by element tag (localName). We could store\n// an element's processed template on its element prototype. One scenario that\n// wouldn't support would be registration of the same constructor under multiple\n// tag names, which was a (perhaps theoretical) use case for Custom Elements.\n//\nconst mapTagToTemplate = {};\n\n\n/**\n * Mixin which adds stamping a template into a Shadow DOM subtree upon component\n * instantiation.\n *\n * To use this mixin, define a `template` property as a string or HTML\n * `<template>` element:\n *\n *     class MyElement extends ShadowTemplateMixin(HTMLElement) {\n *       get [symbols.template]() {\n *         return `Hello, <em>world</em>.`;\n *       }\n *     }\n *\n * When your component class is instantiated, a shadow root will be created on\n * the instance, and the contents of the template will be cloned into the\n * shadow root. If your component does not define a `template` property, this\n * mixin has no effect.\n *\n * For the time being, this extension retains support for Shadow DOM v0. That\n * will eventually be deprecated as browsers (and the Shadow DOM polyfill)\n * implement Shadow DOM v1.\n *\n * @module ShadowTemplateMixin\n * @param base {Class} the base class to extend\n * @returns {Class} the extended class\n */\nexport default function ShadowTemplateMixin(base) {\n\n  /**\n   * The class prototype added by the mixin.\n   */\n  class ShadowTemplate extends base {\n\n    /*\n     * If the component defines a template, a shadow root will be created on the\n     * component instance, and the template stamped into it.\n     */\n    constructor() {\n      super();\n\n      const tag = this.localName;\n      let template = mapTagToTemplate[tag];\n\n      // See if we've already processed a template for this tag.\n      if (!template) {\n        // This is the first time we've created an instance of this tag.\n\n        // Get the template and perform initial processing.\n        template = this[symbols.template];\n        if (!template) {\n          console.warn(`ShadowTemplateMixin expects a component to define a property called [symbols.template].`);\n          return;\n        }\n\n        if (typeof template === 'string') {\n          // Upgrade plain string to real template.\n          const templateText = template;\n          template = document.createElement('template');\n          template.innerHTML = templateText;\n        }\n\n        if (window.ShadyCSS) {\n          // Let the CSS polyfill do its own initialization.\n          window.ShadyCSS.prepareTemplate(template, tag);\n        }\n\n        // Store this for the next time we create the same type of element.\n        mapTagToTemplate[tag] = template;\n      }\n\n      // Stamp the template into a new shadow root.\n      const root = this.attachShadow({ mode: 'open' });\n      const clone = document.importNode(template.content, true);\n      root.appendChild(clone);\n\n      /* Let the component know the shadow tree has been populated. */\n      if (this[symbols.shadowCreated]) {\n        this[symbols.shadowCreated]();\n      }\n    }\n\n    connectedCallback() {\n      if (super.connectedCallback) { super.connectedCallback(); }\n      if (window.ShadyCSS) {\n        window.ShadyCSS.applyStyle(this);\n      }\n    }\n\n  }\n\n  return ShadowTemplate;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./elements/elix-mixins/src/ShadowTemplateMixin.js","import Symbol from './Symbol';\nimport symbols from './symbols';\n\n\n// Symbols for private data members on an element.\nconst canSelectNextSymbol = Symbol('canSelectNext');\nconst canSelectPreviousSymbol = Symbol('canSelectPrevious');\nconst selectionRequiredSymbol = Symbol('selectionRequired');\nconst selectionWrapsSymbol = Symbol('selectionWraps');\n\n// We want to expose both selectedIndex and selectedItem as independent\n// properties but keep them in sync. This allows a component user to reference\n// the selection by whatever means is most natural for their situation.\n//\n// To efficiently keep these properties in sync, we track \"external\" and\n// \"internal\" references for each property:\n//\n// The external index or item is the one we report to the outside world when\n// asked for selection.  When handling a change to index or item, we update the\n// external reference as soon as possible, so that if anyone immediately asks\n// for the current selection, they will receive a stable answer.\n//\n// The internal index or item tracks whichever index or item last received the\n// full set of processing. Processing includes raising a change event for the\n// new value. Once we've begun that processing, we store the new value as the\n// internal value to indicate we've handled it.\n//\nconst externalSelectedIndexSymbol = Symbol('externalSelectedIndex');\nconst externalSelectedItemSymbol = Symbol('externalSelectedItem');\nconst internalSelectedIndexSymbol = Symbol('internalSelectedIndex');\nconst internalSelectedItemSymbol = Symbol('internalSelectedItem');\n\n\n/**\n * Mixin which adds single-selection semantics for items in a list.\n *\n * This mixin expects a component to provide an `items` Array or NodeList of\n * all elements in the list.\n *\n * This mixin tracks a single selected item in the list, and provides means to\n * get and set that state by item position (`selectedIndex`) or item identity\n * (`selectedItem`). The selection can be moved in the list via the methods\n * `selectFirst`, `selectLast`, `selectNext`, and `selectPrevious`.\n *\n * This mixin does not produce any user-visible effects to represent\n * selection.\n *\n * @module SingleSelectionMixin\n * @param base {Class} the base class to extend\n * @returns {Class} the extended class\n */\nexport default function SingleSelectionMixin(base) {\n\n  /**\n   * The class prototype added by the mixin.\n   */\n  class SingleSelection extends base {\n\n    constructor() {\n      super();\n      // Set defaults.\n      if (typeof this.selectionRequired === 'undefined') {\n        this.selectionRequired = this[symbols.defaults].selectionRequired;\n      }\n      if (typeof this.selectionWraps === 'undefined') {\n        this.selectionWraps = this[symbols.defaults].selectionWraps;\n      }\n    }\n\n    /**\n     * True if the selection can be moved to the next item, false if not (the\n     * selected item is the last item in the list).\n     *\n     * @type {boolean}\n     */\n    get canSelectNext() {\n      return this[canSelectNextSymbol];\n    }\n    set canSelectNext(canSelectNext) {\n      const changed = canSelectNext !== this[canSelectNextSymbol];\n      this[canSelectNextSymbol] = canSelectNext;\n      if ('canSelectNext' in base.prototype) { super.canSelectNext = canSelectNext; }\n      if (this[symbols.raiseChangeEvents] && changed) {\n        this.dispatchEvent(new CustomEvent('can-select-next-changed'));\n      }\n    }\n\n    /**\n     * True if the selection can be moved to the previous item, false if not\n     * (the selected item is the first one in the list).\n     *\n     * @type {boolean}\n     */\n    get canSelectPrevious() {\n      return this[canSelectPreviousSymbol];\n    }\n    set canSelectPrevious(canSelectPrevious) {\n      const changed = canSelectPrevious !== this[canSelectPreviousSymbol];\n      this[canSelectPreviousSymbol] = canSelectPrevious;\n      if ('canSelectPrevious' in base.prototype) { super.canSelectPrevious = canSelectPrevious; }\n      if (this[symbols.raiseChangeEvents] && changed) {\n        this.dispatchEvent(new CustomEvent('can-select-previous-changed'));\n      }\n    }\n\n    get [symbols.defaults]() {\n      const defaults = super[symbols.defaults] || {};\n      defaults.selectionRequired = false;\n      defaults.selectionWraps = false;\n      return defaults;\n    }\n\n    /**\n     * Handle a new item being added to the list.\n     *\n     * The default implementation of this method simply sets the item's\n     * selection state to false.\n     *\n     * @param {HTMLElement} item - the item being added\n     */\n    [symbols.itemAdded](item) {\n      if (super[symbols.itemAdded]) { super[symbols.itemAdded](item); }\n      this[symbols.itemSelected](item, item === this.selectedItem);\n    }\n\n    [symbols.itemsChanged]() {\n      if (super[symbols.itemsChanged]) { super[symbols.itemsChanged](); }\n\n      // In case selected item changed position or was removed.\n      trackSelectedItem(this);\n\n      // In case the change in items affected which navigations are possible.\n      updatePossibleNavigations(this);\n    }\n\n    /**\n     * Apply the indicate selection state to the item.\n     *\n     * The default implementation of this method does nothing. User-visible\n     * effects will typically be handled by other mixins.\n     *\n     * @param {HTMLElement} item - the item being selected/deselected\n     * @param {boolean} selected - true if the item is selected, false if not\n     */\n    [symbols.itemSelected](item, selected) {\n      if (super[symbols.itemSelected]) { super[symbols.itemSelected](item, selected); }\n    }\n\n    /**\n     * The index of the item which is currently selected.\n     *\n     * The setter expects an integer or a string representing an integer.\n     *\n     * A `selectedIndex` of -1 indicates there is no selection. Setting this\n     * property to -1 will remove any existing selection.\n     *\n     * @type {number}\n     */\n    get selectedIndex() {\n      return this[externalSelectedIndexSymbol] != null ?\n        this[externalSelectedIndexSymbol] :\n        -1;\n    }\n    set selectedIndex(index) {\n      // See notes at top about internal vs. external copies of this property.\n      const changed = index !== this[internalSelectedIndexSymbol];\n      let item;\n      let parsedIndex = parseInt(index);\n      if (parsedIndex !== this[externalSelectedIndexSymbol]) {\n        // Store the new index and the corresponding item.\n        const items = this.items;\n        const hasItems = items && items.length > 0;\n        if (!(hasItems && parsedIndex >= 0 && parsedIndex < items.length)) {\n          parsedIndex = -1; // No item at that index.\n        }\n        this[externalSelectedIndexSymbol] = parsedIndex;\n        item = hasItems && parsedIndex >= 0 ? items[parsedIndex] : null;\n        this[externalSelectedItemSymbol] = item;\n      } else {\n        item = this[externalSelectedItemSymbol];\n      }\n\n      // Now let super do any work.\n      if ('selectedIndex' in base.prototype) { super.selectedIndex = index; }\n\n      if (changed) {\n        // The selected index changed.\n        this[internalSelectedIndexSymbol] = parsedIndex;\n\n        if (this[symbols.raiseChangeEvents]) {\n          const event = new CustomEvent('selected-index-changed', {\n            detail: {\n              selectedIndex: parsedIndex,\n              value: parsedIndex // for Polymer binding. TODO: Verify still necessary\n            }\n          });\n          this.dispatchEvent(event);\n        }\n      }\n\n      if (this[internalSelectedItemSymbol] !== item) {\n        // Update selectedItem property so it can have its own effects.\n        this.selectedItem = item;\n      }\n    }\n\n    /**\n     * The currently selected item, or null if there is no selection.\n     *\n     * Setting this property to null deselects any currently-selected item.\n     * Setting this property to an object that is not in the list has no effect.\n     *\n     * TODO: Even if selectionRequired, can still explicitly set selectedItem to null.\n     * TODO: If selectionRequired, leave selection alone?\n     *\n     * @type {object}\n     */\n    get selectedItem() {\n      return this[externalSelectedItemSymbol] || null;\n    }\n    set selectedItem(item) {\n      // See notes at top about internal vs. external copies of this property.\n      const previousSelectedItem = this[internalSelectedItemSymbol];\n      const changed = item !== previousSelectedItem;\n      let index;\n      if (item !== this[externalSelectedItemSymbol]) {\n        // Store item and look up corresponding index.\n        const items = this.items;\n        const hasItems = items && items.length > 0;\n        index = hasItems ? Array.prototype.indexOf.call(items, item) : -1;\n        this[externalSelectedIndexSymbol] = index;\n        if (index < 0) {\n          item = null; // The indicated item isn't actually in `items`.\n        }\n        this[externalSelectedItemSymbol] = item;\n      } else {\n        index = this[externalSelectedIndexSymbol];\n      }\n\n      // Now let super do any work.\n      if ('selectedItem' in base.prototype) { super.selectedItem = item; }\n\n      if (changed) {\n        // The selected item changed.\n        this[internalSelectedItemSymbol] = item;\n\n        if (previousSelectedItem) {\n          // Update selection state of old item.\n          this[symbols.itemSelected](previousSelectedItem, false);\n        }\n        if (item) {\n          // Update selection state to new item.\n          this[symbols.itemSelected](item, true);\n        }\n\n        updatePossibleNavigations(this);\n\n        if (this[symbols.raiseChangeEvents]) {\n          const event = new CustomEvent('selected-item-changed', {\n            detail: {\n              selectedItem: item,\n              value: item // for Polymer binding\n            }\n          });\n          this.dispatchEvent(event);\n        }\n      }\n\n      if (this[internalSelectedIndexSymbol] !== index) {\n        // Update selectedIndex property so it can have its own effects.\n        this.selectedIndex = index;\n      }\n    }\n\n    /**\n     * Select the first item in the list.\n     *\n     * @returns {Boolean} True if the selection changed, false if not.\n     */\n    selectFirst() {\n      if (super.selectFirst) { super.selectFirst(); }\n      return selectIndex(this, 0);\n    }\n\n    /**\n     * True if the list should always have a selection (if it has items).\n     *\n     * @type {boolean}\n     * @default false\n     */\n    get selectionRequired() {\n      return this[selectionRequiredSymbol];\n    }\n    set selectionRequired(selectionRequired) {\n      const parsed = String(selectionRequired) === 'true';\n      const changed = parsed !== this[selectionRequiredSymbol];\n      this[selectionRequiredSymbol] = parsed;\n      if ('selectionRequired' in base.prototype) { super.selectionRequired = selectionRequired; }\n      if (changed) {\n        if (this[symbols.raiseChangeEvents]) {\n          const event = new CustomEvent('selection-required-changed');\n          this.dispatchEvent(event);\n        }\n        if (selectionRequired) {\n          trackSelectedItem(this);\n        }\n      }\n    }\n\n    /**\n     * True if selection navigations wrap from last to first, and vice versa.\n     *\n     * @type {boolean}\n     * @default false\n     */\n    get selectionWraps() {\n      return this[selectionWrapsSymbol];\n    }\n    set selectionWraps(selectionWraps) {\n      const parsed = String(selectionWraps) === 'true';\n      const changed = parsed !== this[selectionWrapsSymbol];\n      this[selectionWrapsSymbol] = parsed;\n      if ('selectionWraps' in base.prototype) { super.selectionWraps = selectionWraps; }\n      if (changed) {\n        if (this[symbols.raiseChangeEvents]) {\n          const event = new CustomEvent('selection-wraps-changed');\n          this.dispatchEvent(event);\n        }\n        updatePossibleNavigations(this);\n      }\n    }\n\n    /**\n     * Select the last item in the list.\n     *\n     * @returns {Boolean} True if the selection changed, false if not.\n     */\n    selectLast() {\n      if (super.selectLast) { super.selectLast(); }\n      return selectIndex(this, this.items.length - 1);\n    }\n\n    /**\n     * Select the next item in the list.\n     *\n     * If the list has no selection, the first item will be selected.\n     *\n     * @returns {Boolean} True if the selection changed, false if not.\n     */\n    selectNext() {\n      if (super.selectNext) { super.selectNext(); }\n      return selectIndex(this, this.selectedIndex + 1);\n    }\n\n    /**\n     * Select the previous item in the list.\n     *\n     * If the list has no selection, the last item will be selected.\n     *\n     * @returns {Boolean} True if the selection changed, false if not.\n     */\n    selectPrevious() {\n      if (super.selectPrevious) { super.selectPrevious(); }\n      const newIndex = this.selectedIndex < 0 ?\n        this.items.length - 1 :     // No selection yet; select last item.\n        this.selectedIndex - 1;\n      return selectIndex(this, newIndex);\n    }\n\n    /**\n     * Fires when the canSelectNext property changes in response to internal\n     * component activity.\n     *\n     * @memberof SingleSelection\n     * @event can-select-next-changed\n     */\n\n    /**\n     * Fires when the canSelectPrevious property changes in response to internal\n     * component activity.\n     *\n     * @memberof SingleSelection\n     * @event can-select-previous-changed\n     */\n\n    /**\n     * Fires when the selectedIndex property changes in response to internal\n     * component activity.\n     *\n     * @memberof SingleSelection\n     * @event selected-index-changed\n     * @param {number} detail.selectedIndex The new selected index.\n     */\n\n    /**\n     * Fires when the selectedItem property changes in response to internal\n     * component activity.\n     *\n     * @memberof SingleSelection\n     * @event selected-item-changed\n     * @param {HTMLElement} detail.selectedItem The new selected item.\n     */\n\n  }\n\n  return SingleSelection;\n}\n\n\n// Ensure the given index is within bounds, and select it if it's not already\n// selected.\nfunction selectIndex(element, index) {\n\n  const items = element.items;\n  if (items == null) {\n    // Nothing to select.\n    return false;\n  }\n\n  const count = items.length;\n  const boundedIndex = element.selectionWraps ?\n    // JavaScript mod doesn't handle negative numbers the way we want to wrap.\n    // See http://stackoverflow.com/a/18618250/76472\n    ((index % count) + count) % count :\n\n    // Keep index within bounds of array.\n    Math.max(Math.min(index, count - 1), 0);\n\n  const previousIndex = element.selectedIndex;\n  if (previousIndex !== boundedIndex) {\n    element.selectedIndex = boundedIndex;\n    return true;\n  } else {\n    return false;\n  }\n}\n\n// Following a change in the set of items, or in the value of the\n// `selectionRequired` property, reacquire the selected item. If it's moved,\n// update `selectedIndex`. If it's been removed, and a selection is required,\n// try to select another item.\nfunction trackSelectedItem(element) {\n\n  const items = element.items;\n  const itemCount = items ? items.length : 0;\n\n  const previousSelectedItem = element.selectedItem;\n  if (!previousSelectedItem) {\n    // No item was previously selected.\n    if (element.selectionRequired) {\n      // Select the first item by default.\n      element.selectedIndex = 0;\n    }\n  } else if (itemCount === 0) {\n    // We've lost the selection, and there's nothing left to select.\n    element.selectedItem = null;\n  } else {\n    // Try to find the previously-selected item in the current set of items.\n    const indexInCurrentItems = Array.prototype.indexOf.call(items, previousSelectedItem);\n    const previousSelectedIndex = element.selectedIndex;\n    if (indexInCurrentItems < 0) {\n      // Previously-selected item was removed from the items.\n      // Select the item at the same index (if it exists) or as close as possible.\n      const newSelectedIndex = Math.min(previousSelectedIndex, itemCount - 1);\n      // Select by item, since index may be the same, and we want to raise the\n      // selected-item-changed event.\n      element.selectedItem = items[newSelectedIndex];\n    } else if (indexInCurrentItems !== previousSelectedIndex) {\n      // Previously-selected item still there, but changed position.\n      element.selectedIndex = indexInCurrentItems;\n    }\n  }\n}\n\n// Following a change in selection, report whether it's now possible to\n// go next/previous from the given index.\nfunction updatePossibleNavigations(element) {\n  let canSelectNext;\n  let canSelectPrevious;\n  const items = element.items;\n  if (items == null || items.length === 0) {\n    // No items to select.\n    canSelectNext = false;\n    canSelectPrevious = false;\n  } else if (element.selectionWraps) {\n    // Since there are items, can always go next/previous.\n    canSelectNext = true;\n    canSelectPrevious = true;\n  } else {\n    const index = element.selectedIndex;\n    if (index < 0 && items.length > 0) {\n      // Special case. If there are items but no selection, declare that it's\n      // always possible to go next/previous to create a selection.\n      canSelectNext = true;\n      canSelectPrevious = true;\n    } else {\n      // Normal case: we have an index in a list that has items.\n      canSelectPrevious = (index > 0);\n      canSelectNext = (index < items.length - 1);\n    }\n  }\n  if (element.canSelectNext !== canSelectNext) {\n    element.canSelectNext = canSelectNext;\n  }\n  if (element.canSelectPrevious !== canSelectPrevious) {\n    element.canSelectPrevious = canSelectPrevious;\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./elements/elix-mixins/src/SingleSelectionMixin.js"],"sourceRoot":""}